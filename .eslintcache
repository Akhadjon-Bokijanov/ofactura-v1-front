[{"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\index.js":"1","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\translate.js":"2","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\reportWebVitals.js":"3","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\store.js":"4","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\App.jsx":"5","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\root-saga.js":"6","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\root-reducer.js":"7","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\user\\user.selector.js":"8","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\user\\user.action.js":"9","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\context\\UserContext.js":"10","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\env.js":"11","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\font-awesome-icons\\font-awesome-icons.js":"12","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\index.component.jsx":"13","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\frontend\\index.router.jsx":"14","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\admin\\admin.router.jsx":"15","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\header\\header.component.jsx":"16","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\user\\user.reducer.js":"17","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\factura-draft\\factura-draft.reducer.js":"18","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\pages\\auth\\index.js":"19","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\user\\user.action-types.js":"20","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\admin\\notification\\form.component.jsx":"21","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\right-sidebar\\right-sidebar.component.jsx":"22","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\common\\home\\home.component.jsx":"23","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\factura-draft\\factura-draft.action-types.js":"24","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\pages\\auth\\login\\login.component.jsx":"25","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\utils\\home.config.provider.js":"26","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\bindrouming-popup\\bindrouming-popup.component.jsx":"27","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\aferta-popup\\aferta-popup.component.jsx":"28","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\utils\\utils.js":"29","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\utils\\e-imzo.js":"30","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\sevices\\loginService.js":"31","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\sevices\\api.js":"32","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\dyna-grid\\dyna-grid.component.jsx":"33","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\sevices\\apiWithoutTokens.js":"34","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\rich-text-parser\\rich-text-parser.component.jsx":"35","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\left-sidebar\\left-sidebar.component.jsx":"36","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\cabinet-header\\CabinetHeader.jsx":"37","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\language-dropdown\\locale-dropdown.jsx":"38","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\frontend\\home\\home.component.jsx":"39","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\frontend\\choose_company\\choose-company.component.jsx":"40","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\tty\\index.router.jsx":"41","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\notifications\\notifications.component.jsx":"42","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\contract\\index.router.jsx":"43","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\act\\index.router.jsx":"44","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\profile\\profile.component.jsx":"45","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\empowerment\\index.component.jsx":"46","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\home\\home.component.jsx":"47","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\factura\\index.component.jsx":"48","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\tty\\view\\view.component.jsx":"49","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\tty\\create\\create.component.jsx":"50","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\act\\view\\view.component.jsx":"51","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\contract\\view\\view.component.jsx":"52","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\profile\\profile-tabs.router.jsx":"53","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\profile\\profile-tabs.component.jsx":"54","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\act\\create\\create.component.jsx":"55","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\admin-card\\admin-card.component.jsx":"56","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\factura\\create\\create.component.jsx":"57","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\contract\\create\\create.component.jsx":"58","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\factura\\create\\create-excel-type.component.jsx":"59","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\empowerment\\view\\view.component.jsx":"60","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\empowerment\\create\\create.component.jsx":"61","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\factura\\view\\view.component.jsx":"62","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\utils\\main.js":"63","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\factura-draft\\factura-draft.action.js":"64","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\common\\seller-form.component.jsx":"65","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\factura-draft\\factura-draft.selector.js":"66","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\sevices\\getToken.js":"67","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\models\\FacturaProduct.js":"68","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\models\\Factura.js":"69","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\sevices\\empService.js":"70","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\common\\buyer-form.component.jsx":"71","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\common\\person-fetch\\person-fetch.component.jsx":"72","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\data-sheet-custom-selector\\custom-selector.component.jsx":"73","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\data-sheet-custom-measure-selector\\custom-selector.component.jsx":"74","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\password-change\\password-change.component.jsx":"75","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\models\\EmpowermentProduct.js":"76","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\models\\Empowerment.js":"77","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\factura\\create\\product-grid.component.jsx":"78","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\data-sheet-custom-measure-selector\\measure-viewer.jsx":"79","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\grid-singlesidedtype-select.component\\grid-singlesidedtype-select.component.jsx":"80","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\grid-doctype-select\\grid-doctype-select.component.jsx":"81","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\grid-datetime\\grid-datetime.component.jsx":"82","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\grid-user-fetcher-input\\grid-user-fetcher-input.component.jsx":"83","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\viewHeader\\index.js":"84","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\payme-form\\payme-form.component.jsx":"85","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\classcodes-ajax-search\\classcodes-ajax-search.component.jsx":"86","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\utils\\DateFormat.js":"87","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\settings\\user-products\\user-products.component.jsx":"88","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\settings\\account-form\\account-form.component.jsx":"89","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\settings\\account\\index.js":"90","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\settings\\notification\\index.js":"91","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\utils\\doc-sign.js":"92","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\models\\AktProduct.js":"93","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\models\\Akt.js":"94"},{"size":1027,"mtime":1618477229093,"results":"95","hashOfConfig":"96"},{"size":1131,"mtime":1618477229101,"results":"97","hashOfConfig":"96"},{"size":375,"mtime":1618477229100,"results":"98","hashOfConfig":"96"},{"size":675,"mtime":1618477229097,"results":"99","hashOfConfig":"96"},{"size":2708,"mtime":1619416964656,"results":"100","hashOfConfig":"96"},{"size":118,"mtime":1618477229097,"results":"101","hashOfConfig":"96"},{"size":534,"mtime":1618477229096,"results":"102","hashOfConfig":"96"},{"size":990,"mtime":1618477229100,"results":"103","hashOfConfig":"96"},{"size":1056,"mtime":1618477229099,"results":"104","hashOfConfig":"96"},{"size":109,"mtime":1616073029425,"results":"105","hashOfConfig":"96"},{"size":761,"mtime":1618477229085,"results":"106","hashOfConfig":"96"},{"size":1466,"mtime":1619256676819,"results":"107","hashOfConfig":"96"},{"size":1938,"mtime":1619263410603,"results":"108","hashOfConfig":"96"},{"size":1239,"mtime":1619258658147,"results":"109","hashOfConfig":"96"},{"size":1184,"mtime":1618477229008,"results":"110","hashOfConfig":"96"},{"size":3868,"mtime":1618985564255,"results":"111","hashOfConfig":"96"},{"size":1875,"mtime":1618477229099,"results":"112","hashOfConfig":"96"},{"size":656,"mtime":1618477229095,"results":"113","hashOfConfig":"96"},{"size":732,"mtime":1618984653834,"results":"114","hashOfConfig":"96"},{"size":486,"mtime":1618477229098,"results":"115","hashOfConfig":"96"},{"size":7325,"mtime":1618477229009,"results":"116","hashOfConfig":"96"},{"size":9562,"mtime":1619263410607,"results":"117","hashOfConfig":"96"},{"size":2739,"mtime":1619263410600,"results":"118","hashOfConfig":"96"},{"size":92,"mtime":1618477229094,"results":"119","hashOfConfig":"96"},{"size":11957,"mtime":1619259126886,"results":"120","hashOfConfig":"96"},{"size":17940,"mtime":1619674053184,"results":"121","hashOfConfig":"96"},{"size":3344,"mtime":1618477229018,"results":"122","hashOfConfig":"96"},{"size":3339,"mtime":1618477229017,"results":"123","hashOfConfig":"96"},{"size":668,"mtime":1618477229105,"results":"124","hashOfConfig":"96"},{"size":28500,"mtime":1618477229102,"results":"125","hashOfConfig":"96"},{"size":372,"mtime":1619171435050,"results":"126","hashOfConfig":"96"},{"size":818,"mtime":1619674053119,"results":"127","hashOfConfig":"96"},{"size":21959,"mtime":1619692934998,"results":"128","hashOfConfig":"96"},{"size":147,"mtime":1619171434994,"results":"129","hashOfConfig":"96"},{"size":360,"mtime":1618477229080,"results":"130","hashOfConfig":"96"},{"size":1580,"mtime":1618477229073,"results":"131","hashOfConfig":"96"},{"size":2576,"mtime":1619256676804,"results":"132","hashOfConfig":"96"},{"size":2483,"mtime":1619256676820,"results":"133","hashOfConfig":"96"},{"size":252,"mtime":1618994403835,"results":"134","hashOfConfig":"96"},{"size":4253,"mtime":1618998615641,"results":"135","hashOfConfig":"96"},{"size":701,"mtime":1618477229049,"results":"136","hashOfConfig":"96"},{"size":1765,"mtime":1618477229043,"results":"137","hashOfConfig":"96"},{"size":773,"mtime":1618477229024,"results":"138","hashOfConfig":"96"},{"size":1286,"mtime":1619674052873,"results":"139","hashOfConfig":"96"},{"size":1128,"mtime":1619594274542,"results":"140","hashOfConfig":"96"},{"size":1334,"mtime":1619508501108,"results":"141","hashOfConfig":"96"},{"size":5237,"mtime":1619177205696,"results":"142","hashOfConfig":"96"},{"size":1428,"mtime":1618895648588,"results":"143","hashOfConfig":"96"},{"size":769,"mtime":1618477229050,"results":"144","hashOfConfig":"96"},{"size":23703,"mtime":1618477229049,"results":"145","hashOfConfig":"96"},{"size":9243,"mtime":1619674052945,"results":"146","hashOfConfig":"96"},{"size":794,"mtime":1618477229025,"results":"147","hashOfConfig":"96"},{"size":837,"mtime":1619603912065,"results":"148","hashOfConfig":"96"},{"size":1719,"mtime":1619603760853,"results":"149","hashOfConfig":"96"},{"size":14239,"mtime":1619674052859,"results":"150","hashOfConfig":"96"},{"size":708,"mtime":1618477229054,"results":"151","hashOfConfig":"96"},{"size":16571,"mtime":1619674052956,"results":"152","hashOfConfig":"96"},{"size":18597,"mtime":1618477229023,"results":"153","hashOfConfig":"96"},{"size":12443,"mtime":1618477229030,"results":"154","hashOfConfig":"96"},{"size":10349,"mtime":1619691156780,"results":"155","hashOfConfig":"96"},{"size":18791,"mtime":1619688845911,"results":"156","hashOfConfig":"96"},{"size":15235,"mtime":1619515702914,"results":"157","hashOfConfig":"96"},{"size":11886,"mtime":1619081953829,"results":"158","hashOfConfig":"96"},{"size":215,"mtime":1618477229095,"results":"159","hashOfConfig":"96"},{"size":6687,"mtime":1618987861609,"results":"160","hashOfConfig":"96"},{"size":205,"mtime":1618477229096,"results":"161","hashOfConfig":"96"},{"size":487,"mtime":1619349594046,"results":"162","hashOfConfig":"96"},{"size":3500,"mtime":1618601052067,"results":"163","hashOfConfig":"96"},{"size":6664,"mtime":1619256676807,"results":"164","hashOfConfig":"96"},{"size":508,"mtime":1619505539009,"results":"165","hashOfConfig":"96"},{"size":13341,"mtime":1618477229019,"results":"166","hashOfConfig":"96"},{"size":2542,"mtime":1618477229021,"results":"167","hashOfConfig":"96"},{"size":1980,"mtime":1619252787404,"results":"168","hashOfConfig":"96"},{"size":3379,"mtime":1619253695763,"results":"169","hashOfConfig":"96"},{"size":5151,"mtime":1618477229044,"results":"170","hashOfConfig":"96"},{"size":2515,"mtime":1619501550273,"results":"171","hashOfConfig":"96"},{"size":3450,"mtime":1619686781380,"results":"172","hashOfConfig":"96"},{"size":12351,"mtime":1619263410602,"results":"173","hashOfConfig":"96"},{"size":306,"mtime":1619263410624,"results":"174","hashOfConfig":"96"},{"size":1328,"mtime":1618477229069,"results":"175","hashOfConfig":"96"},{"size":1220,"mtime":1618477229068,"results":"176","hashOfConfig":"96"},{"size":402,"mtime":1618477229067,"results":"177","hashOfConfig":"96"},{"size":685,"mtime":1618477229069,"results":"178","hashOfConfig":"96"},{"size":4438,"mtime":1619687312109,"results":"179","hashOfConfig":"96"},{"size":284,"mtime":1618477229045,"results":"180","hashOfConfig":"96"},{"size":2632,"mtime":1619674053046,"results":"181","hashOfConfig":"96"},{"size":390,"mtime":1619589721878,"results":"182","hashOfConfig":"96"},{"size":1883,"mtime":1619595410025,"results":"183","hashOfConfig":"96"},{"size":5597,"mtime":1619595435104,"results":"184","hashOfConfig":"96"},{"size":5477,"mtime":1619607997922,"results":"185","hashOfConfig":"96"},{"size":3264,"mtime":1619607572175,"results":"186","hashOfConfig":"96"},{"size":1134,"mtime":1619683181238,"results":"187","hashOfConfig":"96"},{"size":1662,"mtime":1619674053015,"results":"188","hashOfConfig":"96"},{"size":1653,"mtime":1619674053014,"results":"189","hashOfConfig":"96"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},"gb797",{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"192"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"192"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"192"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"192"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"192"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"192"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"192"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"192"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"192"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"192"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"192"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"192"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"192"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"192"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"192"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"192"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"192"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"192"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"192"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"320","messages":"321","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"192"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"325","messages":"326","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"192"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"192"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"333","messages":"334","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"192"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"192"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"192"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"192"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"192"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"192"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"192"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"192"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"192"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"376","messages":"377","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"192"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"192"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"192"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"192"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"398","messages":"399","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"400","usedDeprecatedRules":"192"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"403","usedDeprecatedRules":"192"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"192"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\index.js",[],["417","418"],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\translate.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\reportWebVitals.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\store.js",["419"],"import { createStore, applyMiddleware } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport { persistStore } from 'redux-persist';\r\nimport rootReducer from './root-reducer';\r\nimport creatSagaMiddleware from 'redux-saga';\r\nimport rootSaga from './root-saga';\r\n\r\nconst sagaMiddleWare = creatSagaMiddleware();\r\n\r\nconst middleWares = [sagaMiddleWare];\r\n\r\nmiddleWares.push(logger);\r\n\r\n// if(process.env.NODE_ENV ==='development'){\r\n//     middleWares.push(logger);\r\n// }\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middleWares));\r\n\r\nsagaMiddleWare.run(rootSaga)\r\n\r\nexport const persistor = persistStore(store);\r\n\r\nexport default { store, persistor };","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\App.jsx",["420","421","422","423","424","425"],"import './App.scss';\r\nimport 'antd/dist/antd.css';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport './components/font-awesome-icons/font-awesome-icons';\r\nimport CabinetIndex from './cabinet/index.component';\r\nimport moment from 'moment';\r\nimport \"moment/locale/uz-latn\";\r\nimport 'moment/locale/ru';\r\nimport axios from 'axios';\r\nimport FrontIndexRouter from './frontend/index.router';\r\nimport Header from './components/header/header.component';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectCurrentUser, selectLoadedKey, selectToken } from './redux/user/user.selector';\r\nimport { logOut } from './redux/user/user.action';\r\nimport { API_HOST } from './env';\r\nimport AdminIndexRouter from './admin/admin.router';\r\nimport { message, Modal } from 'antd';\r\nimport { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Auth from \"./pages/auth\";\r\nimport UserContext from \"./context/UserContext\";\r\n\r\nconst ForAuthenticatedUsers=()=>{\r\n    return(\r\n        <>\r\n            <Switch>\r\n                <Route path=\"/home\" render={()=> <FrontIndexRouter /> } />\r\n                <Route path=\"/admin\" render={()=> <AdminIndexRouter /> }/>\r\n                <Route path=\"/cabinet\" render={()=> <CabinetIndex /> } />\r\n                {/*<Route render={() => <Redirect to=\"/home/choosecompany\" />}></Route>*/}\r\n            </Switch>\r\n        </>\r\n    )\r\n};\r\n\r\n// axiosInstance.interceptors.request.use(\r\n//     request => {\r\n//         // const {token}=store.getState()\r\n//         request.headers.Authorization =`Bearer ${token}`\r\n//         return request;\r\n//     },\r\n//     error => {\r\n//         return error;\r\n//     }\r\n// );\r\n\r\nconst App = ({ user, token, loadedKey, signOut })=> {\r\n\r\n    moment.locale('uz-latn');\r\n    moment.defaultFormat='MMMM Do YYYY'\r\n    const { t } = useTranslation();\r\n    axios.defaults.baseURL = API_HOST\r\n    axios.defaults.headers.common['Authorization'] = \"Bearer \" + token;\r\n\r\n    useEffect(()=>{\r\n\r\n        if (loadedKey?.time + 1000 * 60 * 30 < Date.now()){\r\n            console.log(\"Hi\")\r\n            signOut()\r\n            message.warn((t(\"Sessiyangiz tugadi!\")))\r\n        }\r\n    }, [])\r\n    \r\n   \r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {\r\n                user?<ForAuthenticatedUsers/>:<Auth/>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectCurrentUser,\r\n    token: selectToken,\r\n    loadedKey: selectLoadedKey\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    signOut: () => dispatch(logOut())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\root-saga.js",["426"],"import { all, call } from 'redux-saga/effects';\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n\r\n    ])\r\n}","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\root-reducer.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\user\\user.selector.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\user\\user.action.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\context\\UserContext.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\env.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\font-awesome-icons\\font-awesome-icons.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\index.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\frontend\\index.router.jsx",["427","428","429","430"],"import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport { createStructuredSelector } from 'reselect'\r\nimport Home from './home/home.component'\r\nimport Login from '../pages/auth/login/login.component'\r\nimport { selectCurrentUser } from '../redux/user/user.selector'\r\nimport ChooseCompany from './choose_company/choose-company.component'\r\nimport {Col} from \"antd\";\r\n\r\nconst FrontIndexRouter = ({ match, user }) => {\r\n    console.log(\"match\",match)\r\n    // let {url}=match;\r\n    return (\r\n        <div>\r\n            {/*<Route render={() => <Redirect to={`/home/choosecompany`} />}></Route>*/}\r\n            <Route exact path={`/home`} component={ Home } />\r\n            <Route\r\n                exact={true}\r\n                path={`/home/choosecompany`}\r\n                component={ChooseCompany}\r\n            />\r\n            {/*<Route */}\r\n            {/*    exact */}\r\n            {/*    path={`${match.path}/login`} */}\r\n            {/*    component={ Login } */}\r\n            {/*    />*/}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectCurrentUser,\r\n})\r\n\r\nexport default connect(mapStateToProps)(FrontIndexRouter)\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\admin\\admin.router.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\header\\header.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\user\\user.reducer.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\factura-draft\\factura-draft.reducer.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\pages\\auth\\index.js",["431"],"import React from \"react\";\r\nimport authImg from '../../assests/authImg.png'\r\nimport Login from \"./login/login.component\";\r\nimport {Col,Row} from \"antd\";\r\nimport st from './auth.module.scss'\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nexport default function Auth() {\r\n\r\n    return(\r\n        <>\r\n            <Row justify=\"space-between\" align=\"top\">\r\n                <Col span={14}>\r\n                    <img src={authImg} className={st.auth_img} alt=\"\"/>\r\n                </Col>\r\n                <Col span={10}>\r\n                    <Route path = '/login'><Login/></Route>\r\n                    <Route render={() => <Redirect to=\"/login\" />}></Route>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\user\\user.action-types.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\admin\\notification\\form.component.jsx",["432"],"import { Col, Form, Input, Row, Select, Button, Switch, message } from 'antd'\r\nimport TextArea from 'antd/lib/input/TextArea';\r\nimport axios from 'axios';\r\nimport React, { useState, useEffect } from 'react'\r\n\r\nconst { Option } = Select;\r\n\r\nconst NotificationForm = ({ match }) => {\r\n\r\n    const [form] = Form.useForm();\r\n    const [loading, setLoading] = useState(false);\r\n    const { notificationId } = match.params;\r\n    \r\n    useEffect(()=>{\r\n        if(notificationId){\r\n            axios({\r\n                url:\"api/v1/notifications/\"+notificationId,\r\n                method: \"get\"\r\n            })\r\n            .then(res=>{\r\n                form.setFieldsValue(res.data)\r\n            })\r\n            .catch(err=>{\r\n                console.log(err)\r\n            })\r\n        }\r\n    },[])\r\n    \r\n    const handleSubmit = values => {\r\n\r\n        setLoading(true)\r\n        axios({\r\n            method:  notificationId ? \"patch\" : \"post\",\r\n            data: values,\r\n            url: notificationId ? \"/api/v1/notifications/\"+notificationId  : \"/api/v1/notifications\" \r\n        }).then(res=>{\r\n            if(res.data.ok){\r\n                message.success(\"Notification saqlandi!\");\r\n            }else{\r\n                message.error(\"Notification saqlashda xatolik!\");\r\n            }\r\n            setLoading(false);\r\n        }).catch(err=>{\r\n            console.log(err)\r\n            message.error(\"Notification saqalashda xatolik!\");\r\n            setLoading(false);\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <div style={{marginTop: 20}}>\r\n            <Form\r\n                form={form}\r\n                onFinish={handleSubmit}\r\n                scrollToFirstError\r\n            >\r\n                <div className=\"factura-data-sheet-container\">\r\n                <h3>Notification yaratish</h3>\r\n                <Row justify=\"space-between\">\r\n                    <Col md={11}>\r\n                        <Form.Item>\r\n                            <Form.Item\r\n                                rules={[{ required: true }]}\r\n                                key=\"dyna-form-facutura-no\"\r\n                                name=\"title_uz\">\r\n                                <Input\r\n                                    size=\"large\"\r\n                                    />\r\n                            </Form.Item>\r\n                            <span className=\"custom-input-label-1\">Notification sarlavhasi (uz)</span>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Form.Item\r\n                                rules={[{ required: true }]}\r\n                                key=\"dyna-form-facutura-no\"\r\n                                name=\"title_ru\">\r\n                                <Input\r\n                                    size=\"large\"\r\n                                    />\r\n                            </Form.Item>\r\n                            <span className=\"custom-input-label-1\">Notification sarlavhasi (ru)</span>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Form.Item\r\n                                rules={[{ required: true }]}\r\n                                key=\"dyna-form-facutura-no\"\r\n                                name=\"title_en\">\r\n                                <Input\r\n                                    size=\"large\"\r\n                                    />\r\n                            </Form.Item>\r\n                            <span className=\"custom-input-label-1\">Notification sarlavhasi (en)</span>\r\n                        </Form.Item>\r\n                        \r\n                        <Form.Item>\r\n                            <Form.Item\r\n                                rules={[{ required: true }]}\r\n                                key=\"dyna-form-facutura-no\"\r\n                                name=\"importance\">\r\n                                <Select\r\n                                    bordered={false}\r\n                                    size=\"large\"\r\n                                    name=\"importance\"\r\n                                    defaultActiveFirstOption\r\n                                >\r\n                                    <Option value={1}>1 - Uncha muxim emas</Option>\r\n                                    <Option value={2}>2 - Muxim emas</Option>\r\n                                    <Option value={3}>3 - Muxim</Option>\r\n                                    <Option value={4}>4 - Muximroq</Option>\r\n                                    <Option value={5}>5 - O'ta muxim</Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n                            <span className=\"custom-input-label-1\">Notification muximligi</span>\r\n                        </Form.Item>\r\n                        <Row justify=\"space-between\">\r\n                            <Col md={11}>\r\n                                <Form.Item\r\n                                    label=\"Holati\"\r\n                                    name=\"isActive\"\r\n                                    valuePropName=\"checked\"\r\n                                    rules={[{ required: true }]}\r\n                                >\r\n                                    <Switch />\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col md={11}>\r\n                                <Form.Item>\r\n                                    <Button \r\n                                        loading={loading}\r\n                                        style={{width: '100%'}}\r\n                                        size=\"large\" \r\n                                        htmlType=\"submit\"\r\n                                        className=\"factra-action-btns save-btn\"\r\n                                        >Saqlash</Button>\r\n                                </Form.Item>\r\n                            </Col>\r\n                        </Row>\r\n                        \r\n                    </Col>\r\n                    <Col md={12}>\r\n                        <Form.Item\r\n                            name=\"body_uz\"\r\n                            \r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextArea \r\n                                placeholder=\"Body uz\"\r\n                                rows={4} size=\"large\" />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                        \r\n                            name=\"body_ru\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextArea rows={4} \r\n                                placeholder=\"Body ru\"\r\n                                size=\"large\" />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"body_en\"\r\n                            \r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextArea \r\n                                placeholder=\"Body en\"\r\n                                rows={4} size=\"large\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                </div>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotificationForm\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\right-sidebar\\right-sidebar.component.jsx",["433","434","435","436","437","438","439","440","441"],"import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {Badge, Modal, Tag, Statistic, Spin, Checkbox, Row, Col, Button, Popconfirm} from 'antd';\r\nimport axios from 'axios';\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport './right-sidebar.style.scss';\r\nimport { IMPORTANCE } from '../../env';\r\nimport { logOut, setCabinetData } from '../../redux/user/user.action';\r\nimport { connect } from 'react-redux';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectLoadedKey } from '../../redux/user/user.selector';\r\nimport AfertaPopup from '../aferta-popup/aferta-popup.component';\r\nimport BindroumingPopup from '../bindrouming-popup/bindrouming-popup.component';\r\n\r\nimport logo from '../../assests/logo_new.png'\r\nconst { Countdown } = Statistic;\r\n\r\nconst RightSidebar = ({ location, admin, setData, loadedKey, uOut }) => {\r\n\r\n    const { t } = useTranslation();\r\n\r\n   \r\n\r\n\r\n    const [active, setActive] = useState({})\r\n    const [show, setShow] = useState(false)\r\n    const [notifications, setNotifications] = useState([])\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [badgeCount, setBedgeCount]=useState({\r\n        factura_awaiting: 0,\r\n        contract_awaiting: 0,\r\n        act_awaiting:0,\r\n        emp_awating: 0,\r\n        tty_awaiting:0,\r\n    })\r\n    useEffect(()=>{\r\n        setActive({\r\n            cabinet: location.pathname===\"/cabinet\",\r\n            factura: location.pathname.includes(\"/factura\"),\r\n            contract: location.pathname.includes(\"/contract\"),\r\n            empowerment: location.pathname.includes(\"/empowerment\"),\r\n            act: location.pathname.includes(\"/act\"),\r\n            tty: location.pathname.includes(\"/tty\"),\r\n            freeDoc: location.pathname.includes(\"/free-template\"),\r\n            notification: location.pathname.includes(\"/notification\"),\r\n            settings: location.pathname.includes(\"/settings\"),\r\n            exit: location.pathname.includes(\"/login\")\r\n        })\r\n    }, [location.pathname])\r\n\r\n    const closeModel = ()=>{\r\n        setShowModal(false);\r\n    }\r\n\r\n    useEffect(()=>{\r\n\r\n        axios({\r\n            method: \"GET\",\r\n            url: \"/api/v1/cabinet\"\r\n        }).then(res=>{\r\n            const { notifications } = res.data\r\n            setData(res.data)\r\n            setNotifications(notifications);\r\n            if(Array.isArray(notifications) && notifications.length){\r\n                setShowModal(true)\r\n            }\r\n            setBedgeCount(res.data)\r\n        }).catch(err=>{\r\n            console.log(err)\r\n        })\r\n    }, [])\r\n\r\n    const handleModal=()=>setShow(!show);\r\n\r\n    return (\r\n        <div className=\"cabiner-right-sidebar-cmain-container\">\r\n            {/*<AfertaPopup />*/}\r\n            {/*<BindroumingPopup />*/}\r\n            <Modal \r\n            bodyStyle={{width: '70wv'}}\r\n            title=\"Notifications\"\r\n            visible={showModal}\r\n            onOk={closeModel}\r\n            onCancel={closeModel}\r\n            cancelButtonProps={{style: {display: \"none\"}}}\r\n            >\r\n                {\r\n                    notifications.map((n, index)=><div style={{marginBottom: 30}}>\r\n                        <h3>{index+1}. {n.title_uz}</h3>\r\n                        <div><Tag \r\n                        style={{marginRight: 10}}\r\n                            color={IMPORTANCE[n.importance].color}>\r\n                                {IMPORTANCE[n.importance].text} \r\n                        </Tag>\r\n                        {moment(n.updated_at).format(\"MMMM Do YYYY, H:mm:ss\")}\r\n                        </div>\r\n                        <div>{ n.body_uz }</div>\r\n                        <hr/>\r\n                    </div>)\r\n                }\r\n            </Modal>\r\n            \r\n\r\n            <div className=\"cabiner-right-sidebar-sub-container\">\r\n                <div className=\"cabinet-documents-action-containers-bloks\">\r\n                    <div style={{marginBottom:\"25px\",marginLeft:'20px'}}>\r\n                        <img src={logo} alt=\"\"/>\r\n                    </div>\r\n                    <div>\r\n                        <hr className={\"line\"}/>\r\n                    </div>\r\n                    <Link to=\"/cabinet\">\r\n                        <div className={`action-bloks ${active.cabinet ? 'active' : ''}`}>\r\n                            <FontAwesomeIcon icon=\"home\" /> {t(\"Bosh sahifa\")}\r\n                        </div>\r\n                    </Link>\r\n                    <Link to=\"/cabinet/factura\">\r\n                            <div className={`action-bloks ${active.factura ? 'active' : ''}`}>\r\n                                <FontAwesomeIcon icon=\"file-invoice\" className=\"action-icon\" /> {t(\"Faktura\")}\r\n                                <Badge style={{marginLeft: 10}} count={badgeCount.factura_awaiting} />\r\n                            </div>\r\n                    </Link>\r\n                    <Link to=\"/cabinet/contract\">\r\n                        <div className={`action-bloks ${active.contract ? 'active' : ''}`}>\r\n                            <FontAwesomeIcon icon=\"file-contract\" className=\"action-icon\"/> {t(\"Shartnoma\")}\r\n                            <Badge style={{marginLeft: 10}} count={badgeCount.contract_awaiting} />\r\n                        </div>\r\n                    </Link>\r\n                    <Link to=\"/cabinet/act\">\r\n                        <div className={`action-bloks ${active.act ? 'active' : ''}`}>\r\n                            <FontAwesomeIcon icon={[\"far\", \"file-alt\"]} className=\"action-icon\"/> {t(\"Akt\")}\r\n                            <Badge style={{marginLeft: 10}} count={badgeCount.act_awaiting} />\r\n                        </div>\r\n                    </Link>\r\n                    <Link to=\"/cabinet/empowerment\">\r\n                        <div className={`action-bloks ${active.empowerment ? 'active' : ''}`}>\r\n                            <FontAwesomeIcon icon=\"file-signature\" className=\"action-icon\"/>{t(\"Ishonchnoma\")}\r\n                            <Badge style={{marginLeft: 10}} count={badgeCount.emp_awating} />\r\n                        </div>\r\n                    </Link>\r\n                    <Link to=\"/cabinet/tty\">\r\n                        <div className={`action-bloks ${active.tty ? 'active' : ''}`}>\r\n                            <FontAwesomeIcon icon={[\"far\", \"file-archive\"]} className=\"action-icon\"/> {t(\"TTY\")}\r\n                            <Badge style={{marginLeft: 10}} count={badgeCount.tty_awaiting} />\r\n                        </div>\r\n                    </Link>\r\n                    {\r\n                        admin \r\n                        ? <Link to=\"/admin/notification\">\r\n                            <div className={`action-bloks ${active.notification ? 'active' : ''}`}>\r\n                                <FontAwesomeIcon icon={[\"far\", \"bell\"]}  className=\"action-icon\"/> Notification\r\n                                <Badge style={{marginLeft: 10}} count={3} />\r\n                            </div>\r\n                        </Link>\r\n                        : null\r\n                    }\r\n\r\n                    {\r\n                        loadedKey ?\r\n                            <div className=\"action-bloks\">\r\n                            <Countdown\r\n                                valueStyle={{fontSize: 15, color: '#fff'}}\r\n                                value={loadedKey.time + 1000 * 60 * 30}\r\n                                title={<span style={{color: '#fff'}}>{t(\"Sessiya tugaydi\")}</span>}\r\n                                onFinish={uOut} />\r\n                            </div>\r\n                            : null\r\n                    }\r\n\r\n\r\n\r\n                    <div style={{marginTop:\"100px\"}}>\r\n                        <Link to=\"/cabinet/settings\">\r\n                            <div className={`action-bloks ${active.settings ? 'active' : ''}`}>\r\n                                <FontAwesomeIcon icon=\"cog\" className=\"action-icon\" /> {t(\"Settings\")}\r\n                                <Badge style={{marginLeft: 10}}  />\r\n                            </div>\r\n                        </Link>\r\n                        <Popconfirm\r\n                        onConfirm={()=>uOut()}\r\n                        okText={t(\"Chiqish\")}\r\n                        title={t(\"Chiqishni xoxlaysizmi?\")}\r\n                        cancelText={t(\"Bekor qilish\")}\r\n                        >\r\n                            <div \r\n                                style={{cursor: 'pointer'}} \r\n                                className={`action-bloks ${active.exit ? 'active' : ''}`}>\r\n                                <FontAwesomeIcon icon=\"sign-out-alt\" className=\"action-icon\"/> {t(\"Exit\")}\r\n                                <Badge style={{marginLeft: 10}} />\r\n                            </div>\r\n                        </Popconfirm>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n            {/* <div>\r\n                <Modal title=\"Basic Modal\" style={{width:\"500px\"}} visible={show} onOk={()=>uOut()} onCancel={handleModal}>\r\n                    <h4>Are you sure,you want to exit!!!</h4>\r\n                </Modal>\r\n            </div> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    loadedKey: selectLoadedKey\r\n})\r\n\r\nconst mapDispatchToProps = dispatch =>({\r\n    setData: data => dispatch(setCabinetData(data)),\r\n    uOut: () => dispatch(logOut())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(RightSidebar));\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\common\\home\\home.component.jsx",["442"],"import React, { useState } from 'react';\r\nimport './home.style.scss';\r\nimport DynaGrid from '../../../components/dyna-grid/dyna-grid.component';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport { get_home_config } from '../../../utils/home.config.provider';\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst HomePage = ({ doc, hideTabs, addParams, customButton })=> {\r\n\r\n    const {t} = useTranslation();\r\n\r\n    const tabs = {\r\n        1: [0],\r\n        2: [1],\r\n        3: [2],\r\n        4: [0, 1, 2, 3]\r\n    }\r\n\r\n    const { title, createTitle, createUrl, gridSourceUrl, gridConfig } = get_home_config(doc);\r\n\r\n    const [activeTab, setActiveTab] = useState(1);\r\n\r\n    return (\r\n        <div className=\"factura-home-page-container\">\r\n            <div className=\"factura-home-sub-con\">\r\n                <div className=\"factura-home-title\">\r\n                    <h2>{ title }</h2>\r\n                    {\r\n                        customButton \r\n                        ?customButton\r\n                            : <Link to={createUrl}><button style={{marginRight: 10}} className=\"custom-primary-btn\">{createTitle}</button></Link>\r\n                    }\r\n                </div>\r\n                {\r\n                    hideTabs\r\n                    ? null\r\n                    : <div className=\"factura-home-list-tabs\">\r\n                    <div className=\"factura-home-list-tab-con\">\r\n                        <div onClick={()=>setActiveTab(1)} className={`status-tab-bar ${activeTab===1 ? 'active-tab' : ''}`}>\r\n                            {t(\"Kiruvchi\")}\r\n                        </div> \r\n                        <div onClick={()=>setActiveTab(2)} className={`status-tab-bar ${activeTab===2 ? 'active-tab' : ''}`}>\r\n                            {t(\"Chiquvchi\")}\r\n                        </div>\r\n                        <div onClick={()=>setActiveTab(3)} className={`status-tab-bar ${activeTab===3 ? 'active-tab' : ''}`}>\r\n                            {t(\"Saqlangan\")}\r\n                        </div>\r\n                        <div onClick={()=>setActiveTab(4)} className={`status-tab-bar ${activeTab===4 ? 'active-tab' : ''}`}>\r\n                            {t(\"Barchasi\")}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                }\r\n                \r\n                \r\n                <div>\r\n                    <DynaGrid   \r\n                        config={{ ...gridConfig, dataSourcePath: `${gridSourceUrl}?${tabs[activeTab].map(text=>'AllDocumentsSearch[write_type]='+text+'&')}${addParams ? addParams.map(p=>`${p.name}=${p.value}`): \"\"}`}}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\factura-draft\\factura-draft.action-types.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\pages\\auth\\login\\login.component.jsx",["443","444","445","446","447","448","449"],"import React from 'react'\r\nimport { EyeInvisibleOutlined, EyeTwoTone } from '@ant-design/icons';\r\nimport { Form, Row, Col, Input, Select, Button, message, Radio } from 'antd'\r\nimport axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setLoadedKeyId, setKeyUser, succesLogIn } from '../../../redux/user/user.action';\r\nimport { EIMZOClient } from '../../../utils/e-imzo';\r\nimport moment from 'moment';\r\nimport st from './login.module.scss'\r\nimport { withRouter } from 'react-router-dom';\r\nimport { Generator } from '../../../utils/utils';\r\nimport { useTranslation } from 'react-i18next';\r\nimport {loginApi} from \"../../../sevices/loginService\";\r\nimport axiosInstance from \"../../../sevices/api\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst Login = ({ setCurrentUser, history, setEspUser, setKeyId }) => {\r\n\r\n    const { t } = useTranslation();\r\n    const [eKeys, setEKeys] = useState([])\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isKeyLoading, setKeyIsLoading] = useState(false);\r\n    const [activeTab, setActiveTab] = useState(0);\r\n    const [notFound, setNotFound] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        EIMZOClient.listAllUserKeys(function (o, i) {\r\n            // console.log(o);\r\n            var itemId = \"itm-\" + o.serialNumber + \"-\" + i;\r\n            return itemId;\r\n        }, function (itemId, v) {\r\n            eKeys.push({ value: itemId, text: v })\r\n            setEKeys([...eKeys])\r\n            //return uiCreateItem(itemId, v);\r\n        }, function (items, firstId) {\r\n            // uiFillCombo(items);\r\n            // uiLoaded();\r\n            // uiComboSelect(firstId);\r\n        }, function (e, r) {\r\n            console.log((e, r))\r\n            message.error(t(\"E-Imzo xatosi. Sizda E-Imzo programmasi yoki E-Imzo browseri mavjud emas!\"))\r\n        });\r\n    }, [])\r\n\r\n    const validateMessages = {\r\n        required: 'Bu maydon majburiy!',\r\n    };\r\n\r\n    const handleSubmit = value => {\r\n        setIsLoading(true)\r\n        console.log(value)\r\n        loginApi.login(value)\r\n            .then(res => {\r\n            setCurrentUser(res.data)\r\n            setIsLoading(false)\r\n            history.push(\"/home/choosecompany\")\r\n        }).catch(err => {\r\n            console.log(err)\r\n            setIsLoading(false)\r\n            message.error(t(\"Kabinetga kirishda xatolik!\"));\r\n            setNotFound(!notFound);\r\n\r\n        })\r\n    }\r\n\r\n    const handleKeySubmit = value => {\r\n        //setKeyIsLoading(true)        \r\n        let data = Generator(24);\r\n        console.log(value);\r\n        EIMZOClient.loadKey(\r\n            value.key.text,\r\n            id => {\r\n                setKeyId({id: id, time: Date.now()});\r\n                EIMZOClient.createPkcs7(\r\n                    id, \r\n                    data,\r\n                    null,\r\n                    pkcs7Text => {\r\n                        \r\n                        loginApi.loginWithEKeys( {\r\n                            keyId: id, guid: data, pkcs7: pkcs7Text\r\n                        }).then(res=>{\r\n                            let { success } = res.data;\r\n                            if (success){\r\n                                setCurrentUser(res.data)\r\n                                setEspUser(res.data.data)\r\n                                message.success(t(\"Muaffaqiyatli kirish!\"));\r\n                                history.push(\"/home/choosecompany\")\r\n                            }else{\r\n                                message.error(t(\"Kabinetga kirishda xatolik!\"))\r\n                                setNotFound(!notFound);\r\n                            }\r\n                        }).catch(e=>{\r\n                            console.log(e);\r\n                        })\r\n                    },\r\n                    (e, r) => {\r\n                        console.log(\"e:\", e);\r\n                        console.log(\"r:\", r);\r\n                        message.error(r);\r\n                    },\r\n                    (e, r)=>{\r\n                        console.log(\"e:\", e);\r\n                        console.log(\"r:\", r);\r\n                        message.error(r);\r\n                    }\r\n                    )\r\n            },\r\n            function (e, r) {\r\n                console.log(\"Load key e:\", e);\r\n                console.log(\"Load key r:\", r);\r\n            })\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className={st.login_main_container} style={{\r\n            marginTop:\"70px\",\r\n            marginRight:\"100px\"}}>\r\n            <Row justify=\"space-around\">\r\n                {\r\n                    !notFound&&\r\n                    <Col md={24}>\r\n                    {\r\n                        activeTab === 0 ?\r\n                            <div>\r\n                                <div>\r\n                                    <h2>Welcome</h2>\r\n                                    <Form\r\n                                        name=\"e-key\"\r\n                                        onFinish={handleKeySubmit}\r\n                                        scrollToFirstError\r\n                                        validateMessages={validateMessages}\r\n                                    >\r\n                                    <div style={{maxHeight:\"380px\",overflowY:'auto'}}>\r\n\r\n                                            <div>\r\n                                                <Form.Item\r\n                                                    className={st.login_form_container}\r\n                                                    name=\"key\">\r\n                                                    <Radio.Group\r\n                                                        size=\"large\">\r\n                                                        {\r\n                                                            eKeys.map(data => <Radio key={data.value} value={data}>\r\n                                                                <div className={`${st.client_availbale_key}`}>\r\n                                                                    <div>{t(\"FIO\")}: {data.text.CN} </div>\r\n                                                                    <div>{t(\"STIR\")}: {data.text.TIN}</div>\r\n                                                                    <div>{t(\"Tashkilot\")}: {data.text.O}</div>\r\n                                                                    <div>{t(\"Amal qilish muddati\")}:\r\n                                                                        {moment(data.text.validTo).format(\"MMMM Do YYYY, H:mm:ss\")}\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </Radio>)\r\n                                                        }\r\n                                                    </Radio.Group>\r\n                                                </Form.Item>\r\n                                            </div>\r\n\r\n\r\n\r\n                                    </div>\r\n                                        <Form.Item>\r\n                                            <Button\r\n                                                loading={isKeyLoading}\r\n                                                style={{display: 'block', width: '55%'}}\r\n                                                className={st.login_btn}\r\n                                                size=\"large\"\r\n                                                htmlType=\"submit\"\r\n                                            >\r\n                                                {t(\"Kirish\")}\r\n                                            </Button>\r\n                                        </Form.Item>\r\n                                    </Form>\r\n                                </div>\r\n\r\n                                <div onClick={() => setActiveTab(1)} className={st.login_link}>{t(\"STIR va parol bilan kirish\")}</div>\r\n                            </div>\r\n                            :\r\n                            <div>\r\n                                <h2>Enter with password</h2>\r\n                                <Form\r\n                                    name=\"tin-pass\"\r\n                                    onFinish={handleSubmit}\r\n                                    scrollToFirstError\r\n                                    validateMessages={validateMessages}\r\n                                >\r\n                                    <Form.Item>\r\n                                        <Form.Item\r\n                                            key=\"dyna-form-facutura-no-old\"\r\n                                            name=\"tin\"\r\n                                            rules={[{required: true}]}>\r\n                                            <Input\r\n                                                size=\"large\"\r\n                                                placeholder={t(\"STIR\")}/>\r\n                                        </Form.Item>\r\n                                        {/*<span className=\"custom-input-label-1\">{t(\"STIR\")}</span>*/}\r\n                                    </Form.Item>\r\n                                    {/*<Form.Item>*/}\r\n                                    <Form.Item\r\n                                        key=\"dyna-form-facutura-no-old\"\r\n                                        name=\"password\"\r\n                                        rules={[{required: true}]} // couse of show \"Paused in debugger\"\r\n                                    >\r\n                                        <div className={st.psw}>\r\n                                            <Input.Password size={\"large\"}\r\n                                                            name=\"password\"\r\n                                                            onChange={e=>console.log(\"E\",e.target.defaultValue.toString())}\r\n                                                            placeholder={t(\"Parol\")}/>\r\n                                        </div>\r\n\r\n                                    </Form.Item>\r\n                                    {/*<span className=\"custom-input-label-1\">{t(\"Parol\")}</span>*/}\r\n                                    {/*</Form.Item>*/}\r\n\r\n                                    <Form.Item>\r\n                                        <Button\r\n                                            loading={isLoading}\r\n                                            style={{display: 'block', width: '100%'}}\r\n                                            className={st.login_btn}\r\n                                            size=\"large\"\r\n                                            htmlType=\"submit\">\r\n                                            {t(\"Kirish\")}\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </Form>\r\n                                <div className={st.login_link} onClick={() => setActiveTab(0)}>{t(\"E-imzo bilan kirish\")}</div>\r\n                            </div>\r\n\r\n                    }\r\n                </Col>}\r\n                {\r\n                    notFound &&\r\n                    <Col span={24}>\r\n                    <h1>Certificate not found</h1>\r\n                    <Button\r\n                        onClick={()=>setNotFound(!notFound)}\r\n                        loading={isLoading}\r\n                        style={{display: 'block', width: '100%'}}\r\n                        className={st.login_btn}\r\n                        size=\"large\"\r\n                        htmlType=\"submit\">\r\n                        Enter with password.\r\n                    </Button>\r\n                </Col>}\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setCurrentUser: (data) => dispatch(succesLogIn(data)),\r\n    setEspUser: data=>dispatch(setKeyUser(data)),\r\n    setKeyId: id => dispatch(setLoadedKeyId(id))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(withRouter(Login))\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\utils\\home.config.provider.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\bindrouming-popup\\bindrouming-popup.component.jsx",["450","451"],"import { Modal, Spin, Checkbox, message } from 'antd'\r\nimport axios from 'axios';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useTranslation } from 'react-i18next';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { PROVIDER } from '../../env';\r\nimport { logOut } from '../../redux/user/user.action';\r\nimport { selectCurrentUser, selectLoadedKey } from '../../redux/user/user.selector';\r\nimport { EIMZOClient } from '../../utils/e-imzo';\r\n\r\nconst BindRoumingPopup = ({ user, signOut, loadedKey }) => {\r\n\r\n    const { t } = useTranslation()\r\n\r\n    const [isOpen, setIsOpen] = useState(!user?.is_online);\r\n    const [okDisable, setOkDisable] = useState(true)\r\n    const [afertaText, setAfertaText] = useState();\r\n\r\n    useEffect(() => {\r\n        axios({\r\n            url: `info/get-bind-provider?tin=${user.tin ?? user.username}`,\r\n            method: \"get\"\r\n        }).then(res => {\r\n            \r\n            setAfertaText(JSON.stringify({\r\n                providers: [...res.data.providers, PROVIDER] \r\n            }))\r\n            \r\n        }).catch(ex => {\r\n            console.log(ex);\r\n        })\r\n    }, [])\r\n\r\n    const handleOk = () => {\r\n        setIsOpen(false)\r\n        EIMZOClient.createPkcs7(\r\n            loadedKey.id,\r\n            afertaText,\r\n            null,\r\n            pkcs7 => {\r\n\r\n                axios({\r\n                    url: 'user/bind-provider',\r\n                    method: \"post\",\r\n                    data: {\r\n                        tin: user.tin ?? user.username,\r\n                        sign: pkcs7\r\n                    }\r\n                }).then(res => {\r\n                    console.log(res)\r\n                }).catch(ex => {\r\n                    console.log(ex);\r\n                })\r\n            },\r\n            (e, r) => {\r\n                message(r);\r\n            },\r\n            (e, r) => {\r\n                message(r);\r\n            },\r\n        )\r\n    }\r\n    const handleCancel = () => {\r\n        setIsOpen(false);\r\n        //signOut()\r\n    }\r\n\r\n    const handleAgree = e => {\r\n        //console.log(data)\r\n        if (e.target.checked) {\r\n            setOkDisable(false)\r\n        } else {\r\n            setOkDisable(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n                keyboard={false}\r\n                closable={false}\r\n                onCancel={handleCancel}\r\n                onOk={handleOk}\r\n                visible={isOpen}\r\n                okButtonProps={{ disabled: okDisable }}\r\n                zIndex={999}\r\n                title={t(\"Roumingga operatori sifatida qo'shing?\")}\r\n                maskClosable={false}\r\n            >\r\n                <div style={{ top: 0, width: '100%', bottom: 20, height: '40vh'}}>\r\n                    {t(\"Bini rouming operatoringiz sifatida ornating.\")}\r\n                </div>\r\n\r\n                <br />\r\n\r\n                <Checkbox onChange={handleAgree} /><span style={{ marginLeft: 20 }}>{t(\"Roziman.\")}</span>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectCurrentUser,\r\n    loadedKey: selectLoadedKey\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    signOut: () => dispatch(logOut())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BindRoumingPopup)\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\aferta-popup\\aferta-popup.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\utils\\utils.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\utils\\e-imzo.js",["452","453","454","455","456","457","458"],"String.prototype.splitKeep = function(splitter, ahead) {\r\n    var self = this;\r\n    var result = [];\r\n    if (splitter != '') {\r\n        // Substitution of matched string\r\n        function getSubst(value) {\r\n            var substChar = value[0] == '0' ? '1' : '0';\r\n            var subst = '';\r\n            for (var i = 0; i < value.length; i++) {\r\n                subst += substChar;\r\n            }\r\n            return subst;\r\n        };\r\n        var matches = [];\r\n        // Getting mached value and its index\r\n        var replaceName = splitter instanceof RegExp ? \"replace\" : \"replaceAll\";\r\n        var r = self[replaceName](splitter, function(m, i, e) {\r\n            matches.push({ value: m, index: i });\r\n            return getSubst(m);\r\n        });\r\n        // Finds split substrings\r\n        var lastIndex = 0;\r\n        for (var i = 0; i < matches.length; i++) {\r\n            var m = matches[i];\r\n            var nextIndex = ahead == true ? m.index : m.index + m.value.length;\r\n            if (nextIndex != lastIndex) {\r\n                var part = self.substring(lastIndex, nextIndex);\r\n                result.push(part);\r\n                lastIndex = nextIndex;\r\n            }\r\n        };\r\n        if (lastIndex < self.length) {\r\n            var part = self.substring(lastIndex, self.length);\r\n            result.push(part);\r\n        };\r\n    } else {\r\n        result.add(self);\r\n    };\r\n    return result;\r\n};\r\n\r\nexport const CAPIWS = {\r\n    URL: (window.location.protocol.toLowerCase() === \"https:\" ? \"wss://127.0.0.1:64443\" : \"ws://127.0.0.1:64646\") + \"/service/cryptapi\",\r\n    callFunction: function(funcDef, callback, error) {\r\n        if (!window.WebSocket) {\r\n            if (error)\r\n                error();\r\n            return;\r\n        }\r\n        var socket;\r\n        try {\r\n            socket = new WebSocket(this.URL);\r\n        } catch (e) {\r\n            error(e);\r\n        }\r\n        socket.onerror = function(e) {\r\n            if (error)\r\n                error(e);\r\n        };\r\n        socket.onmessage = function(event) {\r\n            var data = JSON.parse(event.data);\r\n            socket.close();\r\n            callback(event, data);\r\n        };\r\n        socket.onopen = function() {\r\n            socket.send(JSON.stringify(funcDef));\r\n        };\r\n    },\r\n    version: function(callback, error) {\r\n        if (!window.WebSocket) {\r\n            if (error)\r\n                error();\r\n            return;\r\n        }\r\n        var socket;\r\n        try {\r\n            socket = new WebSocket(this.URL);\r\n        } catch (e) {\r\n            error(e);\r\n        }\r\n        socket.onerror = function(e) {\r\n            if (error)\r\n                error(e);\r\n        };\r\n        socket.onmessage = function(event) {\r\n            var data = JSON.parse(event.data);\r\n            socket.close();\r\n            callback(event, data);\r\n        };\r\n        socket.onopen = function() {\r\n            var o = { name: 'version' };\r\n            socket.send(JSON.stringify(o));\r\n        };\r\n    },\r\n    apidoc: function(callback, error) {\r\n        if (!window.WebSocket) {\r\n            if (error)\r\n                error();\r\n            return;\r\n        }\r\n        var socket;\r\n        try {\r\n            socket = new WebSocket(this.URL);\r\n        } catch (e) {\r\n            error(e);\r\n        }\r\n        socket.onerror = function(e) {\r\n            if (error)\r\n                error(e);\r\n        };\r\n        socket.onmessage = function(event) {\r\n            var data = JSON.parse(event.data);\r\n            socket.close();\r\n            callback(event, data);\r\n        };\r\n        socket.onopen = function() {\r\n            var o = { name: 'apidoc' };\r\n            socket.send(JSON.stringify(o));\r\n        };\r\n    },\r\n    apikey: function(domainAndKey, callback, error) {\r\n        if (!window.WebSocket) {\r\n            if (error)\r\n                error();\r\n            return;\r\n        }\r\n        var socket;\r\n        try {\r\n            socket = new WebSocket(this.URL);\r\n        } catch (e) {\r\n            error(e);\r\n        }\r\n        socket.onerror = function(e) {\r\n            if (error)\r\n                error(e);\r\n        };\r\n        socket.onmessage = function(event) {\r\n            var data = JSON.parse(event.data);\r\n            socket.close();\r\n            callback(event, data);\r\n        };\r\n        socket.onopen = function() {\r\n            var o = { name: 'apikey', arguments: domainAndKey };\r\n            socket.send(JSON.stringify(o));\r\n        };\r\n    }\r\n};\r\n\r\nexport const EIMZOClient = {\r\n    NEW_API: false,\r\n    API_KEYS: [\r\n        'cabinet.onlinefactura.uz', 'F09A2CBE8EA25A5C065AF78D32F517B1DCF12E997575556CBD90B405A90420E6EB538FCCFFCBAA22C5D191CAB3803965621B023E8642F77F35DDA072FBA17914'\r\n    ],\r\n    checkVersion: function(success, fail) {\r\n        CAPIWS.version(function(event, data) {\r\n            if (data.success === true) {\r\n                if (data.major && data.minor) {\r\n                    var installedVersion = parseInt(data.major) * 100 + parseInt(data.minor);\r\n                    EIMZOClient.NEW_API = installedVersion >= 336;\r\n                    success(data.major, data.minor);\r\n                } else {\r\n                    fail(null, 'E-IMZO Version is undefined');\r\n                }\r\n            } else {\r\n                fail(null, data.reason);\r\n            }\r\n        }, function(e) {\r\n            fail(e, null);\r\n        });\r\n    },\r\n    installApiKeys: function(success, fail) {\r\n        CAPIWS.apikey(EIMZOClient.API_KEYS, function(event, data) {\r\n            if (data.success) {\r\n                success();\r\n            } else {\r\n                fail(null, data.reason);\r\n            }\r\n        }, function(e) {\r\n            fail(e, null);\r\n        });\r\n    },\r\n    listAllUserKeys: function(itemIdGen, itemUiGen, success, fail) {\r\n        var items = [];\r\n        var errors = [];\r\n        if (!EIMZOClient.NEW_API) {\r\n            EIMZOClient._findCertKeys(itemIdGen, itemUiGen, items, errors, function(firstItmId) {\r\n                EIMZOClient._findPfxs(itemIdGen, itemUiGen, items, errors, function(firstItmId2) {\r\n                    if (items.length === 0 && errors.length > 0) {\r\n                        fail(errors[0].e, errors[0].r);\r\n                    } else {\r\n                        var firstId = null;\r\n                        if (items.length === 1) {\r\n                            if (firstItmId) {\r\n                                firstId = firstItmId;\r\n                            } else if (firstItmId2) {\r\n                                firstId = firstItmId2;\r\n                            }\r\n                        }\r\n                        success(items, firstId);\r\n                    }\r\n                });\r\n            });\r\n        } else {\r\n            EIMZOClient._findCertKeys2(itemIdGen, itemUiGen, items, errors, function(firstItmId) {\r\n                EIMZOClient._findPfxs2(itemIdGen, itemUiGen, items, errors, function(firstItmId2) {\r\n                    EIMZOClient._findTokens2(itemIdGen, itemUiGen, items, errors, function(firstItmId3) {\r\n                        if (items.length === 0 && errors.length > 0) {\r\n                            fail(errors[0].e, errors[0].r);\r\n                        } else {\r\n                            var firstId = null;\r\n                            if (items.length === 1) {\r\n                                if (firstItmId) {\r\n                                    firstId = firstItmId;\r\n                                } else if (firstItmId2) {\r\n                                    firstId = firstItmId2;\r\n                                } else if (firstItmId3) {\r\n                                    firstId = firstItmId3;\r\n                                }\r\n                            }\r\n                            success(items, firstId);\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n        }\r\n    },\r\n    loadKey: function(itemObject, success, fail, verifyPassword) {\r\n        if (itemObject) {\r\n            var vo = itemObject;\r\n            if (vo.type === \"certkey\") {\r\n                CAPIWS.callFunction({ plugin: \"certkey\", name: \"load_key\", arguments: [vo.disk, vo.path, vo.name, vo.serialNumber] }, function(event, data) {\r\n                    if (data.success) {\r\n                        var id = data.keyId;\r\n                        success(id);\r\n                    } else {\r\n                        fail(null, data.reason);\r\n                    }\r\n                }, function(e) {\r\n                    fail(e, null);\r\n                });\r\n            } else if (vo.type === \"pfx\") {\r\n                CAPIWS.callFunction({ plugin: \"pfx\", name: \"load_key\", arguments: [vo.disk, vo.path, vo.name, vo.alias] }, function(event, data) {\r\n                    if (data.success) {\r\n                        var id = data.keyId;\r\n                        if (verifyPassword) {\r\n                            CAPIWS.callFunction({ name: \"verify_password\", plugin: \"pfx\", arguments: [id] }, function(event, data) {\r\n                                if (data.success) {\r\n                                    success(id);\r\n                                } else {\r\n                                    fail(null, data.reason);\r\n                                }\r\n                            }, function(e) {\r\n                                fail(e, null);\r\n                            });\r\n                        } else {\r\n                            success(id);\r\n                        }\r\n                    } else {\r\n                        fail(null, data.reason);\r\n                    }\r\n                }, function(e) {\r\n                    fail(e, null);\r\n                });\r\n            } else if (vo.type === \"ftjc\") {\r\n                CAPIWS.callFunction({ plugin: \"ftjc\", name: \"load_key\", arguments: [vo.cardUID] }, function(event, data) {\r\n                    if (data.success) {\r\n                        var id = data.keyId;\r\n                        if (verifyPassword) {\r\n                            CAPIWS.callFunction({ plugin: \"ftjc\", name: \"verify_pin\", arguments: [id, '1'] }, function(event, data) {\r\n                                if (data.success) {\r\n                                    success(id);\r\n                                } else {\r\n                                    fail(null, data.reason);\r\n                                }\r\n                            }, function(e) {\r\n                                fail(e, null);\r\n                            });\r\n                        } else {\r\n                            success(id);\r\n                        }\r\n                    } else {\r\n                        fail(null, data.reason);\r\n                    }\r\n                }, function(e) {\r\n                    fail(e, null);\r\n                });\r\n            }\r\n        }\r\n    },\r\n    changeKeyPassword: function(itemObject, success, fail) {\r\n        if (itemObject) {\r\n            var vo = itemObject;\r\n            if (vo.type === \"pfx\") {\r\n                CAPIWS.callFunction({ plugin: \"pfx\", name: \"load_key\", arguments: [vo.disk, vo.path, vo.name, vo.alias] }, function(event, data) {\r\n                    if (data.success) {\r\n                        var id = data.keyId;\r\n                        CAPIWS.callFunction({ name: \"change_password\", plugin: \"pfx\", arguments: [id] }, function(event, data) {\r\n                            if (data.success) {\r\n                                success();\r\n                            } else {\r\n                                fail(null, data.reason);\r\n                            }\r\n                        }, function(e) {\r\n                            fail(e, null);\r\n                        });\r\n                    } else {\r\n                        fail(null, data.reason);\r\n                    }\r\n                }, function(e) {\r\n                    fail(e, null);\r\n                });\r\n            } else if (vo.type === \"ftjc\") {\r\n                CAPIWS.callFunction({ plugin: \"ftjc\", name: \"load_key\", arguments: [vo.cardUID] }, function(event, data) {\r\n                    if (data.success) {\r\n                        var id = data.keyId;\r\n                        CAPIWS.callFunction({ name: \"change_pin\", plugin: \"ftjc\", arguments: [id, '1'] }, function(event, data) {\r\n                            if (data.success) {\r\n                                success();\r\n                            } else {\r\n                                fail(null, data.reason);\r\n                            }\r\n                        }, function(e) {\r\n                            fail(e, null);\r\n                        });\r\n                    } else {\r\n                        fail(null, data.reason);\r\n                    }\r\n                }, function(e) {\r\n                    fail(e, null);\r\n                });\r\n            }\r\n        }\r\n    },\r\n    createPkcs7: function(id, data, timestamper, success, fail) {\r\n        CAPIWS.callFunction({ plugin: \"pkcs7\", name: \"create_pkcs7\", arguments: [btoa(unescape(encodeURIComponent(data))), id, 'no'] }, function(event, data) {\r\n            if (data.success) {\r\n                var pkcs7 = data.pkcs7_64;\r\n                if (timestamper) {\r\n                    var sn = data.signer_serial_number;\r\n                    timestamper(data.signature_hex, function(tst) {\r\n                        CAPIWS.callFunction({ plugin: \"pkcs7\", name: \"attach_timestamp_token_pkcs7\", arguments: [pkcs7, sn, tst] }, function(event, data) {\r\n                            if (data.success) {\r\n                                var pkcs7tst = data.pkcs7_64;\r\n                                success(pkcs7tst);\r\n                            } else {\r\n                                fail(null, data.reason);\r\n                            }\r\n                        }, function(e) {\r\n                            fail(e, null);\r\n                        });\r\n                    }, fail);\r\n                } else {\r\n                    success(pkcs7);\r\n                }\r\n            } else {\r\n                fail(null, data.reason);\r\n            }\r\n        }, function(e) {\r\n            fail(e, null);\r\n        });\r\n    },\r\n    appendPkcs7Attached: function(id, data, timestamper, success, fail) {\r\n        CAPIWS.callFunction({ plugin: \"pkcs7\", name: \"append_pkcs7_attached\", arguments: [data, id] }, function(event, data) {\r\n            if (data.success) {\r\n                var pkcs7 = data.pkcs7_64;\r\n                if (timestamper) {\r\n                    var sn = data.signer_serial_number;\r\n                    timestamper(data.signature_hex, function(tst) {\r\n                        CAPIWS.callFunction({ plugin: \"pkcs7\", name: \"attach_timestamp_token_pkcs7\", arguments: [pkcs7, sn, tst] }, function(event, data) {\r\n                            if (data.success) {\r\n                                var pkcs7tst = data.pkcs7_64;\r\n                                success(pkcs7tst);\r\n                            } else {\r\n                                fail(null, data.reason);\r\n                            }\r\n                        }, function(e) {\r\n                            fail(e, null);\r\n                        });\r\n                    }, fail);\r\n                } else {\r\n                    success(pkcs7);\r\n                }\r\n            } else {\r\n                fail(null, data.reason);\r\n            }\r\n        }, function(e) {\r\n            fail(e, null);\r\n        });\r\n    },\r\n    _getX500Val: function(s, f) {\r\n        var res = s.splitKeep(/,[A-Z]+=/g, true);\r\n        for (var i in res) {\r\n            var n = res[i].search((i > 0 ? \",\" : \"\") + f + \"=\");\r\n            if (n !== -1) {\r\n                return res[i].slice(n + f.length + 1 + (i > 0 ? 1 : 0));\r\n            }\r\n        }\r\n        return \"\";\r\n    },\r\n    _findCertKeyCertificates: function(itemIdGen, itemUiGen, items, errors, allDisks, diskIndex, params, callback) {\r\n        if (parseInt(diskIndex) + 1 > allDisks.length) {\r\n            callback(params);\r\n            return;\r\n        }\r\n        CAPIWS.callFunction({ plugin: \"certkey\", name: \"list_certificates\", arguments: [allDisks[diskIndex]] }, function(event, data) {\r\n            if (data.success) {\r\n                for (var rec in data.certificates) {\r\n                    var el = data.certificates[rec];\r\n                    var vo = {\r\n                        disk: el.disk,\r\n                        path: el.path,\r\n                        name: el.name,\r\n                        serialNumber: el.serialNumber,\r\n                        subjectName: el.subjectName,\r\n                        validFrom: new Date(el.validFrom),\r\n                        validTo: new Date(el.validTo),\r\n                        issuerName: el.issuerName,\r\n                        publicKeyAlgName: el.publicKeyAlgName,\r\n                        CN: EIMZOClient._getX500Val(el.subjectName, \"CN\"),\r\n                        TIN: EIMZOClient._getX500Val(el.subjectName, \"INITIALS\"),\r\n                        O: EIMZOClient._getX500Val(el.subjectName, \"O\"),\r\n                        T: EIMZOClient._getX500Val(el.subjectName, \"T\"),\r\n                        type: 'certkey'\r\n                    };\r\n                    if (!vo.TIN)\r\n                        continue;\r\n                    var itmkey = itemIdGen(vo, rec);\r\n                    if (params.length === 0) {\r\n                        params.push(itmkey);\r\n                    }\r\n                    var itm = itemUiGen(itmkey, vo);\r\n                    items.push(itm);\r\n                }\r\n            } else {\r\n                errors.push({ r: data.reason });\r\n            }\r\n            EIMZOClient._findCertKeyCertificates(itemIdGen, itemUiGen, items, errors, allDisks, parseInt(diskIndex) + 1, params, callback);\r\n        }, function(e) {\r\n            errors.push({ e: e });\r\n            EIMZOClient._findCertKeyCertificates(itemIdGen, itemUiGen, items, errors, allDisks, parseInt(diskIndex) + 1, params, callback);\r\n        });\r\n    },\r\n    _findCertKeys: function(itemIdGen, itemUiGen, items, errors, callback) {\r\n        var allDisks = [];\r\n        CAPIWS.callFunction({ plugin: \"certkey\", name: \"list_disks\" }, function(event, data) {\r\n            if (data.success) {\r\n                for (var rec in data.disks) {\r\n                    allDisks.push(data.disks[rec]);\r\n                    if (parseInt(rec) + 1 >= data.disks.length) {\r\n                        var params = [];\r\n                        EIMZOClient._findCertKeyCertificates(itemIdGen, itemUiGen, items, errors, allDisks, 0, params, function(params) {\r\n                            callback(params[0]);\r\n                        });\r\n                    }\r\n                }\r\n            } else {\r\n                errors.push({ r: data.reason });\r\n            }\r\n        }, function(e) {\r\n            errors.push({ e: e });\r\n            callback();\r\n        });\r\n    },\r\n    _findPfxCertificates: function(itemIdGen, itemUiGen, items, errors, allDisks, diskIndex, params, callback) {\r\n        if (parseInt(diskIndex) + 1 > allDisks.length) {\r\n            callback(params);\r\n            return;\r\n        }\r\n        CAPIWS.callFunction({ plugin: \"pfx\", name: \"list_certificates\", arguments: [allDisks[diskIndex]] }, function(event, data) {\r\n            if (data.success) {\r\n                for (var rec in data.certificates) {\r\n                    var el = data.certificates[rec];\r\n                    var x500name_ex = el.alias.toUpperCase();\r\n                    x500name_ex = x500name_ex.replace(\"1.2.860.3.16.1.1=\", \"INN=\");\r\n                    x500name_ex = x500name_ex.replace(\"1.2.860.3.16.1.2=\", \"PINFL=\");\r\n                    var vo = {\r\n                        disk: el.disk,\r\n                        path: el.path,\r\n                        name: el.name,\r\n                        alias: el.alias,\r\n                        serialNumber: EIMZOClient._getX500Val(x500name_ex, \"SERIALNUMBER\"),\r\n                        validFrom: new Date(EIMZOClient._getX500Val(x500name_ex, \"VALIDFROM\").replace(/\\./g, \"-\").replace(\" \", \"T\")),\r\n                        validTo: new Date(EIMZOClient._getX500Val(x500name_ex, \"VALIDTO\").replace(/\\./g, \"-\").replace(\" \", \"T\")),\r\n                        CN: EIMZOClient._getX500Val(x500name_ex, \"CN\"),\r\n                        TIN: (EIMZOClient._getX500Val(x500name_ex, \"INN\") ? EIMZOClient._getX500Val(x500name_ex, \"INN\") : EIMZOClient._getX500Val(x500name_ex, \"UID\")),\r\n                        UID: EIMZOClient._getX500Val(x500name_ex, \"UID\"),\r\n                        O: EIMZOClient._getX500Val(x500name_ex, \"O\"),\r\n                        T: EIMZOClient._getX500Val(x500name_ex, \"T\"),\r\n                        type: 'pfx'\r\n                    };\r\n                    if (!vo.TIN)\r\n                        continue;\r\n                    var itmkey = itemIdGen(vo, rec);\r\n                    if (params.length === 0) {\r\n                        params.push(itmkey);\r\n                    }\r\n                    var itm = itemUiGen(itmkey, vo);\r\n                    items.push(itm);\r\n                }\r\n            } else {\r\n                errors.push({ r: data.reason });\r\n            }\r\n            EIMZOClient._findPfxCertificates(itemIdGen, itemUiGen, items, errors, allDisks, parseInt(diskIndex) + 1, params, callback);\r\n        }, function(e) {\r\n            errors.push({ e: e });\r\n            EIMZOClient._findPfxCertificates(itemIdGen, itemUiGen, items, errors, allDisks, parseInt(diskIndex) + 1, params, callback);\r\n        });\r\n    },\r\n    _findPfxs: function(itemIdGen, itemUiGen, items, errors, callback) {\r\n        var allDisks = [];\r\n        CAPIWS.callFunction({ plugin: \"pfx\", name: \"list_disks\" }, function(event, data) {\r\n            if (data.success) {\r\n                var disks = data.disks;\r\n                for (var rec in disks) {\r\n                    allDisks.push(data.disks[rec]);\r\n                    if (parseInt(rec) + 1 >= data.disks.length) {\r\n                        var params = [];\r\n                        EIMZOClient._findPfxCertificates(itemIdGen, itemUiGen, items, errors, allDisks, 0, params, function(params) {\r\n                            callback(params[0]);\r\n                        });\r\n                    }\r\n                }\r\n            } else {\r\n                errors.push({ r: data.reason });\r\n            }\r\n        }, function(e) {\r\n            errors.push({ e: e });\r\n            callback();\r\n        });\r\n    },\r\n    _findCertKeys2: function(itemIdGen, itemUiGen, items, errors, callback) {\r\n        var itmkey0;\r\n        CAPIWS.callFunction({ plugin: \"certkey\", name: \"list_all_certificates\" }, function(event, data) {\r\n            if (data.success) {\r\n                for (var rec in data.certificates) {\r\n                    var el = data.certificates[rec];\r\n                    var vo = {\r\n                        disk: el.disk,\r\n                        path: el.path,\r\n                        name: el.name,\r\n                        serialNumber: el.serialNumber,\r\n                        subjectName: el.subjectName,\r\n                        validFrom: new Date(el.validFrom),\r\n                        validTo: new Date(el.validTo),\r\n                        issuerName: el.issuerName,\r\n                        publicKeyAlgName: el.publicKeyAlgName,\r\n                        CN: EIMZOClient._getX500Val(el.subjectName, \"CN\"),\r\n                        TIN: EIMZOClient._getX500Val(el.subjectName, \"INITIALS\"),\r\n                        O: EIMZOClient._getX500Val(el.subjectName, \"O\"),\r\n                        T: EIMZOClient._getX500Val(el.subjectName, \"T\"),\r\n                        type: 'certkey'\r\n                    };\r\n                    if (!vo.TIN)\r\n                        continue;\r\n                    var itmkey = itemIdGen(vo, rec);\r\n                    if (!itmkey0) {\r\n                        itmkey0 = itmkey;\r\n                    }\r\n                    var itm = itemUiGen(itmkey, vo);\r\n                    items.push(itm);\r\n                }\r\n            } else {\r\n                errors.push({ r: data.reason });\r\n            }\r\n            callback(itmkey0);\r\n        }, function(e) {\r\n            errors.push({ e: e });\r\n            callback(itmkey0);\r\n        });\r\n    },\r\n    _findPfxs2: function(itemIdGen, itemUiGen, items, errors, callback) {\r\n        var itmkey0;\r\n        CAPIWS.callFunction({ plugin: \"pfx\", name: \"list_all_certificates\" }, function(event, data) {\r\n            if (data.success) {\r\n                for (var rec in data.certificates) {\r\n                    var el = data.certificates[rec];\r\n                    var x500name_ex = el.alias.toUpperCase();\r\n                    x500name_ex = x500name_ex.replace(\"1.2.860.3.16.1.1=\", \"INN=\");\r\n                    x500name_ex = x500name_ex.replace(\"1.2.860.3.16.1.2=\", \"PINFL=\");\r\n                    var vo = {\r\n                        disk: el.disk,\r\n                        path: el.path,\r\n                        name: el.name,\r\n                        alias: el.alias,\r\n                        serialNumber: EIMZOClient._getX500Val(x500name_ex, \"SERIALNUMBER\"),\r\n                        validFrom: new Date(EIMZOClient._getX500Val(x500name_ex, \"VALIDFROM\").replace(/\\./g, \"-\").replace(\" \", \"T\")),\r\n                        validTo: new Date(EIMZOClient._getX500Val(x500name_ex, \"VALIDTO\").replace(/\\./g, \"-\").replace(\" \", \"T\")),\r\n                        CN: EIMZOClient._getX500Val(x500name_ex, \"CN\"),\r\n                        TIN: (EIMZOClient._getX500Val(x500name_ex, \"INN\") ? EIMZOClient._getX500Val(x500name_ex, \"INN\") : EIMZOClient._getX500Val(x500name_ex, \"UID\")),\r\n                        UID: EIMZOClient._getX500Val(x500name_ex, \"UID\"),\r\n                        O: EIMZOClient._getX500Val(x500name_ex, \"O\"),\r\n                        T: EIMZOClient._getX500Val(x500name_ex, \"T\"),\r\n                        type: 'pfx'\r\n                    };\r\n                    if (!vo.TIN)\r\n                        continue;\r\n                    var itmkey = itemIdGen(vo, rec);\r\n                    if (!itmkey0) {\r\n                        itmkey0 = itmkey;\r\n                    }\r\n                    var itm = itemUiGen(itmkey, vo);\r\n                    items.push(itm);\r\n                }\r\n            } else {\r\n                errors.push({ r: data.reason });\r\n            }\r\n            callback(itmkey0);\r\n        }, function(e) {\r\n            errors.push({ e: e });\r\n            callback(itmkey0);\r\n        });\r\n    },\r\n    _findTokens2: function(itemIdGen, itemUiGen, items, errors, callback) {\r\n        var itmkey0;\r\n        CAPIWS.callFunction({ plugin: \"ftjc\", name: \"list_all_keys\", arguments: [''] }, function(event, data) {\r\n            if (data.success) {\r\n                for (var rec in data.tokens) {\r\n                    var el = data.tokens[rec];\r\n                    var x500name_ex = el.info.toUpperCase();\r\n                    x500name_ex = x500name_ex.replace(\"1.2.860.3.16.1.1=\", \"INN=\");\r\n                    x500name_ex = x500name_ex.replace(\"1.2.860.3.16.1.2=\", \"PINFL=\");\r\n                    var vo = {\r\n                        cardUID: el.cardUID,\r\n                        statusInfo: el.statusInfo,\r\n                        ownerName: el.ownerName,\r\n                        info: el.info,\r\n                        serialNumber: EIMZOClient._getX500Val(x500name_ex, \"SERIALNUMBER\"),\r\n                        validFrom: new Date(EIMZOClient._getX500Val(x500name_ex, \"VALIDFROM\")),\r\n                        validTo: new Date(EIMZOClient._getX500Val(x500name_ex, \"VALIDTO\")),\r\n                        CN: EIMZOClient._getX500Val(x500name_ex, \"CN\"),\r\n                        TIN: (EIMZOClient._getX500Val(x500name_ex, \"INN\") ? EIMZOClient._getX500Val(x500name_ex, \"INN\") : EIMZOClient._getX500Val(x500name_ex, \"UID\")),\r\n                        UID: EIMZOClient._getX500Val(x500name_ex, \"UID\"),\r\n                        O: EIMZOClient._getX500Val(x500name_ex, \"O\"),\r\n                        T: EIMZOClient._getX500Val(x500name_ex, \"T\"),\r\n                        type: 'ftjc'\r\n                    };\r\n                    if (!vo.TIN)\r\n                        continue;\r\n                    var itmkey = itemIdGen(vo, rec);\r\n                    if (!itmkey0) {\r\n                        itmkey0 = itmkey;\r\n                    }\r\n                    var itm = itemUiGen(itmkey, vo);\r\n                    items.push(itm);\r\n                }\r\n            } else {\r\n                errors.push({ r: data.reason });\r\n            }\r\n            callback(itmkey0);\r\n        }, function(e) {\r\n            errors.push({ e: e });\r\n            callback(itmkey0);\r\n        });\r\n    }\r\n};","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\sevices\\loginService.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\sevices\\api.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\dyna-grid\\dyna-grid.component.jsx",["459","460"],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\sevices\\apiWithoutTokens.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\rich-text-parser\\rich-text-parser.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\left-sidebar\\left-sidebar.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\cabinet-header\\CabinetHeader.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\language-dropdown\\locale-dropdown.jsx",["461"],"import React, { useState, useEffect } from 'react';\r\n//import { connect } from 'react-redux';\r\n//import { setUserLocale } from '../../redux/user/user.actions';\r\n//import { createStructuredSelector } from 'reselect';\r\n//import { selectUserLocale } from '../../redux/user/user.selector';\r\nimport { Dropdown, Menu } from 'antd';\r\nimport { useTranslation } from 'react-i18next';\r\nimport i18next from \"i18next\";\r\n\r\nconst LanguagesDropdown = ({ locale, changeLocale }) => {\r\n    const { i18n } = useTranslation();\r\n\r\n    const [activeLang, setActiveLang] = useState(i18next.language);\r\n\r\n    useEffect(()=>{\r\n        setActiveLang(i18next.language)\r\n    }, [i18next.language])\r\n\r\n    const languagesMenu = (\r\n        <Menu>\r\n            <Menu.Item onClick={() => { \r\n                //changeLocale('uz'); \r\n                i18n.changeLanguage('uz') \r\n                }}>\r\n                <img style={{ width: 25, borderRadius: '50%' }} alt=\"languange\" src=\"/images/uz.png\" /> O'zb\r\n            </Menu.Item>\r\n            <Menu.Item onClick={() => {\r\n                //changeLocale('uz');\r\n                i18n.changeLanguage('uz-Cyrl')\r\n            }}>\r\n                <img style={{ width: 25, borderRadius: '50%' }} alt=\"languange\" src=\"/images/uz.png\" /> Ўзб\r\n            </Menu.Item>\r\n            <Menu.Item onClick={() => { \r\n                //changeLocale('ru'); \r\n                i18n.changeLanguage('ru') \r\n            }}>\r\n                <img style={{ width: 25, borderRadius: '50%' }} alt=\"languange\" src=\"/images/ru.png\" /> Pyc\r\n            </Menu.Item>\r\n            <Menu.Item onClick={() => { \r\n                //changeLocale('en'); \r\n                i18n.changeLanguage('en') \r\n            }}>\r\n                <img style={{ width: 25, borderRadius: '50%' }} alt=\"languange\" src=\"/images/en.png\" /> Eng\r\n            </Menu.Item>\r\n        </Menu>\r\n    )\r\n\r\n    return (<span className=\"trigger text-float-right\">\r\n        <Dropdown overlay={languagesMenu}>\r\n            <img style={{ width: 25, borderRadius: '50%' }} alt=\"languange\" src={`/images/${activeLang===\"uz-Cyrl\"?\"uz\": activeLang}.png`} />\r\n        </Dropdown>\r\n    </span>)\r\n}\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//     changeLocale: locale => dispatch(setUserLocale(locale))\r\n// })\r\n\r\n// const mapStateToProps = createStructuredSelector({\r\n//     locale: selectUserLocale\r\n// })\r\n\r\n//export default connect(mapStateToProps, mapDispatchToProps)(LanguagesDropdown);\r\nexport default LanguagesDropdown;","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\frontend\\home\\home.component.jsx",["462","463","464"],"import React, { useState } from 'react';\r\nimport Header from '../../components/header/header.component';\r\n\r\nconst Home = ({})=>{\r\n\r\n    \r\n\r\n    return<div>\r\n        <div>\r\n            <h1>Home</h1>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Home;","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\frontend\\choose_company\\choose-company.component.jsx",["465","466","467"],"import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Button, List, message } from 'antd';\r\nimport axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { setUser, setUserCompanies } from '../../redux/user/user.action';\r\nimport { selectKeyUser, selectUserCompanies } from '../../redux/user/user.selector';\r\nimport './choose-company.style.scss';\r\n\r\nconst ChooseCompany = ({ setCurrentUser, history, user, setUserComps, companies }) => {\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const setChoosenCompany = async (tin, push_to_cabinet=true)=>{\r\n        await axios({\r\n            url: `user/get-company-data?tin=${tin}`,\r\n            method: 'get'\r\n        }).then(res => {\r\n            setLoading(false)\r\n            setCurrentUser(res.data.company)\r\n            if(push_to_cabinet){\r\n                    history.push(\"/cabinet\")\r\n            }\r\n\r\n        }).catch(e => {\r\n\r\n            console.log(e)\r\n\r\n        })\r\n    }\r\n\r\n    const { t } = useTranslation();\r\n    \r\n\r\n    const [chosen, setChosen] = useState(null);\r\n\r\n    useEffect(()=>{\r\n\r\n        if(chosen){\r\n            setChoosenCompany(chosen)\r\n        }\r\n\r\n    }, [chosen]);\r\n\r\n    useEffect(()=>{\r\n        setLoading(true)\r\n        console.log(\"user,\",user)\r\n        axios({\r\n            url: `info/director-company/?tin=${user?.username}`,\r\n            method: 'get',\r\n        }).then(res=>{\r\n            console.log(res);\r\n            if(res.data.success){\r\n                setUserComps(res.data.data)\r\n                setLoading(false)\r\n                if(res.data?.data?.length==1){\r\n                    setChoosenCompany(res.data.data[0].company_tin)\r\n                }\r\n            }else{\r\n                message.error(\"Serverda xatolik!\");\r\n                setLoading(false)\r\n            }\r\n            \r\n        }).catch(err=>{\r\n            console.log(err);\r\n            message.error(\"Serverda xatolik!\");\r\n            setLoading(false)\r\n        })\r\n    }, [])\r\n\r\n\r\n    return (<div className=\"choose-company-main-container\">\r\n        <div className=\"choose-company-sub-container\">\r\n            <Button\r\n                onClick={() => { history.goBack() }}\r\n                type=\"primary\"\r\n\r\n                icon={<FontAwesomeIcon\r\n                    style={{ marginRight: 10 }}\r\n                    icon=\"arrow-circle-left\" />}>\r\n                {t(\"Back\")}\r\n            </Button>\r\n            <h2 style={{ textAlign: \"center\" }}>{t(\"Korxona tanlang\")}</h2>\r\n            <div className=\"company-card-con\">\r\n                \r\n                    \r\n                <List\r\n                    grid={{\r\n                        gutter: 8,\r\n                        xs: 1,\r\n                        md: 2,\r\n                        lg: 3\r\n                    }}\r\n                    loading={loading}\r\n                    dataSource={companies}\r\n                    renderItem={comp => <div onClick={() => setChosen(comp.company_tin)}\r\n                    className=\"company-card\">\r\n                        <div className=\"company-name\">\r\n                            {comp.company_name}\r\n                        </div>\r\n\r\n                        <div className=\"company-text\">\r\n                            <span\r\n                                className=\"company-tin\"\r\n                                style={{ margin: 0, padding: 0 }}\r\n                            >{comp.company_tin}</span>\r\n                            <div>{t(\"STIR\")}</div>\r\n                        </div>\r\n\r\n                    </div>}\r\n                />\r\n                        \r\n                \r\n               \r\n                \r\n            </div>\r\n\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nconst mapDispatchToProps = dispatch=>({\r\n    setUserComps: data => dispatch(setUserCompanies(data)),\r\n    setCurrentUser: data => dispatch(setUser(data)),\r\n})\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectKeyUser,\r\n    companies: selectUserCompanies\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ChooseCompany));","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\tty\\index.router.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\notifications\\notifications.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\contract\\index.router.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\act\\index.router.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\profile\\profile.component.jsx",["468"],"import React, { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Route } from 'react-router';\r\nimport ProfileTabs from './profile-tabs.component';\r\nimport ProfileTabsRouter from './profile-tabs.router';\r\n\r\nconst ProfileComponent = ({ match, location })=>{\r\n\r\n    const { t } = useTranslation()\r\n\r\n\r\n    return <div style={{margin: 15}}>\r\n        <h3>{t(\"Sozlamalar\")}</h3>\r\n        <ProfileTabs/>\r\n        <div className=\"factura-data-sheet-container\">\r\n            <div style={{paddingTop: 15}}>\r\n                <Route match={`${match.path}`} component={ProfileTabsRouter}/>\r\n            </div>\r\n        {/* <Tabs onChange={handleChange} type=\"card\">\r\n            <TabPane tab={t(\"Kompaniya ma'lumotlari\")} key=\"1\">\r\n                <AccountForm />\r\n            </TabPane>\r\n            <TabPane tab={t(\"Parol o'zgartirish\")} key=\"2\">\r\n                <PasswordChange />\r\n            </TabPane>\r\n            <TabPane tab={t(\"Maxsulotlarim\")} key=\"3\">\r\n                <UserProducts />\r\n            </TabPane>\r\n        </Tabs> */}\r\n    </div>\r\n    </div>\r\n}\r\n\r\nexport default ProfileComponent;","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\empowerment\\index.component.jsx",["469"],"import React from 'react'\r\nimport { Route } from 'react-router-dom'\r\nimport HomePage from '../common/home/home.component';\r\nimport EmpowermentForm from './create/create.component';\r\nimport {createStructuredSelector} from \"reselect\";\r\nimport {selectCurrentUser} from \"../../redux/user/user.selector\";\r\nimport {connect} from \"react-redux\";\r\nimport EmpView from \"./view/view.component\";\r\nimport FacturaCreateForm from \"../factura/create/create.component\";\r\n\r\nconst EmpowermentIndex = ({ match, user }) => {\r\n    return (\r\n        <div>\r\n            <Route exact path={`${match.path}`} render={()=><HomePage doc=\"empowerment\" addParams={[\r\n                {\r\n                    name: \"tin\",\r\n                    value: user.tin ?? user.username\r\n                }\r\n            ]}/>} />\r\n            <Route exact path={`${match.path}/create`} component={EmpowermentForm} />\r\n            <Route exact path={`${match.path}/edit/:empowermentId`} component={EmpowermentForm} />\r\n            <Route exact path={`${match.path}/view/:empId`} component={EmpView} />\r\n            <Route exact path={`${match.path}/duplicate/:duplicateId`} component={EmpowermentForm} />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectCurrentUser\r\n})\r\n\r\nexport default connect(mapStateToProps)(EmpowermentIndex)\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\home\\home.component.jsx",["470","471","472"],"import { Col, Row } from 'antd';\r\nimport axios from 'axios';\r\nimport React from 'react'\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport AdminCard from '../../components/admin-card/admin-card.component';\r\nimport DynaGrid from '../../components/dyna-grid/dyna-grid.component';\r\nimport { selectCabinetData } from '../../redux/user/user.selector';\r\nimport './home.component.scss';\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst CabinetHome = ({ cabinetData }) => {\r\n\r\n    const {t} = useTranslation()\r\n\r\n    const [activeTab, setActiveTab] = useState(0)\r\n    const { income, outcome, rejected, saved } = cabinetData ?? {};\r\n    const TabList= {\r\n        0: t(\"Kiruvchi hujjatlar\"),\r\n        1: t(\"Chiquvchi hujjatlar\"),\r\n        2: t(\"Rad etilgan hujjatlar\"),\r\n        3: t(\"Saqlangan hujjatlar\")\r\n    }\r\n\r\n    const list_of_docs = [\r\n        {\r\n            title: t(\"Kiruvchi\"),\r\n            count: income,\r\n            icon: \"cloud-download-alt\",\r\n            color: \"purple\",\r\n            footer: \"Faktura yaratish\",\r\n            create_url: \"/cabinet/documents/waiting\"\r\n        },\r\n        {\r\n            title: t(\"Chiquvchi\"),\r\n            count: outcome,\r\n            icon: \"cloud-upload-alt\",\r\n            color: \"green\",\r\n            footer: \"Shartnoma yaratish\",\r\n            create_url: \"/cabinet/documents/signed\"\r\n        },\r\n        {\r\n            title: t(\"Rad etilgan\"),\r\n            count: rejected,\r\n            icon: \"ban\",\r\n            color: \"pink\",\r\n            footer: \"Akt yaratish\",\r\n            create_url: \"/cabinet/documents/rejected\"\r\n        },\r\n        {\r\n            title: t(\"Saqlangan\"),\r\n            count: saved,\r\n            icon: [\"far\", \"bookmark\"],\r\n            color: \"orange\",\r\n            footer: \"Ishonchnoma yaratish\",\r\n            create_url: \"/cabinet/documents/saved\"\r\n        },\r\n    \r\n    ]\r\n\r\n    const dyna_config = {\r\n        dataSourcePath: `/api/v1/cabinet/${activeTab}?hi`,\r\n        addActionPath: 'actions/add',\r\n        viewActionPath: '/cabinet/{docType}/view',\r\n        replaceInViewPath: \"docType\",\r\n        deleteConfirmText: \"Shu faktura ochirilsinmi?\",\r\n        actions: {\r\n            edit: activeTab===3 ? true : false,\r\n            delete: activeTab===3 ? true : false,\r\n            view: true\r\n        },\r\n        allColumns: [\r\n            {\r\n                title: t(\"Hujjat №\"),\r\n                dataIndex: 'docNo',\r\n                isSearchable: true,\r\n            },\r\n            {\r\n                title: t(\"Hujjat turi\"),\r\n                dataIndex: \"docType\",\r\n                isFilterable: true,\r\n                filters: ['factura', 'act', 'contract', 'empowerment', \"tty\"]\r\n            },\r\n            {\r\n                title: t(\"Kontrakt №\"),\r\n                dataIndex: 'contractNo',\r\n                isSearchable: true,\r\n            },\r\n            {\r\n                title: t(\"Kontragent\"),\r\n                dataIndex: 'sellerName',\r\n                isSearchable: true,\r\n                width: 150\r\n            },\r\n            {\r\n                title: t(\"Kontragent\")+\" \"+t(\"STIR\"),\r\n                dataIndex: \"sellerTin\",\r\n                isSearchable: true,\r\n            },\r\n            {\r\n                title: \"Oluvchi\",\r\n                dataIndex: 'buyerName',\r\n                isSearchable: true,\r\n                width: 150\r\n            },\r\n            {\r\n                title: \"Oluvchi STIR\",\r\n                dataIndex: \"buyerTin\",\r\n                isSearchable: true,\r\n            },\r\n            {\r\n                title: t(\"Holati\"),\r\n                dataIndex: \"status\",\r\n                isFilterable: true,\r\n                width: 70,\r\n                filters: [\r\n                    {value: 1, text: \"1-Saqlangan\"}, \r\n                    {value: 2, text: \"2-Imzo kutilmoqda\"}, \r\n                    {value: 3, text: \"3-Jo'natilgan\"}, \r\n                    {value: 4, text: \"4-Xatolik yuzbergan\"},\r\n                    {value: 5, text: \"5-Qaytarib yuborilgan\"}, \r\n                    {value: 6, text: \"6-Qabul qilingan\"}, \r\n                    {value: 7, text: \"7-Muaffaqiyatli\"}]\r\n            },\r\n            {\r\n                title: t('Yaratilgan sana'),\r\n                dataIndex: \"created_at\",\r\n                dataType: 'date',\r\n            },\r\n        ]\r\n    }\r\n\r\n    return (\r\n        <div className=\"cabinet-home-main-container\">\r\n            <div className=\"cabinet-home-sub-container\">\r\n                <Row gutter={[16, 16]}>\r\n                    {\r\n                        list_of_docs.map((data, index)=><Col onClick={()=>setActiveTab(index)} md={6}>\r\n                            <AdminCard data={data} />\r\n                        </Col>)\r\n                    }\r\n                    \r\n                </Row>\r\n                <DynaGrid\r\n                    title={TabList[activeTab]}\r\n                    config={dyna_config}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    cabinetData: selectCabinetData\r\n})\r\n\r\nexport default connect(mapStateToProps)(CabinetHome)\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\factura\\index.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\tty\\view\\view.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\tty\\create\\create.component.jsx",["473","474","475","476","477"],"import React, { useState, useEffect } from 'react';\r\nimport 'react-datasheet/lib/react-datasheet.css';\r\nimport { Button, Input, Form, Row, Col, DatePicker, message, Radio, Upload } from 'antd';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport axios from 'axios';\r\nimport Datasheet from 'react-datasheet';\r\nimport BuyerForm from '../../common/buyer-form.component';\r\nimport SellerForm from '../../common/seller-form.component';\r\nimport { connect } from 'react-redux';\r\nimport { selectCurrentUser, selectToken } from '../../../redux/user/user.selector';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport moment from 'moment';\r\nimport PersonFetch from '../../common/person-fetch/person-fetch.component';\r\nimport { convertProductsToGrid, FIRST_TTY_GRID_ROW } from '../../../utils/main';\r\nimport { \r\n  FullscreenOutlined, \r\n  FullscreenExitOutlined, \r\n  } from '@ant-design/icons';\r\nimport SelectEditor from '../../../components/data-sheet-custom-selector/custom-selector.component';\r\nimport SelectMeasureEditor from '../../../components/data-sheet-custom-measure-selector/custom-selector.component';\r\n\r\n\r\nconst TTYForm = ({ match, token, user }) => {\r\n\r\n  const [form] = Form.useForm();\r\n  const { ttyId } = match.params;\r\n  const [initialData, setInitialData] = useState()\r\n  const [isLoading, setIsloading] = useState(false);\r\n\r\n\r\n  //#region DATA SHEET\r\n\r\n  const [fullView, toglleFullView] = useState(false)\r\n\r\n\r\n  const [grid, setGrid] = useState([\r\n    FIRST_TTY_GRID_ROW,\r\n    [\r\n      { readOnly: true, value: 1 }, //0 ordNo\r\n      { value: \"\" }, //1 product name\r\n      { value: \"\", dataEditor:  SelectMeasureEditor }, //2 measure\r\n      { value: '' }, //3 count\r\n      { value: \"\", }, //4 price\r\n      { value: \"\", readOnly: true}, //5 total\r\n      { value: '' }, //6 delivery cost\r\n      { value: \"\", }, //7 Docs\r\n      { value: \"\", }, //8 weight measure method\r\n      { value: \"\", }, //9 item class\r\n      { value: \"\", }, //10 brutto weight\r\n      { value: \"\", }, //11 netto weight                       //12 total\r\n    ], \r\n    [\r\n      { readOnly: true, value:2 }, //0 ordNo\r\n      { value: \"\" }, //1 product name\r\n      { value: \"\", dataEditor:  SelectMeasureEditor }, //2 measure\r\n      { value: '' }, //3 count\r\n      { value: \"\", }, //4 price\r\n      { value: \"\", readOnly: true}, //5 total\r\n      { value: '' }, //6 delivery cost\r\n      { value: \"\", }, //7 Docs\r\n      { value: \"\", }, //8 weight measure method\r\n      { value: \"\", }, //9 item class\r\n      { value: \"\", }, //10 brutto weight\r\n      { value: \"\", }, //11 netto weight\r\n    ], \r\n    [\r\n      { readOnly: true, value:3 }, //0 ordNo\r\n      { value: \"\" }, //1 product name\r\n      { value: \"\", dataEditor:  SelectMeasureEditor }, //2 measure\r\n      { value: '' }, //3 count\r\n      { value: \"\", }, //4 price\r\n      { value: \"\", readOnly: true}, //5 total\r\n      { value: '' }, //6 delivery cost\r\n      { value: \"\", }, //7 Docs\r\n      { value: \"\", }, //8 weight measure method\r\n      { value: \"\", }, //9 item class\r\n      { value: \"\", }, //10 brutto weight\r\n      { value: \"\", }, //11 netto weight\r\n    ], \r\n    [\r\n      { readOnly: true, value:4 }, //0 ordNo\r\n      { value: \"\" }, //1 product name\r\n      { value: \"\", dataEditor:  SelectMeasureEditor }, //2 measure\r\n      { value: '' }, //3 count\r\n      { value: \"\", }, //4 price\r\n      { value: \"\", readOnly: true}, //5 total\r\n      { value: '' }, //6 delivery cost\r\n      { value: \"\", }, //7 Docs\r\n      { value: \"\", }, //8 weight measure method\r\n      { value: \"\", }, //9 item class\r\n      { value: \"\", }, //10 brutto weight\r\n      { value: \"\", }, //11 netto weight\r\n    ], \r\n  ])\r\n\r\n  const handleImportExecl =(value)=>{\r\n    console.log(\"me fired\")\r\n\r\n    if(value.file.status==\"done\"){\r\n      \r\n      const { response } = value.file\r\n\r\n      response.excel.forEach((element, index)=>{\r\n        element[0].value = index + 1;\r\n        element[0].readOnly = true;\r\n        element[2].dataEditor = SelectEditor;\r\n        element[4].dataEditor = SelectMeasureEditor;\r\n      })\r\n\r\n      setGrid([grid[0], ...response.excel])\r\n      console.log(response)\r\n    }\r\n  }\r\n\r\n  //#region data-sheet methods\r\n  const handleRemoveRow = (rowId)=>{\r\n\r\n    grid.splice(rowId, 1)\r\n    setGrid([...grid])\r\n  }\r\n\r\n  const valueRenderer = cell => cell.value;\r\n  const onCellsChanged = changes => {\r\n    changes.forEach(({ cell, row, col, value }, index) => {\r\n        //this sets changed values\r\n        grid[row][col] = { ...grid[row][col], value };\r\n        \r\n\r\n        //Lets calculate\r\n        let priceamount = parseFloat(grid[row][3].value??0) * parseFloat(grid[row][4].value??0);\r\n\r\n        grid[row][5] = {...grid[row][5], value: priceamount ?? 0}\r\n\r\n       \r\n     \r\n    });\r\n     setGrid([...grid]);\r\n  };\r\n\r\n  const handleAddRow = ()=>{\r\n    \r\n    const sampleRow = [\r\n      { readOnly: true, value:    grid.length }, //0 ordNo\r\n      { value: \"\" }, //1 product name\r\n      { value: \"\", dataEditor:  SelectMeasureEditor }, //2 measure\r\n      { value: '' }, //3 count\r\n      { value: \"\", }, //4 price\r\n      { value: \"\", readOnly: true}, //5 total\r\n      { value: '' }, //6 delivery cost\r\n      { value: \"\", }, //7 Docs\r\n      { value: \"\", }, //8 weight measure method\r\n      { value: \"\", }, //9 item class\r\n      { value: \"\", }, //10 brutto weight\r\n      { value: \"\", }, //11 netto weight\r\n    ]\r\n\r\n    let newgrid = [...grid, sampleRow];\r\n\r\n     setGrid(newgrid)\r\n  }\r\n\r\n  const onContextMenu = (e, cell, i, j) =>\r\n    cell.readOnly ? e.preventDefault() : null;\r\n//#endregion\r\n\r\n  //#endregion\r\n\r\n\r\n  useEffect(() => {\r\n    if (ttyId) {\r\n\r\n      //fetch fatura data\r\n      axios({\r\n        url: `/api/v1/ttys/${ttyId}`,\r\n        method: \"GET\",\r\n      }).then(res => {\r\n        let data = res.data;\r\n        data.contractDate = moment(data.contractDate);\r\n        data.created_at = moment(data.created_at);\r\n        data.wayBillDate = moment(data.wayBillDate);\r\n        data.tripTicketDate = moment(data.tripTicketDate);\r\n        data.updated_at = moment(data.updated_at);\r\n        console.log(data);\r\n\r\n        setInitialData(res.data);\r\n        form.resetFields();\r\n        setGrid(convertProductsToGrid(res.data.products, \"tty\"))\r\n      }).catch(err => {\r\n        console.log(err);\r\n      })\r\n      //end fetch factura data;\r\n    }\r\n  }, [])\r\n\r\n\r\n  const validateMessages = {\r\n    required: 'Bu maydon majburiy!',\r\n    types: {\r\n      email: '${label} is not a valid email!',\r\n      number: '${label} is not a valid number!',\r\n    },\r\n    number: {\r\n      range: '${label} must be between ${min} and ${max}',\r\n    },\r\n\r\n  };\r\n\r\n  //#region form methods\r\n\r\n  const handleSubmit = (values) => {\r\n    setIsloading(true);\r\n    console.log(values)\r\n    if (ttyId) {\r\n      axios({\r\n        url: `/api/v1/ttys/${ttyId}`,\r\n        method: 'PATCH',\r\n        data: { tty: values, products: grid }\r\n      }).then(res => {\r\n        setIsloading(false);\r\n        message.success(\"TTY yangilandi!\");\r\n        console.log(res)\r\n      }).catch(err => {\r\n        setIsloading(false)\r\n        message.error(\"TTY yangilashda xatolik!\");\r\n        console.log(err)\r\n      })\r\n    } else {\r\n      axios({\r\n        url: '/api/v1/ttys',\r\n        method: 'post',\r\n        data: { tty: values, products: grid }\r\n      }).then(res => {\r\n        setIsloading(false)\r\n        message.success(\"TTY yaratildi!\");\r\n        console.log(res)\r\n      }).catch(err => {\r\n        setIsloading(false)\r\n        message.error(\"TTY yaratishda xatolik!\");\r\n        console.log(err)\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  //#endregion\r\n\r\n  return (\r\n    <div style={{ padding: 15 }}>\r\n      <Form\r\n        initialValues={initialData}\r\n        form={form}\r\n        name=\"factura\"\r\n        onFinish={handleSubmit}\r\n        scrollToFirstError\r\n        validateMessages={validateMessages}\r\n      >\r\n\r\n        <div className=\"factura-data-sheet-container\">\r\n          <h3>TTY yaratish</h3>\r\n\r\n          <Row justify=\"space-between\">\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  rules={[{ required: true }]}\r\n                  key=\"dyna-form-facutura-no\"\r\n                  name=\"wayBillNo\">\r\n                  <Input\r\n                    size=\"large\"\r\n                    placeholder=\"TTY raqami\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">TTY raqami</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  key=\"dyna-form-item-inn-date\"\r\n                  name=\"wayBillDate\"\r\n                  rules={[{ required: true }]}>\r\n                  <DatePicker\r\n                    size=\"large\"\r\n                    placeholder=\"TTY sanasi\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">TTY sanasi</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={24}>\r\n              <Form.Item\r\n                name=\"deliveryType\"\r\n                key=\"deliveryType\"\r\n                initialValue={1}\r\n              >\r\n                <Radio.Group style={{ width: '100%' }} options={[\r\n                  { label: \"Omborxonadan omborxonaga\", value: 1 },\r\n                  { label: \"Sotuvchidan xaridorgacha\", value: 2 }\r\n                ]}\r\n                  optionType=\"button\"\r\n                />\r\n\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n        <div className=\"factura-data-sheet-container\">\r\n          <Row justify=\"space-between\">\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  rules={[{ required: true }]}\r\n                  key=\"dyna-form-item-contract-n0\"\r\n                  name=\"contractNo\">\r\n                  <Input\r\n                    size=\"large\"\r\n                    placeholder=\"Shartnoma raqami\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Shartnoma raqami</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  rules={[{ required: true }]}\r\n                  key=\"dyna-form-item-contract-date\"\r\n                  name=\"contractDate\">\r\n                  <DatePicker\r\n                    size=\"large\"\r\n                    placeholder=\"Shartnoma sanasi\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Shartnoma sanasi</span>\r\n              </Form.Item>\r\n            </Col>\r\n\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  rules={[{ required: true }]}\r\n                  key=\"dyna-form-item-contract-n0-TripTicketNo\"\r\n                  name=\"tripTicketNo\">\r\n                  <Input\r\n                    size=\"large\"\r\n                    placeholder=\"Shartnoma raqami\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Yo'l varaqasi raqami</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  rules={[{ required: true }]}\r\n                  key=\"dyna-form-item-contract-date-TripTicketDate\"\r\n                  name=\"tripTicketDate\">\r\n                  <DatePicker\r\n                    size=\"large\"\r\n                    placeholder=\"Shartnoma sanasi\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Yo'l varaqasi sanasi</span>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n\r\n        <div className=\"factura-data-sheet-container\">\r\n\r\n          <Row justify=\"space-between\">\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"truckRegNo\"\r\n                  key=\"truckRegNo\"\r\n                  rules={[{ required: true }]}\r\n                >\r\n                  <Input size=\"large\" placeholder=\"Avtomobil davlat raqami\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Avtomobil davlat raqami</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"truckModel\"\r\n                  key=\"truckModel\"\r\n                  rules={[{ required: true }]}\r\n                >\r\n                  <Input size=\"large\" placeholder=\"Avtomobil turi\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Avtomobil turi</span>\r\n              </Form.Item>\r\n            </Col>\r\n\r\n            <Col md={24}>\r\n              <Form.Item\r\n                name=\"trailerType\"\r\n                key=\"trailerType\"\r\n                initialValue={1}\r\n              >\r\n                <Radio.Group style={{ width: '100%' }} options={[\r\n                  { label: \"Tirkama\", value: 1 },\r\n                  { label: \"Yarim tirkama\", value: 2 }\r\n                ]}\r\n                  optionType=\"button\"\r\n                />\r\n              </Form.Item>\r\n            </Col>\r\n\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"trailerRegNo\"\r\n                  key=\"TrailerRegNo\"\r\n                  rules={[{ required: true }]}\r\n                >\r\n                  <Input size=\"large\" placeholder=\"Tirkama davlat raqami\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Tirkama davlat raqami</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"trailerModel\"\r\n                  key=\"TrailerRegNoType\"\r\n                  rules={[{ required: true }]}\r\n                >\r\n                  <Input size=\"large\" placeholder=\"Tirkama turi\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Tirkama turi</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"driverFio\"\r\n                  key=\"DriverFio\"\r\n                  rules={[{ required: true }]}\r\n                >\r\n                  <Input size=\"large\" placeholder=\"Haydovchi FIO\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Haydovchi FIO</span>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n\r\n        <div className=\"factura-data-sheet-container\">\r\n\r\n          <Row justify=\"space-between\">\r\n            <Col md={11}>\r\n              <SellerForm form={form} docType=\"act\" />\r\n            </Col>\r\n\r\n            <Col md={11}>\r\n              <BuyerForm form={form} docType=\"act\" />\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n\r\n        <div className=\"factura-data-sheet-container\">\r\n\r\n          <Row justify=\"space-between\">\r\n            <Col md={11}>\r\n              <PersonFetch\r\n                form={form}\r\n                pName=\"carrierName\"\r\n                pTin=\"carrierTin\"\r\n                nameLabel=\"Tashuvchi FIO\"\r\n                tinLabel=\"Tashunchi STIR\" />\r\n            </Col>\r\n\r\n            <Col md={11}>\r\n              <PersonFetch\r\n                form={form}\r\n                pName=\"customerName\"\r\n                pTin=\"customerTin\"\r\n                nameLabel=\"Buyurtmachi FIO\"\r\n                tinLabel=\"Buyurtmachi STIR\" />\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n\r\n        <div className=\"factura-data-sheet-container\">\r\n          <Row justify=\"space-between\">\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"pointOfLoading\"\r\n                  key=\"PointOfLoading\"\r\n                >\r\n                  <Input size=\"large\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Yuklash manzili</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"pointOfUnloading\"\r\n                  key=\"pointOfUnloading\"\r\n                >\r\n                  <Input size=\"large\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Tushirish mazili</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"pointOfRedirectName\"\r\n                  key=\"pointOfRedirectName\"\r\n                >\r\n                  <Input size=\"large\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Boshqa manzil nomi</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"pointOfRedirectAddress\"\r\n                  key=\"pointOfRedirectAddress\"\r\n                >\r\n                  <Input size=\"large\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Boshqa manzil manzili</span>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n\r\n        <div className=\"factura-data-sheet-container\">\r\n          <Row justify=\"space-between\">\r\n\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"giverFio\"\r\n                  key=\"giverFio\"\r\n                >\r\n                  <Input size=\"large\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Topshirdi</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"takerFio\"\r\n                  key=\"takerFio\"\r\n                >\r\n                  <Input size=\"large\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Qabul qildi</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"giverDriverFio\"\r\n                  key=\"giverDriverFio\"\r\n                >\r\n                  <Input size=\"large\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Topshiruvchi haydovchi FIO</span>\r\n              </Form.Item>\r\n            </Col>\r\n\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"takerDriverFio\"\r\n                  key=\"takerDriverFio\"\r\n                >\r\n                  <Input size=\"large\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Qabulqiluvchi haydovchi FIO</span>\r\n              </Form.Item>\r\n            </Col>\r\n\r\n\r\n            <Col md={24} >\r\n              <Form.Item>\r\n                <Form.Item\r\n                  key=\"selenote-field\"\r\n                  name=\"specialNotes\">\r\n                  <Input\r\n                    size=\"large\"\r\n                    placeholder=\"Қўшимча майдон\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Қўшимча майдон</span>\r\n              </Form.Item>\r\n            </Col>\r\n\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"deliveryDistance\"\r\n                  key=\"deliveryDistance\"\r\n                >\r\n                  <Input size=\"large\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Tashish orligi</span>\r\n              </Form.Item>\r\n            </Col>\r\n\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"deliveryDistanceInCity\"\r\n                  key=\"deliveryDistanceInCity\"\r\n                >\r\n                  <Input size=\"large\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Tashish orqliq (Shaharda)</span>\r\n              </Form.Item>\r\n            </Col>\r\n\r\n          </Row>\r\n        </div>\r\n\r\n        <div className={`factura-data-sheet-container ${fullView ? 'grid-full-view' : null}`}>\r\n        <div style={{marginBottom: 10, display: 'flex', justifyContent:'space-between'}}>\r\n          <div style={{display: 'flex'}}>\r\n              <Upload \r\n                headers={{\r\n                  Authorization: \"Bearer \" + token\r\n                }}\r\n                multiple={false}\r\n                action=\"http://127.0.0.1:8000/api/v1/factura-products/read-excel\"\r\n                accept=\".xlsx, .xls\" \r\n                onChange={handleImportExecl}>\r\n                \r\n                  <Button style={{marginRight: 10}}>Exceldan yuklash</Button>\r\n               \r\n              </Upload>\r\n              <a target=\"_blank\" href=\"../../../excels/on_doc_factura_products.xlsx\" download>\r\n                <Button >\r\n                  Shablon yuklash\r\n                </Button>\r\n              </a>\r\n            </div>\r\n            <Button\r\n              type=\"primary\"\r\n              icon={fullView ? <FullscreenExitOutlined /> : <FullscreenOutlined />} \r\n              onClick={()=>toglleFullView(!fullView)}>\r\n                { fullView ? \"Kichraytirish\" : \"Kengaytirish\" }\r\n            </Button>\r\n        </div>\r\n        \r\n      <div style={{overflowX: 'auto'}} >\r\n        <div style={{width: '100%'}}>\r\n          <Datasheet\r\n            data={ grid}\r\n            valueRenderer={ valueRenderer}\r\n            onContextMenu={ onContextMenu}\r\n            onCellsChanged={ onCellsChanged}\r\n          />\r\n        </div>\r\n      </div>\r\n      <Button \r\n        size=\"large\" \r\n        style={{marginTop: 20, marginRight: 7, width: 220}} \r\n        type=\"primary\" \r\n        icon={<FontAwesomeIcon \r\n          style={{marginRight: 7}} \r\n          icon={[\"far\", \"plus-square\"]} />} \r\n        onClick={  handleAddRow }>Qo'shish</Button>\r\n      \r\n      <Button \r\n        size=\"large\" \r\n        style={{marginTop: 20, width: 220 }} \r\n        danger\r\n        type=\"primary\" \r\n        icon={<FontAwesomeIcon \r\n          style={{marginRight: 7}} \r\n          icon={[\"far\", \"trash-alt\"]} />} \r\n        onClick={ ()=>{ if(grid.length>1){ handleRemoveRow(grid.length-1) }}  }>Oxirgi qatorni o'chirish</Button>\r\n      </div>\r\n\r\n        <div className=\"factura-data-sheet-container\">\r\n          <Row justify=\"space-around\">\r\n            <Col >\r\n              <Button\r\n                loading={isLoading}\r\n                primary\r\n                htmlType=\"submit\"\r\n                className=\"factra-action-btns save-btn\"\r\n                size=\"large\"\r\n                icon={<FontAwesomeIcon icon=\"save\" className=\"factura-action-btn-icons\" />}>\r\n                Сақлаб қолиш\r\n                  </Button>\r\n            </Col>\r\n            <Col>\r\n              <Button\r\n                className=\"factra-action-btns sing-btn\"\r\n                size=\"large\"\r\n                icon={<FontAwesomeIcon icon=\"signature\" className=\"factura-action-btn-icons\" />}>\r\n                Имзолаш\r\n                  </Button>\r\n            </Col>\r\n            <Col>\r\n              <Button\r\n                icon={<FontAwesomeIcon icon=\"ban\" className=\"factura-action-btn-icons\" />}\r\n                danger\r\n                className=\"factra-action-btns\"\r\n                size=\"large\">\r\n                Бекор қилиш\r\n                  </Button>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  token: selectToken,\r\n  user: selectCurrentUser\r\n})\r\n\r\nexport default connect(mapStateToProps)(TTYForm);","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\act\\view\\view.component.jsx",["478"],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\contract\\view\\view.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\profile\\profile-tabs.router.jsx",["479"],"import React from 'react'\r\nimport AccountForm from '../settings/account-form/account-form.component';\r\nimport UserProducts from '../settings/user-products/user-products.component';\r\nimport PasswordChange from '../password-change/password-change.component';\r\nimport { Route } from 'react-router';\r\nimport Account from \"../settings/account\";\r\nimport Notify from \"../settings/notification\";\r\n\r\nconst ProfileTabsRouter = ({ match }) => {\r\n    return (\r\n        <div>\r\n            <Route path={`${match.path}/account`} exact component={Account} />\r\n            <Route path={`${match.path}/notify`} exact component={Notify} />\r\n            <Route path={match.path} exact component={AccountForm} />\r\n            <Route path={`${match.path}/tab-2`} component={UserProducts} exact/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileTabsRouter\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\profile\\profile-tabs.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\act\\create\\create.component.jsx",["480","481","482","483","484","485","486","487"],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\admin-card\\admin-card.component.jsx",["488","489","490"],"import React from 'react';\r\nimport './admin-card.style.scss';\r\nimport { Badge, Card } from 'antd';\r\nimport {PlusCircleTwoTone} from '@ant-design/icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst AdminCard = ({ data })=>{\r\n    const {title, icon, color, count} = data\r\n    return(\r\n    <Card className=\"admin-card-container\" >\r\n        <div className={`admin-card-icon-field admin-card-${color}`} ><FontAwesomeIcon icon={icon} className=\"admin-card-icon\"/></div>\r\n        <div className=\"admin-card-title\">{title}</div>\r\n        <div className=\"admin-card-content\">{count}</div>\r\n        \r\n    </Card>\r\n)}\r\n\r\nexport default AdminCard;","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\factura\\create\\create.component.jsx",["491","492","493","494","495","496"],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\contract\\create\\create.component.jsx",["497","498","499","500","501","502","503","504"],"import React, { useState, useEffect } from 'react';\r\nimport 'react-datasheet/lib/react-datasheet.css';\r\nimport Datasheet from 'react-datasheet';\r\nimport SelectMeasureEditor from '../../../components/data-sheet-custom-measure-selector/custom-selector.component';\r\nimport { Button, Input, Form, Row, Col, DatePicker, Upload, Divider, message } from 'antd';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n//import './create.style.scss';\r\nimport axios from 'axios';\r\nimport BuyerForm from '../../common/buyer-form.component';\r\nimport SellerForm from '../../common/seller-form.component';\r\nimport { connect } from 'react-redux';\r\nimport { selectToken } from '../../../redux/user/user.selector';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport moment from 'moment';\r\nimport {\r\n  FullscreenOutlined,\r\n  FullscreenExitOutlined,\r\n  PlusOutlined\r\n} from '@ant-design/icons';\r\nimport { convertProductsToGrid, FIRST_CONTRACT_GRID_ROW } from '../../../utils/main';\r\nimport SelectEditor from '../../../components/data-sheet-custom-selector/custom-selector.component';\r\nimport TextArea from 'antd/lib/input/TextArea';\r\n\r\nconst ConractCreateForm = ({ token, match }) => {\r\n\r\n  const [form] = Form.useForm();\r\n  const { contractId } = match.params;\r\n  const [initialData, setInitialData] = useState();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (contractId) {\r\n\r\n      //fetch fatura data\r\n      axios({\r\n        url: `/api/v1/contracts/${contractId}`,\r\n        method: \"GET\",\r\n      }).then(res => {\r\n        let data = res.data;\r\n        data.contractDate = moment(data.contractDate);\r\n        data.created_at = moment(data.created_at);\r\n        data.contractExpireDate = moment(data.contractExpireDate);\r\n        data.updated_at = moment(data.updated_at);\r\n        data.parts = data.contract_parts\r\n        data.contract_partners = data.contract_partners.map(partner=>{\r\n          const { \r\n            account, \r\n            address, \r\n            branchCode, \r\n            branchName, \r\n            director, \r\n            directorTin, \r\n            fizFio, \r\n            fizTin, \r\n            mobilePhone,\r\n            name, \r\n            oked, \r\n            tin,\r\n            workPhone,\r\n            physicalTin,\r\n            physicalName\r\n          } = partner;\r\n          return {\r\n            buyerAccount: account, \r\n            buyerAddress: address, \r\n            buyerBranch: branchCode, \r\n            buyerBranchName: branchName, \r\n            buyerDirector: director, \r\n            buyerDirectorTin: directorTin, \r\n            buyerPhysicalFio: fizFio, \r\n            buyerPhysicalTin: fizTin, \r\n            buyerMobilePhone: mobilePhone,\r\n            buyerName: name, \r\n            oked, \r\n            buyerTin: tin,\r\n          }\r\n        })\r\n        console.log(data);\r\n\r\n        setInitialData(data);\r\n        setGrid(convertProductsToGrid(res.data.contract_products, \"contract\"));\r\n        form.resetFields();\r\n      }).catch(err => {\r\n        console.log(err);\r\n      })\r\n      //end fetch factura data;\r\n    }\r\n  }, [])\r\n\r\n\r\n  const validateMessages = {\r\n    required: 'Bu maydon majburiy!',\r\n    types: {\r\n      email: '${label} is not a valid email!',\r\n      number: '${label} is not a valid number!',\r\n    },\r\n    number: {\r\n      range: '${label} must be between ${min} and ${max}',\r\n    },\r\n\r\n  };\r\n\r\n  const [fullView, toglleFullView] = useState(false)\r\n\r\n  const [grid, setGrid] = useState([\r\n    FIRST_CONTRACT_GRID_ROW,\r\n    [\r\n      { readOnly: true, value: 1 }, //0 ordNo\r\n      { value: \"\" }, //1 product name\r\n      { value: \"\", dataEditor: SelectEditor }, //2 catalogCode\r\n      { value: \"\" }, //3 shrix code\r\n      { value: \"\", dataEditor: SelectMeasureEditor }, //4 measure\r\n      { value: '' }, //5 amount\r\n      { value: \"\", }, //6 price\r\n      { value: '' }, //7 delivery cost\r\n      { value: '', readOnly: true, }, //8 total\r\n    ],\r\n    [\r\n      { readOnly: true, value: 2 }, //0 ordNo\r\n      { value: \"\" }, //1 product name\r\n      { value: \"\", dataEditor: SelectEditor }, //2 catalogCode\r\n      { value: \"\" }, //3 shrix code\r\n      { value: \"\", dataEditor: SelectMeasureEditor }, //4 measure\r\n      { value: '' }, //5 amount\r\n      { value: \"\", }, //6 price\r\n      { value: '' }, //7 delivery cost\r\n      { value: '', readOnly: true, }, //8 total\r\n    ],\r\n    [\r\n      { readOnly: true, value: 3 }, //0 ordNo\r\n      { value: \"\" }, //1 product name\r\n      { value: \"\", dataEditor: SelectEditor }, //2 catalogCode\r\n      { value: \"\" }, //3 shrix code\r\n      { value: \"\", dataEditor: SelectMeasureEditor }, //4 measure\r\n      { value: '' }, //5 amount\r\n      { value: \"\", }, //6 price\r\n      { value: '' }, //7 delivery cost\r\n      { value: '', readOnly: true, }, //8 total\r\n    ],\r\n    [\r\n      { readOnly: true, value: 4 }, //0 ordNo\r\n      { value: \"\" }, //1 product name\r\n      { value: \"\", dataEditor: SelectEditor }, //2 catalogCode\r\n      { value: \"\" }, //3 shrix code\r\n      { value: \"\", dataEditor: SelectMeasureEditor }, //4 measure\r\n      { value: '' }, //5 amount\r\n      { value: \"\", }, //6 price\r\n      { value: '' }, //7 delivery cost\r\n      { value: '', readOnly: true, }, //8 total\r\n    ],\r\n  ])\r\n\r\n\r\n  //#region data-sheet methods\r\n  const handleRemoveRow = (rowId) => {\r\n    grid.splice(rowId, 1)\r\n    setGrid([...grid])\r\n  }\r\n\r\n  const valueRenderer = cell => cell.value;\r\n  const onCellsChanged = changes => {\r\n    changes.forEach(({ cell, row, col, value }, index) => {\r\n      //this sets changed values\r\n      grid[row][col] = { ...grid[row][col], value };\r\n\r\n\r\n      //Lets calculate\r\n      grid[row][8].value = grid[row][5].value && grid[row][6].value\r\n        ? parseFloat(grid[row][5].value) * parseFloat(grid[row][6].value)\r\n        + parseFloat(grid[row][7].value ? grid[row][7].value : 0)\r\n        : 0\r\n\r\n\r\n\r\n    });\r\n    setGrid([...grid]);\r\n  };\r\n\r\n  const handleAddRow = () => {\r\n\r\n    const sampleRow = [\r\n      { readOnly: true, value: grid.length }, //0 ordNo\r\n      { value: \"\" }, //1 product name\r\n      { value: \"\", dataEditor: SelectEditor }, //2 catalogCode\r\n      { value: \"\" }, //3 shrix code\r\n      { value: \"\", dataEditor: SelectMeasureEditor }, //4 measure\r\n      { value: '' }, //5 amount\r\n      { value: \"\", }, //6 price\r\n      { value: '' }, //7 delivery cost\r\n      { value: '', readOnly: true, }, //8 total\r\n    ]\r\n\r\n    let newgrid = [...grid, sampleRow];\r\n\r\n    setGrid(newgrid)\r\n  }\r\n\r\n  const onContextMenu = (e, cell, i, j) =>\r\n    cell.readOnly ? e.preventDefault() : null;\r\n  //#endregion\r\n\r\n  //#region form methods\r\n\r\n  const handleSubmit = (values) => {\r\n    console.log(values)\r\n    setIsLoading(true);\r\n    let parts = values.parts.map((part, index) => ({ ...part, ordNo: index + 1 }));\r\n    let partners = values.contract_partners;\r\n    delete values.parts;\r\n    delete values.contract_partners;\r\n    if (contractId) {\r\n      axios({\r\n        url: `/api/v1/contracts/${contractId}`,\r\n        method: 'PATCH',\r\n        data: { contract: values, products: grid, parts: parts, contract_partners: partners }\r\n      }).then(res => {\r\n        console.log(res)\r\n        if (res.data.ok) {\r\n          message.success(\"Shartnoma yangilandi!\");\r\n        } else {\r\n          message.error(\"Shartnoma yangilashda xatolik!\");\r\n        }\r\n        setIsLoading(false);\r\n      }).catch(err => {\r\n        message.error(\"Shartnoma yangilashda xatolik!\");\r\n        console.log(err)\r\n        setIsLoading(false);\r\n      })\r\n    } else {\r\n      axios({\r\n        url: '/api/v1/contracts',\r\n        method: 'post',\r\n        data: { contract: values, products: grid, parts: parts, contract_partners: partners  }\r\n      }).then(res => {\r\n        console.log(res)\r\n        if (res.data.ok) {\r\n          message.success(\"Yangi shartnoma yaratildi!\")\r\n        } else {\r\n          message.error(\"Shartnoma yaratish xatolik!\");\r\n        }\r\n        setIsLoading(false);\r\n      }).catch(err => {\r\n        console.log(err)\r\n        message.error(\"Shartnoma yaratish xatolik!\");\r\n        setIsLoading(false);\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  const handleImportExecl = (value) => {\r\n\r\n    if (value.file.status == \"done\") {\r\n\r\n      const { response } = value.file\r\n\r\n      response.excel.forEach((element, index) => {\r\n        element[0].value = index + 1;\r\n        element[0].readOnly = true;\r\n        element[4].dataEditor = SelectMeasureEditor;\r\n      })\r\n\r\n      setGrid([grid[0], ...response.excel])\r\n      console.log(response)\r\n    }\r\n  }\r\n\r\n  //#endregion\r\n\r\n  return (\r\n    <div style={{ padding: 15 }}>\r\n      <Form\r\n        initialValues={initialData}\r\n        form={form}\r\n        name=\"factura\"\r\n        onFinish={handleSubmit}\r\n        scrollToFirstError\r\n        validateMessages={validateMessages}\r\n      >\r\n\r\n        <div className=\"factura-data-sheet-container\">\r\n          <h3>Shartnoma</h3>\r\n\r\n          <Row justify=\"space-between\">\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  rules={[{ required: true }]}\r\n                  key=\"dyna-form-facutura-no\"\r\n                  name=\"contractName\">\r\n                  <Input\r\n                    size=\"large\"\r\n                    placeholder=\"Nomi\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Nomi</span>\r\n              </Form.Item>\r\n            </Col>\r\n\r\n            <Col md={11}>\r\n              <div style={{ display: 'flex', justifyContent: \"space-between\" }}>\r\n                <Form.Item>\r\n                  <Form.Item\r\n                    key=\"dyna-form-item-inn-date\"\r\n                    name=\"contractDate\"\r\n                    rules={[{ required: true }]}>\r\n                    <DatePicker\r\n                      size=\"large\"\r\n                      placeholder=\"Tuzilgan sanasi\" />\r\n                  </Form.Item>\r\n                  <span className=\"custom-input-label-1\">Tuzilgan sanasi</span>\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                  <Form.Item\r\n                    key=\"dyna-form-item-inn-date-expire\"\r\n                    name=\"contractExpireDate\"\r\n                    rules={[{ required: true }]}>\r\n                    <DatePicker\r\n                      size=\"large\"\r\n                      placeholder=\"Amal qilish sanasi\" />\r\n                  </Form.Item>\r\n                  <span className=\"custom-input-label-1\">Amal qilish sanasi</span>\r\n                </Form.Item>\r\n              </div>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  rules={[{ required: true }]}\r\n                  key=\"dyna-form-item-contract-n0\"\r\n                  name=\"contractNo\">\r\n                  <Input\r\n                    size=\"large\"\r\n                    placeholder=\"Shartnoma raqami\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Shartnoma raqami</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  rules={[{ required: true }]}\r\n                  key=\"dyna-form-item-contract-date\"\r\n                  name=\"contractPlace\">\r\n                  <Input\r\n                    size=\"large\"\r\n                    placeholder=\"Shartnoma joyi\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Shartnoma joyi</span>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n\r\n        <div className=\"factura-data-sheet-container\">\r\n\r\n          <Row justify=\"space-between\">\r\n            <Col md={11}>\r\n              <SellerForm docType=\"contract\" form={form} />\r\n            </Col>\r\n\r\n          <Form.List name=\"contract_partners\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                  {fields.map(field => (\r\n                    <Col sm={11}>\r\n                      <BuyerForm\r\n                        key={field.key}\r\n                        fieldList={field}\r\n                        remove={remove}\r\n                        docType=\"contract\"\r\n                        form={form} />\r\n                    </Col>\r\n                  ))}\r\n                <Form.Item>\r\n                  <Button \r\n                    size=\"large\" \r\n                    className=\"factra-action-btns\" \r\n                    style={{width:'100%'}} \r\n                    type=\"dashed\" \r\n                    onClick={() => add()} \r\n                    icon={<PlusOutlined />}>\r\n                    Kontragent qo'shish\r\n              </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n\r\n          </Form.List>\r\n          </Row>\r\n        </div>\r\n        <div className={`factura-data-sheet-container ${fullView ? 'grid-full-view' : null}`}>\r\n          <div style={{ marginBottom: 10, display: 'flex', justifyContent: 'space-between' }}>\r\n            <div style={{ display: 'flex' }}>\r\n              <Upload\r\n                headers={{\r\n                  Authorization: \"Bearer \" + token\r\n                }}\r\n                multiple={false}\r\n                action=\"http://127.0.0.1:8000/api/v1/factura-products/read-excel\"\r\n                accept=\".xlsx, .xls\"\r\n                onChange={handleImportExecl}>\r\n\r\n                <Button style={{ marginRight: 10 }}>Exceldan yuklash</Button>\r\n\r\n              </Upload>\r\n              <a target=\"_blank\" href=\"../../../excels/on_doc_contract_products.xlsx\" download>\r\n                <Button >\r\n                  Shablon yuklash\r\n                </Button>\r\n              </a>\r\n            </div>\r\n            <Button\r\n              type=\"primary\"\r\n              icon={fullView ? <FullscreenExitOutlined /> : <FullscreenOutlined />}\r\n              onClick={() => toglleFullView(!fullView)}>\r\n              {fullView ? \"Kichraytirish\" : \"Kengaytirish\"}\r\n            </Button>\r\n          </div>\r\n\r\n          <div style={{ overflowX: 'auto' }} >\r\n            <div style={{ width: '100%' }}>\r\n              <Datasheet\r\n                data={grid}\r\n                valueRenderer={valueRenderer}\r\n                onContextMenu={onContextMenu}\r\n                onCellsChanged={onCellsChanged}\r\n              />\r\n            </div>\r\n          </div>\r\n          <Button\r\n            size=\"large\"\r\n            style={{ marginTop: 20, marginRight: 7, width: 220 }}\r\n            type=\"primary\"\r\n            icon={<FontAwesomeIcon\r\n              style={{ marginRight: 7 }}\r\n              icon={[\"far\", \"plus-square\"]} />}\r\n            onClick={handleAddRow}>Qo'shish</Button>\r\n\r\n          <Button\r\n            size=\"large\"\r\n            style={{ marginTop: 20, width: 220 }}\r\n            danger\r\n            type=\"primary\"\r\n            icon={<FontAwesomeIcon\r\n              style={{ marginRight: 7 }}\r\n              icon={[\"far\", \"trash-alt\"]} />}\r\n            onClick={() => { if (grid.length > 1) { handleRemoveRow(grid.length - 1) } }}>Oxirgi qatorni o'chirish</Button>\r\n        </div>\r\n\r\n        <div className=\"factura-data-sheet-container\">\r\n          <h3>Shartnoma shartlari</h3>\r\n          <Form.List name=\"parts\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map(field => (\r\n                  <Row key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"baseline\">\r\n                    <Col sm={24}>\r\n                      <Form.Item>\r\n                        <Form.Item\r\n                          {...field}\r\n                          name={[field.name, 'title']}\r\n                          fieldKey={[field.fieldKey, 'title']}\r\n                          rules={[{ required: true }]}\r\n                        >\r\n                          <Input\r\n                            className=\"border-right-square\"\r\n                            size=\"large\"\r\n                            placeholder=\"Shart sarlavhasi\"\r\n                            addonAfter={\r\n                              <FontAwesomeIcon\r\n                                icon={[\"far\", \"times-circle\"]}\r\n                                onClick={() => remove(field.name)} />} />\r\n                        </Form.Item>\r\n                        <span className=\"custom-input-label-1\">Shart sarlavhasi</span>\r\n                      </Form.Item>\r\n                    </Col>\r\n                    <Col sm={24}>\r\n                      <Form.Item\r\n                        {...field}\r\n                        name={[field.name, 'body']}\r\n                        fieldKey={[field.fieldKey, 'body']}\r\n                        rules={[{ required: true }]}\r\n                      >\r\n                        <TextArea rows={4} placeholder=\"Sharnoma matni\" size=\"large\" />\r\n                      </Form.Item>\r\n                    </Col>\r\n\r\n                    <Divider />\r\n                  </Row>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button size=\"large\" type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                    Maydon qo'shish\r\n              </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        </div>\r\n        <div className=\"factura-data-sheet-container\">\r\n          <Row justify=\"space-around\">\r\n            <Col >\r\n              <Button\r\n                primary\r\n                htmlType=\"submit\"\r\n                loading={isLoading}\r\n                className=\"factra-action-btns save-btn\"\r\n                size=\"large\"\r\n                icon={<FontAwesomeIcon icon=\"save\" className=\"factura-action-btn-icons\" />}>\r\n                Сақлаб қолиш\r\n                  </Button>\r\n            </Col>\r\n            <Col>\r\n              <Button\r\n                className=\"factra-action-btns sing-btn\"\r\n                size=\"large\"\r\n                icon={<FontAwesomeIcon icon=\"signature\" className=\"factura-action-btn-icons\" />}>\r\n                Имзолаш\r\n                  </Button>\r\n            </Col>\r\n            <Col>\r\n              <Button\r\n                icon={<FontAwesomeIcon icon=\"ban\" className=\"factura-action-btn-icons\" />}\r\n                danger\r\n                className=\"factra-action-btns\"\r\n                size=\"large\">\r\n                Бекор қилиш\r\n                  </Button>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n        <Form.Item\r\n          name=\"contractId\"\r\n          key=\"contractId-1\"\r\n        >\r\n          <Input type=\"hidden\" />\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  token: selectToken\r\n})\r\n\r\nexport default connect(mapStateToProps)(ConractCreateForm);","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\factura\\create\\create-excel-type.component.jsx",["505","506","507","508","509"],"import React, { useState, useEffect } from 'react'\r\nimport Datasheet from 'react-datasheet';\r\nimport SelectMeasureEditor from '../../../components/data-sheet-custom-measure-selector/custom-selector.component';\r\nimport SelectEditor from '../../../components/data-sheet-custom-selector/custom-selector.component';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ProductValueRendered } from './product-grid.component';\r\nimport GridDateTime from '../../../components/grid-datetime/grid-datetime.component';\r\nimport GridDocTypeSelect from '../../../components/grid-doctype-select/grid-doctype-select.component';\r\nimport GridSingleSidedTyle from '../../../components/grid-singlesidedtype-select.component/grid-singlesidedtype-select.component';\r\nimport GridUserFetcher from '../../../components/grid-user-fetcher-input/grid-user-fetcher-input.component';\r\nimport { FetchUser } from '../../../utils/utils';\r\n\r\nconst BoldRendered = prop =>{\r\n\r\n    const {value} = prop;\r\n\r\n    return <div style={{textAlign: 'left', fontWeight: 'bold', color: 'black', paddingLeft: 5}}>{value}</div>\r\n}\r\nconst SingleSidedFacturaViewer = prop=>{\r\n\r\n    const { value } = prop;\r\n\r\n    const SINGLE_SIDEDs={\r\n        1: \"На физ. лицо\",\r\n        2:\"На экспорт\",\r\n        3:\"На импорт\",\r\n        4:\"Реализация, связанная с гос. секретом\",\r\n        5:\"Финансовые услуги\"\r\n    }\r\n\r\n    return <div>{SINGLE_SIDEDs[value]}</div>\r\n}\r\nconst DocTypeValueViewer = prop=>{\r\n    const { value } = prop;\r\n\r\n    const FACTURA_TYPES = {\r\n        0: \"STANDARD\",\r\n        1: \"QOSHIMCHA\",\r\n        2: \"HARAJATLARNI QOPLASH\",\r\n        3: \"TOLOVSIZ\",\r\n        4: \"TUZATUVCHI\",\r\n    }\r\n\r\n    return <div>{FACTURA_TYPES[value]}</div>\r\n}\r\nconst CreateExcelType = () => {\r\n    const { t } = useTranslation();\r\n    //const [fullView, toglleFullView] = useState(false)\r\n    const [grid, setGrid] = useState([\r\n        [\r\n            { readOnly: true, value: '', width: 50 },\r\n            { value: t('Tovar/xizmat nomi'), readOnly: true, width: 200 },\r\n            { value: t('Tovar/xizmatlar yagona elektron milliy katalog identifikatsiya kodi'), readOnly: true, width: 150 },\r\n            { value: t('Tovar/xizmat shtrix kodi'), readOnly: true, width: 100 },\r\n            { value: t(\"O'lchov birligi\"), readOnly: true, width: 100 },\r\n            { value: t(\"Miqdori\"), readOnly: true, width: 100 },\r\n            { value: t(\"Narxi\"), readOnly: true, width: 100 },\r\n            { value: t(\"Aksiz soliq (%)\"), readOnly: true, width: 100 },\r\n            { value: t(\"Aksiz soliq, miqdori\"), readOnly: true, width: 100 },\r\n            { value: t(\"Yetkazib berish narxi\"), readOnly: true, width: 100 },\r\n            { value: t(\"QQS (%)\"), readOnly: true, width: 100 },\r\n            { value: t(\"QQS, miqdori\"), readOnly: true, width: 100 },\r\n            { value: t(\"Umumiy summa\"), readOnly: true, width: 150 },\r\n        ],\r\n        [\r\n            { readOnly: true, value: 1 },                           //0 ordNo\r\n            { value: \"\" },                                          //1 product name\r\n            { value: \"\", dataEditor: SelectEditor, valueViewer: ProductValueRendered },                //2 catalogCode\r\n            { value: \"\" },                                          //3 shrix code\r\n            { value: \"\", dataEditor: SelectMeasureEditor },        //4 measure\r\n            { value: '' },                                          //5 amount\r\n            { value: \"\", },                                         //6 price\r\n            { value: '' },                                          //7 aksiz rate\r\n            { value: '', readOnly: true },                          //8 aksiz amount\r\n            { value: '' },                                          //9 delivery cost\r\n            { value: \"\" },                                          //10 VAT rate\r\n            { value: '', readOnly: true },                          //11 VAT amount\r\n            { value: '', readOnly: true, },                          //12 total\r\n        ]\r\n    ])\r\n\r\n    const UserRenderer = prop=>{\r\n        \r\n        const { value, col, row } = prop;\r\n        \r\n        console.log(FetchUser(value))\r\n        \r\n        return <div>{value}</div>\r\n    }\r\n\r\n    const [docGrid, setDocGrid] = useState([\r\n        [\r\n            { value: t(\"Hujjat turi\"), readOnly: true, valueViewer: BoldRendered },\r\n            { value: 0, dataEditor: GridDocTypeSelect, valueViewer: DocTypeValueViewer },\r\n            { value:\"\", valueViewer: BoldRendered, readOnly: true, width: 100, },\r\n            { value: t(\"Faktura raqami\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" }\r\n        ],\r\n        [\r\n            { value: t(\"Faktura sanasi\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\", dataEditor: GridDateTime },\r\n            { value: \"\", valueViewer: BoldRendered, readOnly: true, width: 100 },\r\n            { value: t(\"Shartnoma raqami\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" }\r\n        ],\r\n        [\r\n            { value: t(\"Shartnoma sanasi\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\", dataEditor: GridDateTime },\r\n            { value: \"\", valueViewer: BoldRendered, readOnly: true, width: 100 },\r\n            { value: \"Eski faktura ID\", valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\", valueViewer: BoldRendered }\r\n        ],\r\n        [\r\n            { value: \"Eski faktura NO\", readOnly: true, valueViewer: BoldRendered, },\r\n            { value: \"\" },\r\n            { value: \"\", readOnly: true },\r\n            { value: \"Eski faktura sanasi\", readOnly: true, valueViewer: BoldRendered, },\r\n            { value: \"\", dataEditor: GridDateTime },\r\n        ],\r\n        [\r\n            { readOnly: true, colSpan: 5, value: t(\"Tomonlar\") }\r\n        ],\r\n        [\r\n            {readOnly: true, value: \"\"},\r\n            { readOnly: true, value: \"\" },\r\n            { readOnly: true, value: \"\" },\r\n            { readOnly: true, value: \"Bir tomonli faktura\", valueViewer: BoldRendered },\r\n            { value: \"\", dataEditor: GridSingleSidedTyle, valueViewer: SingleSidedFacturaViewer}\r\n        ],\r\n        [\r\n            { valueViewer: BoldRendered, readOnly: true, colSpan: 2, value: t(\"Sizning ma'lumotlaringiz\") },\r\n            { valueViewer: BoldRendered, readOnly: true, width: 100, value: \"\" },\r\n            { valueViewer: BoldRendered, readOnly: true, colSpan: 2, value: t(\"Kontragent ma'lumotlari\") }\r\n        ],\r\n        [\r\n            { value: t(\"STIR\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\", valueViewer: UserRenderer},\r\n            { value: \"\", valueViewer: BoldRendered, readOnly: true, width: 100 },\r\n            { value: t(\"STIR\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" }\r\n        ],\r\n        [\r\n            { value: t(\"Nomi\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" },\r\n            { value: \"\", valueViewer: BoldRendered, readOnly: true, width: 100 },\r\n            { value: t(\"Nomi\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" }\r\n        ],\r\n        [\r\n            { value: t(\"QQS tolovchi registratsiya raqami\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" },\r\n            { value: \"\", valueViewer: BoldRendered, readOnly: true, width: 100 },\r\n            { value: t(\"QQS tolovchi registratsiya raqami\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" }\r\n        ],\r\n        [\r\n            { value: t(\"Hisob raqami\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" },\r\n            { value: \"\", valueViewer: BoldRendered, readOnly: true, width: 100 },\r\n            { value: t(\"Hisob raqami\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" }\r\n        ],\r\n        [\r\n            { value: t(\"MFO\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" },\r\n            { value: \"\", valueViewer: BoldRendered, readOnly: true, width: 100 },\r\n            { value: t(\"MFO\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" }\r\n        ],\r\n        [\r\n            { value: t(\"Manzil\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" },\r\n            { value: \"\", valueViewer: BoldRendered, readOnly: true, width: 100 },\r\n            { value: t(\"Manzil\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" }\r\n        ],\r\n        [\r\n            { value: t(\"Direktor\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" },\r\n            { value: \"\", valueViewer: BoldRendered, readOnly: true, width: 100 },\r\n            { value: t(\"Direktor\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" }\r\n        ],\r\n        [\r\n            { value: t(\"Bosh hisobchi\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" },\r\n            { value: \"\", valueViewer: BoldRendered, readOnly: true, width: 100 },\r\n            { value: t(\"Bosh hisobchi\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" }\r\n        ],\r\n        [\r\n            {value: \"Ishonchnoma\", colSpan: 5, readOnly: true}\r\n        ],\r\n        [\r\n            { value: t(\"Ishonchnoma raqami\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" },\r\n            { value: \"\", valueViewer: BoldRendered, readOnly: true, width: 100 },\r\n            { value: t(\"Ishonchnoma sanasi\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\", dataEditor: GridDateTime }\r\n        ],\r\n        [\r\n            { value: t(\"STIR\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" },\r\n            { value: \"\", valueViewer: BoldRendered, readOnly: true, width: 100 },\r\n            { value: t(\"Ma'sul shaxs FIO\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" }\r\n        ],\r\n        \r\n    ])\r\n    const valueRenderer = cell => cell.value;\r\n    const onDocCellsChanged = change=>{\r\n        change.forEach(({ cell, row, col, value }, index) => {\r\n            //this sets changed values\r\n            docGrid[row][col] = { ...docGrid[row][col], value };\r\n            \r\n        })\r\n        setDocGrid([...docGrid])\r\n    }\r\n    const onCellsChanged = changes => {\r\n        changes.forEach(({ cell, row, col, value }, index) => {\r\n            //this sets changed values\r\n            grid[row][col] = { ...grid[row][col], value };\r\n\r\n            //Lets calculate\r\n            let priceamount = parseFloat(grid[row][5].value) * parseFloat(grid[row][6].value);\r\n            let aksizamount = parseFloat(priceamount * grid[row][7].value / 100);\r\n\r\n            grid[row][8] = { value: isNaN(aksizamount) ? 0 : parseFloat(aksizamount), readOnly: true };\r\n\r\n            let vatamout = parseFloat(priceamount * parseFloat(grid[row][10].value) / 100);\r\n\r\n            grid[row][11] = { value: isNaN(vatamout) ? 0 : vatamout, readOnly: true }\r\n\r\n            let total = !isNaN(priceamount) ? priceamount : 0\r\n            isNaN(aksizamount) ? total = total : total += aksizamount;\r\n            isNaN(vatamout) ? total = total + 0 : total += vatamout;\r\n            isNaN(grid[row][9].value) ? total = total + 0 : total += +grid[row][9].value\r\n\r\n            grid[row][12] = { value: total, readOnly: true }\r\n\r\n\r\n        });\r\n        setGrid([...grid]);\r\n\r\n        grid.shift()\r\n\r\n        //getProducts(grid)\r\n\r\n    };\r\n\r\n    const onContextMenu = (e, cell, i, j) =>\r\n        cell.readOnly ? e.preventDefault() : null;\r\n    return (\r\n        <div>\r\n            <div className=\"factura-data-sheet-container\" style={{ margin: 15 }}>\r\n                <Datasheet\r\n                    data={docGrid}\r\n                    valueRenderer={valueRenderer}\r\n                    onContextMenu={onContextMenu}\r\n                    onCellsChanged={ onDocCellsChanged }\r\n                />\r\n            </div>\r\n            <div className=\"factura-data-sheet-container\" style={{ margin: 15, overflowX: 'auto' }}>\r\n                <Datasheet\r\n                    data={grid}\r\n                    valueRenderer={valueRenderer}\r\n                    onContextMenu={onContextMenu}\r\n                    onCellsChanged={onCellsChanged}\r\n                />\r\n\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default CreateExcelType\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\empowerment\\view\\view.component.jsx",["510","511","512","513","514","515","516","517","518","519","520","521","522"],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\empowerment\\create\\create.component.jsx",["523","524","525","526","527","528","529","530","531","532","533","534","535","536"],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\factura\\view\\view.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\utils\\main.js",["537","538","539","540","541","542","543","544"],"import moment from 'moment';\r\nimport SelectMeasureEditor from '../components/data-sheet-custom-measure-selector/custom-selector.component';\r\nimport SelectEditor from '../components/data-sheet-custom-selector/custom-selector.component';\r\nimport i18n from \"../translate\";\r\n\r\nconst t = i18n.t.bind(i18n)\r\n\r\nexport const getFileExtension = filename => {\r\n    return filename.slice((filename.lastIndexOf('.') - 1 >>> 0) + 2);\r\n}\r\n\r\nexport const FIRST_TTY_GRID_ROW = [\r\n    { readOnly: true, value: \"\", width: 50 }, //0 ordNo\r\n    { readOnly: true, value: 'Товар/хизмат лар номи*' }, //1 product name\r\n    { readOnly: true, value: \"ўлчов бирлиги.*\", dataEditor: SelectMeasureEditor }, //2 measure\r\n    { readOnly: true, value: 'миқдори' }, //3 count\r\n    { readOnly: true, value: \"Нарҳ*\", }, //4 price\r\n    { readOnly: true, value: \"Юкнинг умумий қиймати\", }, //5 total\r\n    { readOnly: true, value: 'етказиб бериш нарҳи*' }, //6 delivery cost\r\n    { readOnly: true, value: \"Юкка доир хужжатлар\", }, //7 Docs\r\n    { readOnly: true, value: \"Массани аниқлаш усули\", }, //8 weight measure method\r\n    { readOnly: true, value: \"Юк синфи\", }, //9 item class\r\n    { readOnly: true, value: \"Масса (брутто)\", }, //10 brutto weight\r\n    { readOnly: true, value: \"Масса (нетто)\", }, //11 netto weight\r\n]\r\n\r\nexport const FIRST_FACTURA_GRID_ROW = [\r\n    { readOnly: true, value: '', width: 50 },\r\n    { value: t('Tovar/xizmat nomi'), readOnly: true, width: 200 },\r\n    { value: t('Tovar/xizmatlar yagona elektron milliy katalog identifikatsiya kodi'), readOnly: true, width: 150 },\r\n    { value: t('Tovar/xizmat shtrix kodi'), readOnly: true, width: 100 },\r\n    { value: t(\"O'lchov birligi\"), readOnly: true, width: 100 },\r\n    { value: t(\"Miqdori\"), readOnly: true, width: 100 },\r\n    { value: t(\"Narxi\"), readOnly: true, width: 100 },\r\n    { value: t(\"Aksiz soliq (%)\"), readOnly: true, width: 100 },\r\n    { value: t(\"Aksiz soliq, miqdori\"), readOnly: true, width: 100 },\r\n    { value: t(\"Yetkazib berish narxi\"), readOnly: true, width: 100 },\r\n    { value: t(\"QQS (%)\"), readOnly: true, width: 100 },\r\n    { value: t(\"QQS, miqdori\"), readOnly: true, width: 100 },\r\n    { value: t(\"Umumiy summa\"), readOnly: true, width: 150 },\r\n];\r\n\r\nexport const FIRST_ACT_GRID_ROW = [\r\n    { readOnly: true, value: '', width: 50 },\r\n    { value: 'Товар/хизмат лар номи*', readOnly: true, width: 200 },\r\n    { value: 'ўлчов бирлиги.*', readOnly: true, width: 100 },\r\n    { value: \"миқдори\", readOnly: true, width: 100 },\r\n    { value: \"Нарҳ*\", readOnly: true, width: 100 },\r\n    { value: \"Total*\", readOnly: true, width: 150 },\r\n];\r\n\r\nexport const FIRST_CONTRACT_GRID_ROW = [\r\n    { readOnly: true, value: '', width: 50 },\r\n    { value: 'Товар/хизмат лар номи*', readOnly: true, width: 200 },\r\n    { value: 'Товар/хизмат лар Ягона электрон миллий каталоги бўйича идентификация коди*', readOnly: true, width: 150 },\r\n    { value: 'Товар/хизмат штрих коди', readOnly: true, width: 100 },\r\n    { value: 'ўлчов бирлиги.*', readOnly: true, width: 100 },\r\n    { value: \"миқдори\", readOnly: true, width: 100 },\r\n    { value: \"Нарҳ*\", readOnly: true, width: 100 },\r\n    { value: \"етказиб бериш нарҳи*\", readOnly: true, width: 100 },\r\n    { value: \"Total*\", readOnly: true, width: 150 },\r\n];\r\n\r\nexport const FIRST_EMPOWERMENT_GRID_ROW = [\r\n    { readOnly: true, value: '', width: 50 },\r\n    { value: 'Товар/хизмат лар номи*', readOnly: true, width: 200 },\r\n    { value: 'ўлчов бирлиги.*', readOnly: true, width: 100 },\r\n    { value: \"миқдори\", readOnly: true, width: 100 },\r\n]\r\n\r\nexport const SAMPLE_FACTURA_GRID_ROW = [\r\n    { readOnly: true, value: 1 }, //0 ordNo\r\n    { value: \"\" }, //1 product name\r\n    { value: \"\", dataEditor: SelectEditor }, //2 catalogCode\r\n    { value: \"\" }, //3 shrix code\r\n    { value: \"\", dataEditor: SelectMeasureEditor }, //4 measure\r\n    { value: '' }, //5 amount\r\n    { value: \"\", }, //6 price\r\n    { value: '' }, //7 aksiz rate\r\n    { value: '', readOnly: true }, //8 aksiz amount\r\n    { value: '' }, //9 delivery cost\r\n    { value: \"\" }, //10 VAT rate\r\n    { value: '', readOnly: true }, //11 VAT amount\r\n    { value: '', readOnly: true, }, //12 total\r\n]\r\n\r\nexport const SAMPLE_CONTRACT_GRID_ROW = [\r\n    { readOnly: true, value: 1 }, //0 ordNo\r\n    { value: \"\" }, //1 product name\r\n    { value: \"\", dataEditor: SelectEditor }, //2 catalogCode\r\n    { value: \"\" }, //3 shrix code\r\n    { value: \"\", dataEditor: SelectMeasureEditor }, //4 measure\r\n    { value: '' }, //5 amount\r\n    { value: \"\", }, //6 price\r\n    { value: '' }, //7 delivery cost\r\n    { value: '', readOnly: true, }, //8 total\r\n]\r\n\r\nexport const convertProductsToGrid = (products, doc = \"factura\") => {\r\n\r\n    let gridProducts;\r\n\r\n    switch (doc) {\r\n\r\n        case \"empowerment\":\r\n            {\r\n                gridProducts = products.map(product =>[\r\n                    { readOnly: true, value: product[\"OrdNo\"], width: 50 },\r\n                    { value: product[\"Name\"] },\r\n                    { value: product[\"MeasureId\"], dataEditor: SelectMeasureEditor },\r\n                    { value: product[\"Count\"] },\r\n                ])\r\n                gridProducts.unshift(FIRST_EMPOWERMENT_GRID_ROW);\r\n                return gridProducts\r\n            }\r\n            break;\r\n\r\n        case \"act\":\r\n            {\r\n                gridProducts = products.map(product => {\r\n                    return [\r\n                        { readOnly: true, value: product[\"ordNo\"], width: 50 },\r\n                        { value: product[\"name\"] },\r\n                        { value: product[\"measureId\"], dataEditor: SelectMeasureEditor },\r\n                        { value: product[\"count\"] },\r\n                        { value: product[\"price\"] },\r\n                        { value: parseFloat(product[\"count\"]) * parseFloat(product[\"price\"]), readOnly: true, width: 150 },\r\n                    ]\r\n                })\r\n                gridProducts.unshift(FIRST_ACT_GRID_ROW);\r\n            }\r\n            break;\r\n        case \"contract\":\r\n            {\r\n\r\n                gridProducts = products.map(product => {\r\n                    return [\r\n                        { readOnly: true, value: product[\"ordNo\"] }, //0 ordNo\r\n                        { value: product[\"name\"] }, //1 product name\r\n                        { value: product[\"catalogCode\"], dataEditor: SelectEditor }, //2 catalogCode\r\n                        { value: product[\"barCode\"] }, //3 shrix code\r\n                        { value: product[\"measureId\"], dataEditor: SelectMeasureEditor },\r\n                        { value: product[\"count\"] }, //5 amount\r\n                        { value: product[\"price\"], }, //6 price\r\n                        { value: product[\"deliverySum\"] }, //9 delivery cost\r\n                        {\r\n                            value: product[\"count\"] * product[\"price\"] + parseFloat(product[\"deliverySum\"]),\r\n                            readOnly: true\r\n                        }\r\n                    ]\r\n                })\r\n                gridProducts.unshift(FIRST_CONTRACT_GRID_ROW);\r\n            }\r\n            break;\r\n\r\n        case \"tty\":\r\n            {\r\n                gridProducts = products.map((product, index) => {\r\n                    return [\r\n                        { readOnly: true, value: index + 1, width: 50 }, //0 ordNo\r\n                        { value: product.name }, //1 product name\r\n                        { value: product.measureId, dataEditor: SelectMeasureEditor }, //2 measure\r\n                        { value: product.count }, //3 count\r\n                        { value: product.price }, //4 price\r\n                        { value: product.count * product.price, readOnly: true }, //5 total\r\n                        { value: product.deliveryCost }, //6 delivery cost\r\n                        { value: product.docs, }, //7 Docs\r\n                        { value: product.weightMeasureMethod, }, //8 weight measure method\r\n                        { value: product.itemClass, }, //9 item class\r\n                        { value: product.weightBrut, }, //10 brutto weight\r\n                        { value: product.weightNet, }, //11 netto weight\r\n                    ]\r\n                })\r\n                gridProducts.unshift(FIRST_TTY_GRID_ROW);\r\n            }\r\n            break;\r\n\r\n        default:\r\n            {\r\n                gridProducts = products.map(product => {\r\n                    return [\r\n                        { readOnly: true, value: product[\"ordNo\"] }, //0 ordNo\r\n                        { value: product[\"name\"] }, //1 product name\r\n                        { value: product[\"catalogCode\"], dataEditor: SelectEditor }, //2 catalogCode\r\n                        { value: product[\"barCode\"] }, //3 shrix code\r\n                        { value: product[\"measureId\"], dataEditor: SelectMeasureEditor }, //4 measure\r\n                        { value: product[\"count\"] }, //5 amount\r\n                        { value: product[\"baseSumma\"], }, //6 price\r\n                        { value: product[\"exciseRate\"] }, //7 aksiz rate\r\n                        { value: product[\"exciseSum\"], readOnly: true }, //8 aksiz amount\r\n                        { value: product[\"deliverySum\"] }, //9 delivery cost\r\n                        { value: product[\"vatRate\"] }, //10 VAT rate\r\n                        { value: product[\"vatRate\"] * product[\"baseSumma\"], readOnly: true }, //11 VAT amount\r\n                        { value: product[\"summa\"], readOnly: true, }, //12 total\r\n                    ]\r\n                })\r\n                gridProducts.unshift(FIRST_FACTURA_GRID_ROW);\r\n            }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    return gridProducts;\r\n}\r\n\r\nconst FACTURA_PRODUCT_FIELDS = {\r\n    0: \"ordNo\",\r\n\r\n}\r\n\r\n//#region Rich text editr configs\r\nexport const modules = {\r\n    toolbar: [\r\n        ['bold', 'italic', 'underline', 'strike'], // toggled buttons\r\n        ['blockquote', 'code-block'],\r\n        ['image', 'link'],\r\n\r\n        //[{ 'header': 1 }, { 'header': 2 }],               // custom button values\r\n        [{ 'list': 'ordered' }, { 'list': 'bullet' }],\r\n        [{ 'script': 'sub' }, { 'script': 'super' }], // superscript/subscript\r\n        [{ 'indent': '-1' }, { 'indent': '+1' }], // outdent/indent\r\n        //[{ 'direction': 'rtl' }],                         // text direction\r\n\r\n        [{ 'size': ['small', false, 'large', 'huge'] }], // custom dropdown\r\n        [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\r\n\r\n        [{ 'color': [] }, { 'background': [] }], // dropdown with defaults from theme\r\n        [{ 'font': [] }],\r\n        [{ 'align': [] }],\r\n        ['clean'] // remove formatting button\r\n    ],\r\n    imageDrop: true,\r\n}\r\n\r\nexport const formats = [\r\n    'header',\r\n    'bold', 'italic', 'underline', 'strike', 'blockquote',\r\n    'list', 'bullet', 'indent',\r\n    'link', 'image', 'code-block', 'color', 'background',\r\n    'size', 'align', 'direction', 'indent', 'font', 'script'\r\n];\r\n\r\nexport const modulesForQuestion = {\r\n    toolbar: [\r\n        ['bold', 'italic', 'underline', ], // toggled buttons\r\n        ['code-block'],\r\n        ['image'],\r\n\r\n        //[{ 'header': 1 }, { 'header': 2 }],               // custom button values\r\n        [{ 'list': 'ordered' }, { 'list': 'bullet' }],\r\n\r\n        ['clean'] // remove formatting button\r\n    ],\r\n    imageDrop: true,\r\n}\r\n\r\nexport const formatsForQuestion = [\r\n        'bold', 'italic', 'underline',\r\n        'list', 'bullet',\r\n        'image', 'code-block',\r\n    ]\r\n    //#endregion \r\n\r\n\r\nexport const getValidFileName = (fileName) => {\r\n    return fileName.replace(/[\\/|\\\\\\s:*!?\"<>]/g, \"_\")\r\n}","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\factura-draft\\factura-draft.action.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\common\\seller-form.component.jsx",["545"],"import React, { Fragment } from 'react';\r\nimport { Input, Form, Row, Col } from 'antd';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectCurrentUser } from '../../redux/user/user.selector';\r\nimport { connect } from 'react-redux';\r\nimport PersonFetch from './person-fetch/person-fetch.component';\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst SellerForm = ({ user, docType, form }) => {\r\n\r\n    const {t} = useTranslation();\r\n\r\n  const { tin, name, fullName, regCode, mfo, bank_account, address, director_fio, director_tin, accountant, phone } = user;\r\n\r\n  return (\r\n    <div>\r\n\r\n      <h3>{t(\"Sizning ma'lumotlaringiz\")}</h3>\r\n\r\n      {\r\n        docType==\"contract\" ?\r\n        <PersonFetch\r\n        form={form}\r\n        nameCol={11}\r\n        tinCol={11}\r\n        tinLabel={t(\"Jis.Shaxs STIR\")}\r\n        nameLabel={t(\"Jis.Shaxs FIO\")}\r\n        pTin=\"sellerFizTin\"\r\n        pName=\"sellerFizFio\"\r\n      />\r\n      : null\r\n      }\r\n      \r\n\r\n      <Form.Item>\r\n        <Form.Item\r\n          key=\"dyna-form-item-inn-seller\"\r\n          name=\"sellerTin\"\r\n          rules={[{ required: true }]}\r\n          initialValue={tin}>\r\n          <Input\r\n            disabled\r\n            size=\"large\"\r\n            placeholder={t(\"STIR\")} />\r\n        </Form.Item>\r\n        <span className=\"custom-input-label-1\">{t(\"STIR\")}</span>\r\n      </Form.Item>\r\n      {\r\n        docType !== \"contract\" ?\r\n          <h3>{t(\"Tashkilot\")}</h3>\r\n          : null\r\n      }\r\n      <Form.Item>\r\n        <Form.Item\r\n          key=\"seller-name-1-sellerName\"\r\n          rules={[{ required: true }]}\r\n          name=\"sellerName\"\r\n          initialValue={name ?? fullName}>\r\n          <Input\r\n\r\n            size=\"large\"\r\n            placeholder={t(\"Sotuvchi nomi\")} />\r\n        </Form.Item>\r\n        <span className=\"custom-input-label-1\">{t(\"Sotuvchi nomi\")}</span>\r\n      </Form.Item>\r\n      {\r\n        docType !== \"act\" ?\r\n          <Fragment>\r\n            {\r\n              docType === \"contract\" || docType === \"empowerment\"\r\n                ? null\r\n                : <Form.Item>\r\n                  <Form.Item\r\n                    key=\"seler-account-vatreg\"\r\n                    name=\"sellerVatRegCode\"\r\n                    initialValue={regCode}>\r\n                    <Input\r\n                      size=\"large\"\r\n                      placeholder={t(\"QQS tolovchi registratsiya raqami\")} />\r\n                  </Form.Item>\r\n                  <span className=\"custom-input-label-1\">{t(\"QQS tolovchi registratsiya raqami\")}</span>\r\n                </Form.Item>\r\n            }\r\n\r\n            <Row justify=\"space-between\">\r\n              <Col md={11} >\r\n                <Form.Item>\r\n                  <Form.Item\r\n                    key=\"seler-account\"\r\n                    name=\"sellerAccount\"\r\n                    initialValue={bank_account}>\r\n                    <Input\r\n                      size=\"large\"\r\n                      placeholder={t(\"Hisob raqami\")} />\r\n                  </Form.Item>\r\n                  <span className=\"custom-input-label-1\">{t(\"Hisob raqami\")}</span>\r\n                </Form.Item>\r\n              </Col>\r\n              <Col md={11}>\r\n                {\r\n                  docType === \"contract\"\r\n                    ? <Form.Item>\r\n                      <Form.Item\r\n                        key=\"seler-account\"\r\n                        name=\"sellerMobilePhone\"\r\n                        initialValue={phone}>\r\n                        <Input\r\n                          size=\"large\"\r\n                          placeholder={t(\"Telfon raqam\")} />\r\n                      </Form.Item>\r\n                      <span className=\"custom-input-label-1\">{t(\"Telfon raqam\")}</span>\r\n                    </Form.Item>\r\n                    : <Form.Item>\r\n                      <Form.Item\r\n                        key=\"seler-account\"\r\n                        name=\"sellerMfo\"\r\n                        initialValue={mfo}>\r\n                        <Input\r\n                          size=\"large\"\r\n                          placeholder={t(\"MFO\")} />\r\n                      </Form.Item>\r\n                      <span className=\"custom-input-label-1\">{t(\"MFO\")}</span>\r\n                    </Form.Item>\r\n                }\r\n\r\n              </Col>\r\n            </Row>\r\n            <Form.Item>\r\n              <Form.Item\r\n                key=\"seler-account\"\r\n                name=\"sellerAddress\"\r\n                initialValue={address}>\r\n                <Input\r\n                  rules={[{ required: true }]}\r\n                  size=\"large\"\r\n                  placeholder={t(\"Manzil\")} />\r\n              </Form.Item>\r\n              <span className=\"custom-input-label-1\">{t(\"Manzil\")}</span>\r\n            </Form.Item>\r\n            <Row justify=\"space-between\">\r\n              <Col md={11} >\r\n                <Form.Item>\r\n                  <Form.Item\r\n                    key=\"seler-account\"\r\n                    name=\"sellerDirector\"\r\n                    initialValue={director_fio}>\r\n                    <Input\r\n                      size=\"large\"\r\n                      placeholder={t(\"Direktor\")} />\r\n                  </Form.Item>\r\n                  <span className=\"custom-input-label-1\">{t(\"Direktor\")}</span>\r\n                </Form.Item>\r\n              </Col>\r\n              <Col md={11}>\r\n                {\r\n                  docType === \"contract\"\r\n                    ? \r\n                    <Form.Item>\r\n                      <Form.Item\r\n                        key=\"seler-account\"\r\n                        name=\"sellerDirectorTin\"\r\n                        initialValue={director_tin}>\r\n                        <Input\r\n                          size=\"large\"\r\n                          placeholder={t(\"Direktor\") + \" \" + t(\"STIR\")} />\r\n                      </Form.Item>\r\n                      <span className=\"custom-input-label-1\">{t(\"Direktor\")+ \" \" +t(\"STIR\")}</span>\r\n                    </Form.Item>\r\n                    : <Form.Item>\r\n                      <Form.Item\r\n                        key=\"seler-account\"\r\n                        name=\"sellerAccountant\"\r\n                        initialValue={accountant}>\r\n                        <Input\r\n                          size=\"large\"\r\n                          placeholder={t(\"Bosh hisobchi\")} />\r\n                      </Form.Item>\r\n                      <span className=\"custom-input-label-1\">{t(\"Bosh hisobchi\")}</span>\r\n                    </Form.Item>\r\n                }\r\n              </Col>\r\n            </Row>\r\n          </Fragment>\r\n          : null\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  user: selectCurrentUser\r\n})\r\n\r\nexport default connect(mapStateToProps)(SellerForm);\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\factura-draft\\factura-draft.selector.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\sevices\\getToken.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\models\\FacturaProduct.js",["546"],"import SelectMeasureEditor from \"../../components/data-sheet-custom-measure-selector/custom-selector.component\";\r\nimport SelectEditor from '../../components/data-sheet-custom-selector/custom-selector.component'\r\nimport { ProductValueRendered } from '../factura/create/product-grid.component';\r\nexport default class FacturaProduct {\r\n    \"OrdNo\"= 1;\r\n    \"CommittentName\"= null;\r\n    \"CommittentTin\"= \"\";\r\n    \"CommittentVatRegCode\"= \"\";\r\n    \"CatalogCode\"= \"\";\r\n    \"CatalogName\"= \"\";\r\n    \"Barcode\"= \"\";\r\n    \"Name\"= \"\";\r\n    \"Serial\"= \"\";\r\n    \"MeasureId\"= \"\";\r\n    \"BaseSumma\"= \"\";\r\n    \"ProfitRate\"= \"\";\r\n    \"Count\"=\"\";\r\n    \"Summa\"= \"\";\r\n    \"DeliverySum\"= \"\";\r\n    \"ExciseRate\"= \"\";\r\n    \"ExciseSum\"= \"\";\r\n    \"VatRate\"= \"0\";\r\n    \"VatSum\"= \"0\";\r\n    \"DeliverySumWithVat\"= \"\";\r\n    \"WithoutVat\"= true;\r\n    \"Marks\"= {\r\n        \"ProductType\": null,\r\n        \"KIZ\": [\r\n            \r\n        ],\r\n        \"NomUpak\": [\r\n            \r\n        ],\r\n        \"IdentTransUpak\": [\r\n            \r\n        ]\r\n    }\r\n}\r\n\r\nconst product_property_order = [\r\n    \"OrdNo\",\r\n    \"Name\",\r\n    [\r\n        \"CatalogCode\",\r\n        \"CatalogName\"\r\n    ],\r\n    \"Barcode\",\r\n    \"MeasureId\",\r\n    \"Count\",\r\n    \"BaseSumma\",\r\n    \"ExciseRate\",\r\n    \"ExciseSum\",\r\n    \"DeliverySum\",\r\n    \"VatRate\",\r\n    \"VatSum\",\r\n    \"DeliverySumWithVat\"\r\n]\r\n\r\nexport const ConvertGridToProduct = (data, Tin, FacturaId)=>{\r\n\r\n    let res = [];\r\n    let HasVat = false;\r\n    let HasExcise = false;\r\n    let HasCommittent = false;\r\n    let HasMedical = false;\r\n\r\n    if(Array.isArray(data)){\r\n\r\n        let WithoutVat=false;\r\n\r\n        data.forEach(row=>{\r\n            let p = new FacturaProduct();\r\n\r\n            product_property_order.forEach((prop, index)=>{\r\n                if(Array.isArray(prop)){\r\n                    prop.forEach(subProp=>{\r\n                        p[subProp]=row[index].value[subProp]\r\n                    })\r\n                }\r\n                else{\r\n                    p[prop] = row[index].value\r\n                }\r\n            })\r\n\r\n            if(p.VatRate>0){\r\n                WithoutVat=false;\r\n                HasVat=true;\r\n            }\r\n            if(p.ExciseRate>0){\r\n                HasExcise=true;\r\n            }\r\n\r\n            res.push(p)\r\n        })\r\n    }\r\n\r\n    return {\r\n        FacturaId,\r\n        Tin,\r\n        HasCommittent,\r\n        HasVat,\r\n        HasMedical,\r\n        HasExcise,\r\n        Products: res\r\n    }\r\n\r\n}\r\n\r\nexport const ConvertProductToGrid = products=>{\r\n    \r\n        let res = products.map(product => [\r\n            { readOnly: true, value: product.OrdNo }, //0 ordNo\r\n            { value: product.Name }, //1 product name\r\n            { value: {classCode: product.CatalogCode, className: product.CatalogName}, dataEditor: SelectEditor, valueViewer: ProductValueRendered }, //2 catalogCode\r\n            { value: product.Barcode }, //3 shrix code\r\n            { value: product.MeasureId, dataEditor: SelectMeasureEditor }, //4 measure\r\n            { value: product.Count }, //5 amount\r\n            { value: product.BaseSumma, }, //6 price\r\n            { value: product.ExciseRate }, //7 aksiz rate\r\n            { value: product.ExciseSum, readOnly: true }, //8 aksiz amount\r\n            { value: product.DeliverySum }, //9 delivery cost\r\n            { value: product.VatRate }, //10 VAT rate\r\n            { value: product.VatSum, readOnly: true }, //11 VAT amount\r\n            { value: product.DeliverySumWithVat, readOnly: true }, //12 total\r\n        ])\r\n        return res\r\n}","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\models\\Factura.js",["547","548","549","550","551"],"export default class Factura {\r\n    \"Version\"= 1;\r\n    \"FacturaType\"= null;\r\n    \"SingleSidedType\"= null;\r\n    \"HasMarking\"= true;\r\n    \"AgreeToFine\"= false;\r\n    \"FacturaId\"= \"\";\r\n    \"FacturaDoc\"= {\r\n        \"FacturaNo\": null,\r\n        \"FacturaDate\": null\r\n    }\r\n    \"OldFacturaDoc\"= {\r\n        \"OldFacturaId\": null,\r\n        \"OldFacturaNo\": null,\r\n        \"OldFacturaDate\": null\r\n    }\r\n    \"ContractDoc\"= {\r\n        \"ContractNo\": null,\r\n        \"ContractDate\": null\r\n    }\r\n    \"FacturaEmpowermentDoc\"= {\r\n        \"AgentFacturaId\": null,\r\n        \"EmpowermentNo\": null,\r\n        \"EmpowermentDateOfIssue\": null,\r\n        \"AgentFio\": null,\r\n        \"AgentTin\": null,\r\n        \"AgentPinfl\": null\r\n    }\r\n    \"ItemReleasedDoc\"= {\r\n        \"ItemReleasedTin\": null,\r\n        \"ItemReleasedFio\": null,\r\n        \"ItemReleasedPinfl\": null\r\n    }\r\n    \"SellerTin\"= null;\r\n    \"BuyerTin\"= null;\r\n    \"Seller\"= {\r\n        \"Name\": null,\r\n        \"Account\": null,\r\n        \"BankId\": null,\r\n        \"Address\": null,\r\n        \"Mobile\": null,\r\n        \"WorkPhone\": null,\r\n        \"Oked\": null,\r\n        \"DistrictId\": null,\r\n        \"Director\": null,\r\n        \"Accountant\": null,\r\n        \"VatRegCode\": null,\r\n        \"BranchCode\": null,\r\n        \"BranchName\": null\r\n    }\r\n    \"Buyer\"= {\r\n        \"Name\": null,\r\n        \"Account\": \"\",\r\n        \"BankId\": \"\",\r\n        \"Address\": null,\r\n        \"Mobile\": null,\r\n        \"WorkPhone\": null,\r\n        \"Oked\": \"\",\r\n        \"DistrictId\": null,\r\n        \"Director\": null,\r\n        \"Accountant\": \"\",\r\n        \"VatRegCode\": \"\",\r\n        \"BranchCode\": \"\",\r\n        \"BranchName\": \"\"\r\n    }\r\n    \"ForeignCompany\"= {\r\n        \"CountryId\": null,\r\n        \"Name\": null,\r\n        \"Address\": null,\r\n        \"Bank\": null,\r\n        \"Account\": null\r\n    }\r\n    \"ProductList\"=null\r\n}\r\n\r\nexport const GetFacturaDataToSign = (data, products, FacturaId) => {\r\n\r\n    let { \r\n        agentFio,\r\n        agentTin,\r\n        buyerAccount,\r\n        buyerAccountant,\r\n        buyerAddress,\r\n        buyerDirector,\r\n        buyerMfo,\r\n        buyerName,\r\n        buyerTin,\r\n        buyerVatRegCode,\r\n        contractDate,\r\n        contractNo,\r\n        empowermentDateOfIssue,\r\n        empowermentNo,\r\n        facturaDate,\r\n        facturaNo,\r\n        facturaType,\r\n        oldFacturaId,\r\n        oldFacturaNo,\r\n        oldFacturaDate,\r\n        sellerAccount,\r\n        sellerAccountant,\r\n        sellerAddress,\r\n        sellerDirector,\r\n        sellerMfo,\r\n        sellerName,\r\n        sellerTin,\r\n        sellerVatRegCode,\r\n        singleSidedType, \r\n    } = data\r\n\r\n    let Buyer = {\r\n        \"Name\": buyerName,\r\n        \"Account\": buyerAccount,\r\n        \"BankId\": buyerMfo,\r\n        \"Address\": buyerAddress,\r\n        \"Mobile\": \"\",\r\n        \"WorkPhone\": \"\",\r\n        \"Oked\": \"\",\r\n        \"DistrictId\": \"\",\r\n        \"Director\": buyerDirector,\r\n        \"Accountant\": buyerAccountant,\r\n        \"VatRegCode\": buyerVatRegCode,\r\n        \"BranchCode\": \"\",\r\n        \"BranchName\": \"\"\r\n\r\n    }\r\n    let Seller = {\r\n        \"Name\": sellerName,\r\n        \"Account\": sellerAccount,\r\n        \"BankId\": sellerMfo,\r\n        \"Address\": sellerAddress,\r\n        \"Mobile\": \"\",\r\n        \"WorkPhone\": \"\",\r\n        \"Oked\": \"\",\r\n        \"DistrictId\": \"\",\r\n        \"Director\": sellerDirector,\r\n        \"Accountant\": sellerAccountant,\r\n        \"VatRegCode\": sellerVatRegCode,\r\n        \"BranchCode\": \"\",\r\n        \"BranchName\": \"\"\r\n    }\r\n\r\n    let f = new Factura();\r\n\r\n    f.OldFacturaDoc = {\r\n        OldFacturaDate: oldFacturaDate,\r\n        OldFacturaId: oldFacturaId,\r\n        OldFacturaNo: oldFacturaNo\r\n    }\r\n\r\n    f.SingleSidedType=singleSidedType;\r\n    f.FacturaProductId=FacturaId;\r\n    f.FacturaId=FacturaId;\r\n    f.FacturaType=facturaType\r\n    f.FacturaDoc={\r\n        FacturaDate: facturaDate,\r\n        FacturaNo: facturaNo,\r\n    }\r\n    f.Seller=Seller;\r\n    f.Buyer = Buyer;\r\n    f.BuyerTin = buyerTin;\r\n    f.SellerTin=sellerTin;\r\n\r\n    f.ContractDoc={\r\n        ContractDate: contractDate,\r\n        ContractNo: contractNo,\r\n    }\r\n    f.FacturaEmpowermentDoc={\r\n        EmpowermentDateOfIssue: empowermentDateOfIssue,\r\n        EmpowermentNo: empowermentNo,\r\n        AgentFio: agentFio,\r\n        AgentTin: agentTin,\r\n    }\r\n    f.ProductList=products;\r\n    \r\n    return f;\r\n}\r\n//for editing forms\r\nexport const FacturaDataToForm = data=>{\r\n    \r\n    let { \r\n        Buyer, \r\n        Seller,\r\n        ContractDoc,\r\n        FacturaDoc,\r\n        FacturaEmpowermentDoc,\r\n        FacturaId,\r\n        FacturaProductId,\r\n        ForeignCompany,\r\n        BuyerTin,\r\n        SellerTin,\r\n        ProductList,\r\n        FacturaType,\r\n        OldFacturaDoc,\r\n        SingleSidedType\r\n    } = data;\r\n\r\n    let f = {\r\n        agentFio: FacturaEmpowermentDoc.AgentFio,\r\n        agentTin: FacturaEmpowermentDoc.AgentTin,\r\n        buyerAccount: Buyer.Account,\r\n        buyerAccountant: Buyer.Accountant,\r\n        buyerAddress: Buyer.Address,\r\n        buyerDirector: Buyer.Director,\r\n        buyerMfo: Buyer.BankId,\r\n        buyerName: Buyer.Name,\r\n        buyerTin: BuyerTin,\r\n        buyerVatRegCode: Buyer.VatRegCode,\r\n        contractDate: ContractDoc.ContractDate,\r\n        contractNo: ContractDoc.ContractNo,\r\n        empowermentDateOfIssue: FacturaEmpowermentDoc.EmpowermentDateOfIssue,\r\n        empowermentNo: FacturaEmpowermentDoc.EmpowermentNo,\r\n        facturaDate: FacturaDoc.FacturaDate,\r\n        facturaNo: FacturaDoc.FacturaNo,\r\n        facturaType: FacturaType,\r\n        oldFacturaId: OldFacturaDoc.OldFacturaId,\r\n        oldFacturaNo: OldFacturaDoc.OldFacturaNo,\r\n        oldFacturaDate: OldFacturaDoc.OldFacturaDate,\r\n        sellerAccount: Seller.Account,\r\n        sellerAccountant: Seller.Accountant,\r\n        sellerAddress: Seller.Address,\r\n        sellerDirector: Seller.Director,\r\n        sellerMfo: Seller.BankId,\r\n        sellerName: Seller.Name,\r\n        sellerTin: SellerTin,\r\n        sellerVatRegCode: Seller.VatRegCode,\r\n        singleSidedType: SingleSidedType,\r\n    }\r\n\r\n    return f;\r\n\r\n}\r\n\r\n\r\n\r\nconst formProperties = [\r\n    \"agentFio\",\r\n    \"agentTin\",\r\n    \"buyerAccount\",\r\n    \"buyerAccountant\",\r\n    \"buyerAddress\",\r\n    \"buyerDirector\",\r\n    \"buyerMfo\",\r\n    \"buyerName\",\r\n    \"buyerTin\",\r\n    \"buyerVatRegCode\",\r\n    \"contractDate\",\r\n    \"contractNo\",\r\n    \"empowermentDateOfIssue\",\r\n    \"empowermentNo\",\r\n    \"facturaDate\",\r\n    \"facturaNo\",\r\n    \"facturaProductId\",\r\n    \"facturaType\",\r\n    \"oldFacturaId\",\r\n    \"oldFacturaNo\",\r\n    \"oldFacturaDate\",\r\n    \"sellerAccount\",\r\n    \"sellerAccountant\",\r\n    \"sellerAddress\",\r\n    \"sellerDirector\",\r\n    \"sellerMfo\",\r\n    \"sellerName\",\r\n    \"sellerTin\",\r\n    \"sellerVatRegCode\",\r\n    \"singleSidedType\"\r\n]\r\n\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\sevices\\empService.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\common\\buyer-form.component.jsx",["552"],"import React, { Fragment } from 'react';\r\nimport { Input, Form, Row, Col, message, Switch, Select, Button } from 'antd';\r\nimport { CloseOutlined, CheckOutlined } from '@ant-design/icons';\r\nimport { useState } from 'react';\r\nimport axios from 'axios';\r\nimport PersonFetch from './person-fetch/person-fetch.component';\r\nimport { setActClient } from '../act/create/create.component';\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst BuyerForm = ({ form, docType, remove, fieldList }) => {\r\n\r\n  const {t} = useTranslation();\r\n  const [isFacturaSingleSided, setIsFacturaSingleSided] = useState(false);\r\n  const [buyerBranches, setBuyerBranches] = useState([]);\r\n\r\n  const handleSingleSided = (value) => {\r\n    setIsFacturaSingleSided(value)\r\n  }\r\n\r\n  const handleFetchBuyer = e => {\r\n    console.log(e.target.value)\r\n    if (!isNaN(e.target.value)) {\r\n      if (e.target.value > 100000000 && e.target.value <= 999999999) {\r\n        axios({\r\n          url: \r\n          `info/contragent-by-tin?tin=${e.target.value}`,\r\n          method: \"GET\",\r\n         \r\n        }).then(res => {\r\n          const { \r\n            tin, \r\n            accountant, \r\n            account, \r\n            address, \r\n            phone, \r\n            name, \r\n            fullName, \r\n            mfo, \r\n            director,\r\n            directorTin, \r\n            regCode } = res.data;\r\n\r\n          let data = {\r\n            buyerTin: tin,\r\n            buyerAccountant: accountant,\r\n            buyerAccount: account,\r\n            buyerAddress: address,\r\n            buyerMobilePhone: phone,\r\n            buyerName: name ?? fullName,\r\n            buyerMfo: mfo,\r\n            buyerDirector: director,\r\n            buyerDirectorTin: directorTin,\r\n            buyerVatRegCode: regCode\r\n          }\r\n\r\n          if(docType===\"act\"){\r\n            form.setFieldsValue({\r\n              actText: setActClient(form.getFieldValue(\"SellerName\"), name ?? fullName)\r\n            })\r\n          }\r\n\r\n\r\n          if(fieldList){\r\n            let fetcherData = form.getFieldValue(\"contract_partners\");\r\n            \r\n            fetcherData[fieldList.name] = {...fetcherData[fieldList.name], ...data}\r\n\r\n            setBuyerBranches(res.data.branches ?? []);\r\n\r\n            form.setFieldsValue({contract_partners: [...fetcherData]})\r\n          }else{\r\n            \r\n            form.setFieldsValue(data)\r\n          }\r\n         \r\n        }).catch(err => {\r\n          console.log(err)\r\n        })\r\n      } else {\r\n        form.setFieldsValue({\r\n          buyerAccountant: null,\r\n          buyerAccount: null,\r\n          buyerAddress: null,\r\n          buyerMobilePhone: null,\r\n          buyerName: null,\r\n          buyerMfo: null,\r\n          buyerDirector: null,\r\n          buyerVatRegCode: null\r\n        })\r\n      }\r\n    } else {\r\n      message.warning(t(\"STIR notog'ri kiritildi!\"))\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      \r\n      <h3>{t(\"Kontragent ma'lumotlari\")}</h3>\r\n      {\r\n        docType ===\"contract\"\r\n        ? <PersonFetch \r\n          form={form} \r\n          pTin={fieldList ? [fieldList.name,\"buyerPhysicalTin\"] : \"buyerPhysicalTin\"} \r\n          pName={fieldList ? [fieldList.name, \"buyerPhysicalFio\"] : \"buyerPhysicalFio\"} \r\n          tinLabel={t(\"Jis. Shaxs STIR\")} nameLabel={t(\"Jis. Shaxs FIO\")} tinCol={11} nameCol={11} />\r\n        : null\r\n      }\r\n      \r\n      <Row justify=\"space-between\">\r\n        <Col md={docType !== \"factura\" ? 24 : 11}>\r\n          <Form.Item>\r\n            <Form.Item\r\n              key={fieldList ? `dyna-form-item-inn-Buyer-${fieldList.key}` : \"dyna-form-item-inn-Buyer\"}\r\n              name={fieldList ? [fieldList.name,\"buyerTin\"] : \"buyerTin\"}\r\n              \r\n            >\r\n              <Input\r\n                onChange={handleFetchBuyer}\r\n                size=\"large\"\r\n                placeholder={t(\"STIR\")} />\r\n            </Form.Item>\r\n            <span className=\"custom-input-label-1\">{t(\"STIR\")}</span>\r\n          </Form.Item>\r\n        </Col>\r\n        <Col md={docType !== \"factura\" ? 0 : 11}>\r\n          <h4>{t(\"Bir tomonlama fakturami?\")}</h4>\r\n          <Switch\r\n            onChange={handleSingleSided}\r\n            checkedChildren={<CheckOutlined />}\r\n            unCheckedChildren={<CloseOutlined />}\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      {\r\n        isFacturaSingleSided ?\r\n          <div>\r\n            <h3>{t(\"Turi\")}</h3>\r\n            <Form.Item\r\n              key=\"sigle-sided-factura-type-1\"\r\n              \r\n              >\r\n              <Form.Item\r\n                name={fieldList ? [fieldList.name, \"singleSidedType\"] : \"singleSidedType\"}\r\n              >\r\n                <Select bordered={false} size=\"large\">\r\n                  <Option value={1}>На физ. лицо</Option>\r\n                  <Option value={2}>На экспорт</Option>\r\n                  <Option value={3}>На импорт</Option>\r\n                  <Option value={4}>Реализация, связанная с гос. секретом</Option>\r\n                  <Option value={5}>Финансовые услуги</Option>\r\n                </Select>\r\n\r\n              </Form.Item>\r\n              <span className=\"custom-input-label-1\">{t(\"Kontragent turi\")}</span>\r\n            </Form.Item>\r\n          </div>\r\n          : null\r\n      }\r\n\r\n      {\r\n        !isFacturaSingleSided ?\r\n          <div>\r\n            { docType==\"contract\" ? null : <h3>{t(\"Hamkor korxonasi\")}</h3> }\r\n            <Form.Item>\r\n              <Form.Item\r\n                rules={[{ required: true }]}\r\n                key=\"buyer-name-1-BuyerName\"\r\n                name={fieldList ? [fieldList.name,\"buyerName\"] : \"buyerName\"}\r\n              >\r\n                <Input\r\n                  onChange={val=>{\r\n                    form.setFieldsValue({\r\n                      actText: setActClient(form.getFieldValue(\"SellerName\"), val.target.value)})\r\n                    }\r\n                  }\r\n                  size=\"large\"\r\n                  placeholder={t(\"Nomi\")} />\r\n              </Form.Item>\r\n              <span className=\"custom-input-label-1\">{t(\"Nomi\")}</span>\r\n            </Form.Item>\r\n            {\r\n              docType !== \"act\" ?\r\n                <Fragment>\r\n                  {\r\n                    docType === \"contract\" || docType === \"empowerment\"\r\n                      ? null\r\n                      : <Form.Item>\r\n                        <Form.Item\r\n                          key=\"seler-account-vatreg\"\r\n                          name={fieldList ? [fieldList.name, \"buyerVatRegCode\"] : \"buyerVatRegCode\"}\r\n                        >\r\n                          <Input\r\n                            size=\"large\"\r\n                            placeholder={t(\"QQS tolovchi registratsiya raqami\")}\r\n                          />\r\n                        </Form.Item>\r\n                        <span className=\"custom-input-label-1\">{t(\"QQS tolovchi registratsiya raqami\")}</span>\r\n                      </Form.Item>\r\n                  }\r\n\r\n                  <Row justify=\"space-between\">\r\n                    <Col md={11} >\r\n                      <Form.Item>\r\n                        <Form.Item\r\n                          key=\"seler-account\"\r\n\r\n                          name={fieldList ? [fieldList.name,\"buyerAccount\"] : \"buyerAccount\"}\r\n                          >\r\n                          <Input\r\n                            size=\"large\"\r\n                            placeholder={t(\"Hisob raqami\")} />\r\n                        </Form.Item>\r\n                        <span className=\"custom-input-label-1\">{t(\"Hisob raqami\")}</span>\r\n                      </Form.Item>\r\n                    </Col>\r\n\r\n                    <Col md={11}>\r\n                      {\r\n                        docType === \"contract\"\r\n                          ? <Form.Item>\r\n                          <Form.Item\r\n                            key=\"seler-account\"\r\n                            name={fieldList ? [fieldList.name,\"buyerMobilePhone\"] : \"buyerMobilePhone\"}\r\n                          >\r\n                            <Input\r\n                              size=\"large\"\r\n                              placeholder={t(\"Telfon raqam\")}\r\n                            />\r\n                          </Form.Item>\r\n                          <span className=\"custom-input-label-1\">{t(\"Telfon raqam\")}</span>\r\n                        </Form.Item>\r\n                          : <Form.Item>\r\n                            <Form.Item\r\n                              key=\"seler-account\"\r\n                              name={fieldList ? [fieldList.name,\"buyerMfo\"] : \"buyerMfo\"}\r\n                            >\r\n                              <Input\r\n                                size=\"large\"\r\n                                placeholder={t(\"MFO\")}\r\n                              />\r\n                            </Form.Item>\r\n                            <span className=\"custom-input-label-1\">{t(\"MFO\")}</span>\r\n                          </Form.Item>\r\n                      }\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <Form.Item>\r\n                    <Form.Item\r\n                      rules={[{ required: true }]}\r\n                      key=\"seler-account\"\r\n                      name={fieldList ? [fieldList.name,\"buyerAddress\"] : \"buyerAddress\"}\r\n                    >\r\n                      <Input\r\n                        size=\"large\"\r\n                        placeholder={t(\"Manzil\")} />\r\n                    </Form.Item>\r\n                    <span className=\"custom-input-label-1\">{t(\"Manzil\")}</span>\r\n                  </Form.Item>\r\n                    \r\n                  {\r\n                      docType===\"contract\"?\r\n                      <Col md={24} >\r\n                      <Form.Item>\r\n                        <Form.Item\r\n                          key=\"seler-account\"\r\n                          name={fieldList ? [fieldList.name,\"buyerBranch\"] : \"buyerBranch\"}\r\n                        >\r\n                          <Select\r\n                            bordered={false}\r\n                            size=\"large\"\r\n                            defaultActiveFirstOption\r\n                            placeholder=\"\">\r\n                              {buyerBranches.map(item=><Option value={item.tin}>{ item.tin } - {item.name}</Option>)}\r\n                          </Select>\r\n                        </Form.Item>\r\n                        <span className=\"custom-input-label-1\">{t(\"Filiali\")}</span>\r\n                      </Form.Item>\r\n                    </Col>\r\n                    :null\r\n                    }\r\n\r\n                  <Row justify=\"space-between\" align=\"stretch\">\r\n                    <Col md={11} >\r\n                      <Form.Item>\r\n                        <Form.Item\r\n                          key=\"seler-account\"\r\n                          name={fieldList ? [fieldList.name,\"buyerDirector\"] : \"buyerDirector\"}\r\n                        >\r\n                          <Input\r\n                            size=\"large\"\r\n                            placeholder={t(\"Direktor\")}  />\r\n                        </Form.Item>\r\n                        <span className=\"custom-input-label-1\">{t(\"Direktor\")}</span>\r\n                      </Form.Item>\r\n                    </Col>\r\n                    <Col md={11} >\r\n                      {\r\n                        docType === \"contract\"\r\n                          ? (remove && fieldList ? <Button \r\n                              className=\"factra-action-btns\" \r\n                              style={{width: '100%'}} \r\n                              danger \r\n                              size=\"large\" \r\n                              onClick={()=>remove(fieldList.name)} >\r\n                                Olib tashlash\r\n                                </Button> \r\n                                : null ) \r\n                          : <Form.Item>\r\n                            <Form.Item\r\n                              key=\"seler-account\"\r\n                              name={fieldList ? [fieldList.name,\"buyerAccountant\"] : \"buyerAccountant\"}\r\n                            >\r\n                              <Input\r\n                                size=\"large\"\r\n                                placeholder={t(\"Bosh hisobchi\")} />\r\n                            </Form.Item>\r\n                            <span className=\"custom-input-label-1\">{t(\"Bosh hisobchi\")}</span>\r\n                          </Form.Item>\r\n                      }\r\n\r\n                    </Col>\r\n                    {\r\n                    docType===\"contract\" ?\r\n                    <Col md={11}>\r\n                      <Form.Item\r\n                        key=\"seler-account-Buyer-dir-tin\"\r\n                        name={ fieldList ? [fieldList.name, \"buyerDirectorTin\"] :\"buyerDirectorTin\"}\r\n                        >\r\n                        <Input\r\n                          type=\"hidden\"\r\n                          size=\"large\"\r\n                          placeholder={t(\"Direktor\") + \" \" + t(\"STIR\")} />\r\n                      </Form.Item>\r\n                      \r\n                      </Col>\r\n                    : null\r\n                  }\r\n                  </Row>\r\n                  \r\n                  \r\n                </Fragment>\r\n                : null\r\n            }\r\n          </div>\r\n          : null\r\n      }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BuyerForm;","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\common\\person-fetch\\person-fetch.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\data-sheet-custom-selector\\custom-selector.component.jsx",["553"],"import React, { PureComponent } from 'react'\r\nimport Select from \"react-select\"\r\nimport { ENTER_KEY, TAB_KEY } from 'react-datasheet/lib/keys';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectUserProducts } from '../../redux/user/user.selector';\r\nimport { connect } from 'react-redux';\r\nimport './custom-selector.style.scss'\r\n\r\nclass SelectEditor extends PureComponent {\r\n  constructor(props) {\r\n    super(props)\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleKeyDown = this.handleKeyDown.bind(this)\r\n    this.state = {}\r\n  }\r\n\r\n  handleChange(opt) {\r\n    console.log(opt)\r\n    \r\n    const { onCommit, onRevert } = this.props\r\n    if(!opt){\r\n      onRevert()\r\n    }\r\n    const { e } = this.state\r\n    onCommit(opt.value)\r\n    console.log('COMMITTED', opt.value)\r\n  }\r\n\r\n  handleKeyDown(e) {\r\n    // record last key pressed so we can handle enter\r\n    if (e.which === ENTER_KEY || e.which === TAB_KEY) {\r\n      e.persist()\r\n      this.setState({ e })\r\n    } else {\r\n      this.setState({ e: null })\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  optionstag = this.props.userProducts.map(d => ({ label: d.className, \r\n    value: //d.classCode\r\n    { CatalogCode: d.classCode, CatalogName: d.className } \r\n  }))\r\n\r\n  render() {\r\n    return (\r\n      <Select\r\n        size=\"small\"\r\n        showSearch\r\n        autoFocus\r\n        dropdownClassName=\"class-codes-drop-down-list\"\r\n        style={{width: \"100%\"}}\r\n        dropdownMatchSelectWidth={false}\r\n        open={true}\r\n        menuPortalTarget={document.body}\r\n        styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}\r\n        value={this.state.selected}\r\n        onChange={this.handleChange}\r\n        //onSelect={this.handleChange}\r\n        onInputKeyDown={this.handleKeyDown}\r\n        options={this.optionstag}\r\n      />\r\n       \r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  userProducts: selectUserProducts\r\n})\r\n\r\nexport default connect(mapStateToProps)(SelectEditor);","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\data-sheet-custom-measure-selector\\custom-selector.component.jsx",["554","555","556","557"],"import React, { PureComponent } from \"react\";\r\nimport {ENTER_KEY, TAB_KEY} from 'react-datasheet/lib/keys';\r\nimport Select from 'react-select';\r\n\r\n\r\nexport default class SelectMeasureEditor extends PureComponent {\r\n    constructor (props) {\r\n      super(props)\r\n      this.handleChange = this.handleChange.bind(this)\r\n      this.state = {}\r\n    }\r\n  \r\n    handleChange (opt) {\r\n      const { onCommit, onRevert } = this.props\r\n      // if (!opt) {\r\n      //   return onRevert()\r\n      // }\r\n      console.log(opt)\r\n      const { e } = this.state\r\n      onCommit(opt.value)\r\n    }\r\n\r\n    render () {\r\n      return (\r\n        <Select\r\n            styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}\r\n            onChange={this.handleChange}\r\n            options={measures}\r\n            style={{width: \"100%\"}}\r\n            dropdownMatchSelectWidth={false}\r\n            open={true}\r\n            menuPortalTarget={document.body}\r\n        />\r\n\r\n      )\r\n    }\r\n  }\r\n\r\n\r\nexport const measures = [\r\n    { value: 0, label: \"boshqa\" },\r\n    {value: 1,\tlabel: \"штука\"},\r\n  {value: 2,\tlabel: \"пачка\"},\r\n  {value: 3,\tlabel: \"миллиграмм\"},\r\n  {value: 4,\tlabel: \"грамм\"},\r\n  {value: 5,\tlabel: \"килограмм\"},\r\n  {value: 6,\tlabel: \"центнер\"},\r\n  {value: 7, label:\t\" тонна\"},\r\n  {value: 8, label:\t\" миллиметр\"},\r\n  {value: 9, label:\t\"сантиметр\"},\r\n  {value:10, label:\t\"дециметр\"},\r\n  {value:11, label:\t\"метр\"},\r\n  {value:12, label:\t\"километр\"},\r\n  {value:13, label:\t\"кв. миллиметр\"},\r\n  {value:14, label:\t\"кв. сантиметр\"},\r\n  {value:15, label:\t\"кв. дециметр\"},\r\n  {value:16, label:\t\"кв. метр\"},\r\n  {value:17, label:\t\"1000 куб. метр\"},\r\n  {value:18, label:\t\"кв. километр\"},\r\n  {value:19, label:\t\"куб. дециметр\"},\r\n  {value:20, label:\t\"куб. метр\"},\r\n  {value:21, label:\t\"куб. километр\"},\r\n  {value:22, label:\t\"миллилитр\"},\r\n  {value:23, label:\t\"литр\"},\r\n  {value:24, label:\t\"дал\"},\r\n  {value:25, label:\t\"сум\"},\r\n  {value:26, label:\t\"комплект\"},\r\n  {value:27, label:\t\"сутка\"},\r\n  {value:28, label:\t\"соат\"},\r\n  {value:29, label:\t\"пар\"},\r\n  {value:30, label:\t\"флакон\"},\r\n  {value:31, label:\t\"размещение\"},\r\n  {value:32, label:\t\"показы\"},\r\n  {value:33, label:\t\"коробка\"},\r\n  {value:34, label:\t\"моточас\"},\r\n  {value:35, label:\t\"Гкал\"},\r\n  {value:36, label:\t\"кВтч\"},\r\n  {value:37, label:\t\"рейс\"},\r\n  {value:38, label:\t\"упаковка\"},\r\n  {value:39, label:\t\"минут\"},\r\n  {value:40, label:\t\"норма/час\"},\r\n  {value:41, label:\t\"баллон\"},\r\n  {value:42, label:\t\"день\"},\r\n  {value:43, label:\t\"месяц\"},\r\n  {value:44, label:\t\"мегабайт\"},\r\n  {value:45, label:\t\"серия\"},\r\n  {value:46, label:\t\"бутылка\"},\r\n  {value:47, label:\t\"кега\"},\r\n  {value:48, label:\t\"публикация\"},\r\n  {value:49, label:\t\"рулон\"},\r\n  {value:50, label:\t\"порция\"},\r\n  {value:51, label:\t\"погонный метр\"},\r\n  {value:52, label:\t\"га\"},\r\n  {value:53, label:\t\"кВарч\"},\r\n  {value:54, label:\t\"человек/час\"},\r\n  {value:55, label:\t\"кВар\"},\r\n  {value:56, label:\t\"кВт\"},\r\n  {value:57, label:\t\"год\"},\r\n  {value:58, label:\t\"лист\"},\r\n  {value:59, label:\t\"блок\"},\r\n  \r\n  ]\r\n  ","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\password-change\\password-change.component.jsx",["558"],"import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Form, Row, Col, Input, Button, message } from 'antd'\r\nimport axios from 'axios'\r\nimport React, {useState} from 'react'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { connect } from 'react-redux'\r\nimport { createStructuredSelector } from 'reselect'\r\nimport { selectLoadedKey } from '../../redux/user/user.selector'\r\nimport { EIMZOClient } from '../../utils/e-imzo'\r\nimport PaymeForm from '../payme-form/payme-form.component'\r\n\r\nconst PasswordChange = ({ loadedKey }) => {\r\n\r\n    const { t} = useTranslation();\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    \r\n    const handleFinish = values=>{\r\n        setLoading(true);\r\n        EIMZOClient.createPkcs7(\r\n            loadedKey.id,\r\n            values.password,\r\n            null,\r\n            pkcs7=>{\r\n                axios({\r\n                    url: \"user/set-password\",\r\n                    method:\"post\",\r\n                    data: {\r\n                        pkcs7: pkcs7,\r\n                        password: values.password,\r\n                        phone: values.phone\r\n                    }\r\n                })\r\n            },\r\n            (e, r)=>{\r\n                message.error(r)\r\n                console.log(\"r\",r,\"e\",e)\r\n            }\r\n            )\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Form\r\n                onFinish={handleFinish}\r\n            >\r\n                <Row justify=\"space-between\">\r\n                    \r\n                    <Col md={11}>\r\n                        <Form.Item>\r\n                            <Form.Item\r\n                                key={`dyna-form-facutura-no-old-tin`}\r\n                                name=\"password\"\r\n                            >\r\n                                <Input.Password\r\n                                    rules={[{ required: true }]}\r\n                                    size=\"large\"\r\n                                />\r\n                            </Form.Item>\r\n                            <span className=\"custom-input-label-1\">{t(\"Yangi parol\")}</span>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col md={11}>\r\n                        <Form.Item>\r\n                            <Form.Item\r\n                                key={`dyna-form-facutura-no-old-tphone`}\r\n                                name=\"phone\"\r\n                            >\r\n                                <Input\r\n                                    placeholder=\"+998 xx xxx xx xx\"\r\n                                    rules={[{ required: true }]}\r\n                                    size=\"large\"\r\n                                />\r\n                            </Form.Item>\r\n                            <span className=\"custom-input-label-1\">{(\"Telefon raqam\")}</span>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col md={11}>\r\n                        <Form.Item>\r\n                            <Form.Item\r\n                                name=\"confirm\"\r\n                                dependencies={['password']}\r\n                                hasFeedback\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Please confirm your password!',\r\n                                    },\r\n                                    ({ getFieldValue }) => ({\r\n                                        validator(_, value) {\r\n                                            if (!value || getFieldValue('password') === value) {\r\n                                                return Promise.resolve();\r\n                                            }\r\n                                            return Promise.reject(new Error('The two passwords that you entered do not match!'));\r\n                                        },\r\n                                    }),\r\n                                ]}\r\n                            >\r\n                                <Input.Password\r\n                                    rules={[{ required: true }]}\r\n                                    size=\"large\"\r\n                                />\r\n                            </Form.Item>\r\n                            <span className=\"custom-input-label-1\">Prolni tasdiqlang</span>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col md={11}>\r\n                        <Button\r\n                            htmlType=\"submit\"\r\n                            loading={loading}\r\n                            className=\"factra-action-btns sing-btn\"\r\n                            size=\"large\"\r\n                            icon={<FontAwesomeIcon icon=\"save\" className=\"factura-action-btn-icons\" />}>\r\n                            Saqlash\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    loadedKey: selectLoadedKey,\r\n})\r\n\r\nexport default connect(mapStateToProps)(PasswordChange)\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\models\\EmpowermentProduct.js",["559","560","561","562"],"import {useState} from \"react\";\r\nimport SelectMeasureEditor from \"../../components/data-sheet-custom-measure-selector/custom-selector.component\";\r\nimport MeasureViewer from \"../../components/data-sheet-custom-measure-selector/measure-viewer\";\r\nimport moment from 'moment'\r\n\r\nexport default class EmpowermentProduct{\r\n    \"OrdNo\" = 1;\r\n    \"Name\" = \"\";\r\n    \"MeasureId\" = \"\";\r\n    \"Count\"=\"\"\r\n}\r\n\r\nconst properties=[\r\n    \"OrdNo\",\r\n    \"Name\",\r\n    \"MeasureId\",\r\n    \"Count\"\r\n];\r\n\r\nexport const ConverEmpGridToData = (data) => {/*, tin, empId*/\r\n    // const [datum,setDatum]=useState([]);\r\n    let res=[];\r\n    let emp = new EmpowermentProduct();\r\n    if (Array.isArray(data)) {\r\n        data.map((row,index)=>{\r\n            if (index!==0){\r\n                properties.map((prop,i)=>{\r\n                    emp[prop]=row[i]?.value;\r\n                })\r\n                res.push({...emp})\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\n\r\nexport const ConvertEmpProductToGrid=products=>{\r\n    let res = products.map((item,index)=>[\r\n        {value:item.OrdNo,readOnly:true},\r\n        {value:item.Name},\r\n        { value: item.MeasureId, dataEditor: SelectMeasureEditor,valueViewer: MeasureViewer },\r\n        {value:item.Count}\r\n    ])\r\n    return res;\r\n}\r\nexport const ConvertEmpDataToForm=(data)=>{\r\n    let {\r\n        Agent,\r\n        Buyer,\r\n        BuyerTin,\r\n        ContractDoc,\r\n        EmpowermentDoc,\r\n        EmpowermentId,\r\n        Seller,\r\n        SellerTin,\r\n    } = data\r\n\r\n    let emp = {\r\n        agentTin:Agent.AgentTin,\r\n        agentFio:Agent.Fio,\r\n        buyerName:Buyer.Name,\r\n        buyerAddress:Buyer.Address,\r\n        buyerTin:BuyerTin,\r\n        contractNo:ContractDoc.ContractNo,\r\n        contractDate:(ContractDoc.ContractDate),\r\n        empowermentDateOfExpire:(EmpowermentDoc.EmpowermentDateOfExpire),\r\n        empowermentDateOfIssue:(EmpowermentDoc.EmpowermentDateOfIssue),\r\n        empowermentNo:EmpowermentDoc.EmpowermentNo,\r\n        empowermentId:EmpowermentId,\r\n        sellerAccount:Seller.Account,\r\n        sellerAccountant:Seller.Accountant,\r\n        sellerAddress:Seller.Address,\r\n        sellerBankId:Seller.BankId,\r\n        sellerDirector:Seller.Director,\r\n        sellerName:Seller.Name,\r\n        sellerTin:SellerTin,\r\n        agentPassportDateOfIssue:(Agent.Passport.DateOfIssue),//shu yerdagi datani moment ichiga tiqib ketaman\r\n        agentPassportNumber:Agent.Passport.Number,\r\n        agentPassportIssuedBy:Agent.Passport.IssuedBy\r\n    }\r\n    return emp;\r\n}","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\models\\Empowerment.js",["563","564","565"],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\factura\\create\\product-grid.component.jsx",["566","567","568","569","570"],"import React, { useState, useEffect } from 'react'\r\nimport Datasheet from 'react-datasheet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport SelectMeasureEditor from '../../../components/data-sheet-custom-measure-selector/custom-selector.component';\r\nimport SelectEditor from '../../../components/data-sheet-custom-selector/custom-selector.component';\r\nimport { convertProductsToGrid } from '../../../utils/main';\r\nimport {\r\n    FullscreenOutlined,\r\n    FullscreenExitOutlined,\r\n} from '@ant-design/icons';\r\nimport { Upload, Button } from 'antd';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { setUserProducts } from '../../../redux/user/user.action';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectCurrentUser, selectToken } from '../../../redux/user/user.selector';\r\nimport { connect } from 'react-redux';\r\nimport axios from 'axios';\r\nimport MeasureViewer from '../../../components/data-sheet-custom-measure-selector/measure-viewer';\r\n\r\nexport const ProductValueRendered = prop => {\r\n\r\n    const { value } = prop;\r\n    return <span>{value.CatalogName}</span>\r\n}\r\n\r\nconst FacturaProductGrid = ({ token, loadProducts, user, getProducts, initialValues }) => {\r\n\r\n    useEffect(()=>{\r\n        if(Array.isArray(initialValues)){\r\n            setGrid([\r\n                grid[0],\r\n                ...initialValues\r\n            ])\r\n        }\r\n    }, [initialValues])\r\n\r\n    useEffect(()=>{\r\n        axios({\r\n            url: `classifications/index?tin=${user.tin??user.username}`,\r\n            method: 'get'\r\n        }).then(res=>{\r\n            loadProducts(res.data.data)\r\n        }).catch(ex=>{\r\n            console.log(ex);\r\n        })\r\n    }, [])\r\n\r\n    const { t } = useTranslation();\r\n\r\n    const [fullView, toglleFullView] = useState(false)\r\n    const [grid, setGrid] = useState([\r\n        [\r\n            { readOnly: true, value: '', width: 50 },\r\n            { value: t('Tovar/xizmat nomi'), readOnly: true, width: 200 },\r\n            { value: t('Tovar/xizmatlar yagona elektron milliy katalog identifikatsiya kodi'), readOnly: true, width: 150 },\r\n            { value: t('Tovar/xizmat shtrix kodi'), readOnly: true, width: 100 },\r\n            { value: t(\"O'lchov birligi\"), readOnly: true, width: 100 },\r\n            { value: t(\"Miqdori\"), readOnly: true, width: 100 },\r\n            { value: t(\"Narxi\"), readOnly: true, width: 100 },\r\n            { value: t(\"Aksiz soliq (%)\"), readOnly: true, width: 100 },\r\n            { value: t(\"Aksiz soliq, miqdori\"), readOnly: true, width: 100 },\r\n            { value: t(\"Yetkazib berish narxi\"), readOnly: true, width: 100 },\r\n            { value: t(\"QQS (%)\"), readOnly: true, width: 100 },\r\n            { value: t(\"QQS, miqdori\"), readOnly: true, width: 100 },\r\n            { value: t(\"Umumiy summa\"), readOnly: true, width: 150 },\r\n        ],\r\n        [\r\n            { readOnly: true, value: 1 },                           //0 ordNo\r\n            { value: \"\" },                                          //1 product name\r\n            { value: \"\", dataEditor: SelectEditor, valueViewer: ProductValueRendered },                //2 catalogCode\r\n            { value: \"\" },                                          //3 shrix code\r\n            { value: \"\", dataEditor: SelectMeasureEditor, valueViewer: MeasureViewer },        //4 measure\r\n            { value: '' },                                          //5 amount\r\n            { value: \"\", },                                         //6 price\r\n            { value: '' },                                          //7 aksiz rate\r\n            { value: '', readOnly: true },                          //8 aksiz amount\r\n            { value: '' },                                          //9 delivery cost\r\n            { value: \"\" },                                          //10 VAT rate\r\n            { value: '', readOnly: true },                          //11 VAT amount\r\n            { value: '', readOnly: true, },                          //12 total\r\n        ]\r\n    ])\r\n\r\n    \r\n\r\n    const handleRemoveRow = (rowId) => {\r\n        console.log(rowId)\r\n\r\n        grid.splice(rowId, 1)\r\n        setGrid([...grid])\r\n        getProducts([...grid])\r\n\r\n    }\r\n\r\n\r\n    const handleImportExecl = (value) => {\r\n\r\n        \r\n        if (value.file.status == \"done\") {\r\n\r\n            const { response } = value.file\r\n\r\n            // response.excel.forEach((element, index) => {\r\n            //     element[0].value = index + 1;\r\n            //     element[0].readOnly = true;\r\n            //     element[2].dataEditor = SelectEditor;\r\n            //     element[4].dataEditor = SelectMeasureEditor;\r\n            // })\r\n\r\n            //setGrid([grid[0], ...response.excel])\r\n            let collector=[];\r\n            if(response.success){\r\n                response.data.forEach((row, index)=>{\r\n                    const { \r\n                        CatalogCode,\r\n                        ProductCount,\r\n                        ProductDeliverySum,\r\n                        ProductDeliverySumWithVat,\r\n                        ProductFuelRate,\r\n                        ProductFuelSum,\r\n                        ProductMeasureId,\r\n                        ProductName, \r\n                        ProductSumma,\r\n                        ProductVatRate,\r\n                        ProductVatSum\r\n                    } = row;\r\n                    collector.push(\r\n                        [\r\n                            { readOnly: true, value: index+1 },                           //0 ordNo\r\n                            { value: ProductName },                                          //1 product name\r\n                            { value: {CatalogName: \"Hi\", CatalogCode}, dataEditor: SelectEditor, valueViewer: ProductValueRendered },                //2 catalogCode\r\n                            { value: \"\" },                                          //3 shrix code\r\n                            { value: ProductMeasureId, dataEditor: SelectMeasureEditor, valueViewer: MeasureViewer },        //4 measure\r\n                            { value: ProductCount },                                          //5 amount\r\n                            { value: ProductSumma},                                         //6 price\r\n                            { value: ProductFuelRate },                                          //7 aksiz rate\r\n                            { value: ProductFuelSum, readOnly: true },                          //8 aksiz amount\r\n                            { value: ProductDeliverySum },                                          //9 delivery cost\r\n                            { value: ProductVatRate },                                          //10 VAT rate\r\n                            { value: ProductVatSum, readOnly: true },                          //11 VAT amount\r\n                            { value: ProductDeliverySumWithVat, readOnly: true, },                          //12 total\r\n                        ]\r\n                    )\r\n                })\r\n            }\r\n            setGrid([grid[0], ...collector]);\r\n            console.log(response)\r\n        }\r\n    }\r\n\r\n\r\n    const valueRenderer = cell => cell.value;\r\n    const onCellsChanged = changes => {\r\n        changes.forEach(({ cell, row, col, value }, index) => {\r\n            //this sets changed values\r\n            grid[row][col] = { ...grid[row][col], value };\r\n\r\n            //Lets calculate\r\n            let priceamount = parseFloat(grid[row][5].value) * parseFloat(grid[row][6].value);\r\n            let aksizamount = parseFloat(priceamount * grid[row][7].value / 100);\r\n\r\n            grid[row][8] = { value: isNaN(aksizamount) ? 0: parseFloat(aksizamount), readOnly: true };\r\n\r\n            let vatamout = parseFloat(priceamount * parseFloat(grid[row][10].value) / 100);\r\n\r\n            grid[row][11] = { value: isNaN(vatamout)?0:vatamout, readOnly: true }\r\n\r\n            let total = !isNaN(priceamount) ? priceamount : 0\r\n            isNaN(aksizamount) ? total = total : total += aksizamount;\r\n            isNaN(vatamout) ? total= total + 0 : total += vatamout;\r\n            isNaN(grid[row][9].value) ? total =  total + 0 : total += +grid[row][9].value\r\n\r\n            grid[row][12] = { value: total, readOnly: true }\r\n\r\n\r\n        });\r\n        setGrid([...grid]);\r\n\r\n        grid.shift()\r\n\r\n        getProducts(grid)\r\n\r\n    };\r\n\r\n   \r\n\r\n    const handleAddRow = () => {\r\n\r\n        const sampleRow = [\r\n            { readOnly: true, value: grid.length }, //0 ordNo\r\n            { value: \"\" }, //1 product name\r\n            { value: \"\", dataEditor: SelectEditor, valueViewer: ProductValueRendered }, //2 catalogCode\r\n            { value: \"\" }, //3 shrix code\r\n            { value: \"\", dataEditor: SelectMeasureEditor }, //4 measure\r\n            { value: '' }, //5 amount\r\n            { value: \"\", }, //6 price\r\n            { value: '' }, //7 aksiz rate\r\n            { value: '', readOnly: true }, //8 aksiz amount\r\n            { value: '' }, //9 delivery cost\r\n            { value: \"\" }, //10 VAT rate\r\n            { value: '', readOnly: true }, //11 VAT amount\r\n            { value: '', readOnly: true }, //12 total\r\n        ]\r\n\r\n        let newgrid = [...grid, sampleRow];\r\n\r\n        setGrid(newgrid)\r\n    }\r\n\r\n    const onContextMenu = (e, cell, i, j) =>\r\n        cell.readOnly ? e.preventDefault() : null;\r\n    //#endregion\r\n\r\n\r\n    return (\r\n        <div className={`factura-data-sheet-container ${fullView ? 'grid-full-view' : null}`}>\r\n            <div style={{ marginBottom: 10, display: 'flex', justifyContent: 'space-between' }}>\r\n                <div style={{ display: 'flex' }}>\r\n                    <Upload\r\n                        headers={{\r\n                            Authorization: \"Bearer \" + token\r\n                        }}  \r\n                        multiple={false}\r\n                        action={`http://api.onlinefactura.uz/uz/facturas/import-excel`}\r\n                        accept=\".xlsx, .xls\"\r\n                        name=\"Files[file]\"\r\n                        data={{tin: user.tin}}\r\n                        onChange={handleImportExecl}>\r\n                        <Button style={{ marginRight: 10 }}>{t(\"Exceldan yuklash\")}</Button>\r\n\r\n                    </Upload>\r\n                    <a target=\"_blank\" href=\"../../../excels/factura_products.xlsx\" download>\r\n                        <Button >\r\n                            {t(\"Shablonni yuklash\")}\r\n                        </Button>\r\n                    </a>\r\n                </div>\r\n                <Button\r\n                    type=\"primary\"\r\n                    icon={fullView ? <FullscreenExitOutlined /> : <FullscreenOutlined />}\r\n                    onClick={() => toglleFullView(!fullView)}>\r\n                    {fullView ? t(\"Kichraytirish\") : t(\"Kengaytirish\")}\r\n                </Button>\r\n            </div>\r\n\r\n            <div style={{ overflowX: 'auto' }} >\r\n                <div style={{ width: '100%' }}>\r\n                    <Datasheet\r\n                        data={grid}\r\n                        valueRenderer={valueRenderer}\r\n                        onContextMenu={onContextMenu}\r\n                        onCellsChanged={onCellsChanged}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <Button\r\n                size=\"large\"\r\n                style={{ marginTop: 20, marginRight: 7, width: 220 }}\r\n                type=\"primary\"\r\n                icon={<FontAwesomeIcon\r\n                    style={{ marginRight: 7 }}\r\n                    icon={[\"far\", \"plus-square\"]} />}\r\n                onClick={handleAddRow}>{t(\"Qo'shish\")}</Button>\r\n\r\n            <Button\r\n                size=\"large\"\r\n                style={{ marginTop: 20, width: 220 }}\r\n                danger\r\n                type=\"primary\"\r\n                icon={<FontAwesomeIcon\r\n                    style={{ marginRight: 7 }}\r\n                    icon={[\"far\", \"trash-alt\"]} />}\r\n                onClick={() => { if (grid.length > 1) { handleRemoveRow(grid.length - 1) } }}>{t(\"Oxirgi qatorni o'chirish\")}</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch=>({\r\n    loadProducts: (data)=>dispatch(setUserProducts(data))\r\n})\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectCurrentUser,\r\n    token: selectToken\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FacturaProductGrid)\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\data-sheet-custom-measure-selector\\measure-viewer.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\grid-singlesidedtype-select.component\\grid-singlesidedtype-select.component.jsx",["571","572"],"import React from 'react'\r\nimport Select from \"react-select\"\r\nimport { ENTER_KEY, TAB_KEY } from 'react-datasheet/lib/keys';\r\n\r\nconst GridSingleSidedTyle = ({ onCommit, onRevert }) => {\r\n\r\n\r\n\r\n    const optionTags = [\r\n        { value: 1, label: \"На физ. лицо\" },\r\n        { value: 2, label: \"На экспорт\" },\r\n        { value: 3, label: \"На импорт\" },\r\n        { value: 4, label: \"Реализация, связанная с гос. секретом\" },\r\n        { value: 5, label: \"Финансовые услуги\" }\r\n\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <Select\r\n                size=\"small\"\r\n                showSearch\r\n                autoFocus\r\n                dropdownClassName=\"class-codes-drop-down-list\"\r\n                style={{ width: \"100%\" }}\r\n                dropdownMatchSelectWidth={false}\r\n                open={true}\r\n                menuPortalTarget={document.body}\r\n                styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}\r\n                //value={this.state.selected}\r\n                onChange={opt => { onCommit(opt.value) }}\r\n                //onSelect={this.handleChange}\r\n                //onInputKeyDown={handleKeyDown}\r\n                options={optionTags}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GridSingleSidedTyle\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\grid-doctype-select\\grid-doctype-select.component.jsx",["573","574"],"import React from 'react'\r\nimport Select from \"react-select\"\r\nimport { ENTER_KEY, TAB_KEY } from 'react-datasheet/lib/keys';\r\n\r\nconst GridDocTypeSelect = ({ onCommit, onRevert }) => {\r\n\r\n    \r\n    \r\n    const optionTags = [\r\n        { value: 0, label:\"STANDARD\"},\r\n        { value: 1, label: \"QOSHIMCHA\"},\r\n        { value: 2, label: \"HARAJATLARNI QOPLASH\"},\r\n        { value: 3, label: \"TOLOVSIZ\" },\r\n        { value: 4, label: \"TUZATUVCHI\"}\r\n\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <Select\r\n                size=\"small\"\r\n                showSearch\r\n                autoFocus\r\n                dropdownClassName=\"class-codes-drop-down-list\"\r\n                style={{ width: \"100%\" }}\r\n                dropdownMatchSelectWidth={false}\r\n                open={true}\r\n                menuPortalTarget={document.body}\r\n                styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}\r\n                //value={this.state.selected}\r\n                onChange={opt=>{onCommit(opt.value)}}\r\n                //onSelect={this.handleChange}\r\n                //onInputKeyDown={handleKeyDown}\r\n                options={optionTags}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GridDocTypeSelect\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\grid-datetime\\grid-datetime.component.jsx",["575"],"import React from 'react'\r\nimport { DatePicker } from 'antd'\r\n\r\nconst GridDateTime = ({ onCommit, onRevert }) => {\r\n\r\n    const handleChange = value=>{\r\n        onCommit(value.target.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"date\" style={{border: 'none', outline: 'none', width: '100%'}} onChange={handleChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GridDateTime\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\grid-user-fetcher-input\\grid-user-fetcher-input.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\viewHeader\\index.js",["576","577"],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\payme-form\\payme-form.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\classcodes-ajax-search\\classcodes-ajax-search.component.jsx",["578","579"],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\utils\\DateFormat.js",["580","581"],"export function DateFormat(dateProp){\r\n    const parsedDate = new Date(dateProp);\r\n    let date = parsedDate.getDate(). toString();\r\n    let month = parsedDate.getMonth()+1;\r\n    month = month. toString();\r\n    if(date.length === 1) date = '0'+ date;\r\n    if(month.length === 1) month = '0'+ month;\r\n    const dateStr = parsedDate.getFullYear()+'-'+month+'-'+date;\r\n    return dateStr;\r\n}\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\settings\\user-products\\user-products.component.jsx",["582"],"import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Select, Spin } from 'antd'\r\nimport axios from 'axios'\r\nimport React, { useState } from 'react'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { connect } from 'react-redux'\r\nimport { createStructuredSelector } from 'reselect'\r\nimport ClasscodeAjaxSearch from '../../../components/classcodes-ajax-search/classcodes-ajax-search.component'\r\nimport { selectCurrentUser } from '../../../redux/user/user.selector'\r\nimport HomePage from '../../common/home/home.component'\r\n\r\nconst { Option } = Select;\r\n\r\nconst UserProducts = ({ user }) => {\r\n\r\n    const { t } = useTranslation();\r\n    const [spinning, setSpinning] = useState(false);    \r\n    \r\n    const handleFetchTasnifSoliq = ()=>{\r\n        setSpinning(true)\r\n        axios({\r\n            url: `classifications/reload?tin=${user.tin??user.username}`,\r\n            method: \"GET\"\r\n        }).then(res=>{\r\n            setSpinning(false)\r\n            //window.location.reload()\r\n        }).catch(ex=>{\r\n            setSpinning(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Spin spinning={spinning}>\r\n                <ClasscodeAjaxSearch />\r\n            <HomePage \r\n            \r\n            hideTabs\r\n                customButton={<div \r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={handleFetchTasnifSoliq}><span><FontAwesomeIcon icon=\"sync-alt\" /> {t(\"Synxronizatsiya\")}</span></div>}\r\n            doc=\"user-products\"\r\n            addParams={[\r\n                {\r\n                    name: \"tin\",\r\n                    value: user.tin ?? user.username\r\n                }\r\n            ]}\r\n            />\r\n            </Spin>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectCurrentUser\r\n})\r\n\r\nexport default connect(mapStateToProps)(UserProducts)\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\settings\\account-form\\account-form.component.jsx",["583"],"import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Col, Input, Row, Form, Button, message, Select} from 'antd';\r\nimport axios from 'axios';\r\nimport React from 'react'\r\nimport { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { setUser } from '../../../redux/user/user.action';\r\nimport { selectCurrentUser } from '../../../redux/user/user.selector';\r\nimport { TextInBracket } from '../../../utils/utils';\r\n\r\nconst { Option } = Select;\r\n\r\nconst AccountForm = ({user, setUserOnly}) => {\r\n\r\n    const { t } = useTranslation();\r\n\r\n    const [form] = Form.useForm();\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const onSubmit=(values)=>{\r\n        console.log(JSON.stringify(values));\r\n        setLoading(true)\r\n        axios({\r\n            method: \"post\",\r\n            data: values,\r\n            \r\n            url: `company/update?id=${user.id}`\r\n        }).then(res=>{\r\n            setLoading(false)\r\n            //setUserOnly(res.data)\r\n            message.success(\"Succesfully updated!\")\r\n        }).catch(err=>{\r\n            setLoading(false)\r\n            console.log(err)\r\n        })\r\n    }\r\n    const fields = [\r\n        {\r\n            name: \"name\",\r\n            label: \"Nomi\"\r\n        },\r\n        {\r\n            name: \"address\",\r\n            label: \"Manzil\"\r\n        },\r\n        {\r\n            name: \"oked\",\r\n            label: \"OKED\"\r\n        },\r\n        {\r\n            name: \"director_fio\",\r\n            label: \"Direktor\"\r\n        },\r\n        {\r\n            name: \"accountant\",\r\n            label: \"Hisobchi\"\r\n        },\r\n        // {\r\n        //     name: \"phone\",\r\n        //     label: \"Telephone\"\r\n        // },\r\n        {\r\n            name: \"bank_account\",\r\n            label: \"Hisob raqam\"\r\n        },\r\n        {\r\n            name: \"mfo\",\r\n            label: \"MFO\"\r\n        },\r\n        \r\n    ]\r\n   \r\n\r\n    return (\r\n        \r\n            <Form\r\n                initialValues={user}\r\n                onFinish={onSubmit}\r\n                form={form}\r\n            >\r\n                <Row justify=\"space-between\">\r\n                    <Col md={11}>\r\n                    \r\n                        <Form.Item>\r\n                            <Form.Item\r\n                                initialValue={user.tin??user.username}\r\n                                key={`dyna-form-facutura-no-old-tin`}\r\n                                name=\"tin\"\r\n                                >\r\n                                <Input\r\n                                    rules={[{ required: true }]}\r\n                                    size=\"large\"\r\n                                    disabled\r\n                                    />\r\n                            </Form.Item>\r\n                            <span className=\"custom-input-label-1\">{t(\"STIR\")}</span>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    {\r\n                        fields.map(field => <Col md={11}>\r\n                            <Form.Item>\r\n                                <Form.Item\r\n                                    key={`dyna-form-facutura-no-old-${field.name}`}\r\n                                    name={field.name}\r\n                                >\r\n                                    <Input\r\n                                        rules={[{ required: true }]}\r\n                                        size=\"large\"\r\n                                    />\r\n                                </Form.Item>\r\n                                <span className=\"custom-input-label-1\">{field.label}</span>\r\n                            </Form.Item>\r\n                        </Col>)\r\n                    }\r\n                    <Col md={11}>\r\n                        <Form.Item>\r\n                            <Form.Item\r\n                                key={`dyna-form-facutura-no-old-tin-vil`}\r\n                                name=\"ns10_code\"\r\n                            >\r\n                                <Select\r\n                                    rules={[{ required: true }]}\r\n                                    size=\"large\"\r\n                                    bordered={false}\r\n                                >\r\n\r\n                                <Option value={1}>Tashkent</Option>\r\n                                <Option value={2}>Andijon</Option>\r\n                                <Option value={3}>Tashkent</Option>\r\n                                <Option value={14}>Namangan</Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n                            <span className=\"custom-input-label-1\">{t(\"Viloyat\")}</span>\r\n                        </Form.Item>\r\n                    </Col>\r\n                   <Col md={11}>\r\n                        <Button\r\n                            htmlType=\"submit\"\r\n                            loading={loading}\r\n                            className=\"factra-action-btns sing-btn\"\r\n                            size=\"large\"\r\n                            icon={<FontAwesomeIcon icon=\"save\" className=\"factura-action-btn-icons\" />}>\r\n                                Saqlash\r\n                        </Button>\r\n                   </Col>\r\n                </Row>\r\n            </Form>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch=>({\r\n    setUserOnly: (user)=>dispatch(setUser(user))\r\n})\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectCurrentUser\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AccountForm)\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\settings\\account\\index.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\settings\\notification\\index.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\utils\\doc-sign.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\models\\AktProduct.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\models\\Akt.js",[],{"ruleId":"584","replacedBy":"585"},{"ruleId":"586","replacedBy":"587"},{"ruleId":"588","severity":1,"message":"589","line":24,"column":1,"nodeType":"590","endLine":24,"endColumn":37},{"ruleId":"591","severity":1,"message":"592","line":3,"column":25,"nodeType":"593","messageId":"594","endLine":3,"endColumn":33},{"ruleId":"591","severity":1,"message":"595","line":11,"column":8,"nodeType":"593","messageId":"594","endLine":11,"endColumn":14},{"ruleId":"591","severity":1,"message":"596","line":18,"column":19,"nodeType":"593","messageId":"594","endLine":18,"endColumn":24},{"ruleId":"591","severity":1,"message":"597","line":19,"column":21,"nodeType":"593","messageId":"594","endLine":19,"endColumn":29},{"ruleId":"591","severity":1,"message":"598","line":22,"column":8,"nodeType":"593","messageId":"594","endLine":22,"endColumn":19},{"ruleId":"599","severity":1,"message":"600","line":63,"column":8,"nodeType":"601","endLine":63,"endColumn":10,"suggestions":"602"},{"ruleId":"591","severity":1,"message":"603","line":1,"column":15,"nodeType":"593","messageId":"594","endLine":1,"endColumn":19},{"ruleId":"591","severity":1,"message":"592","line":3,"column":9,"nodeType":"593","messageId":"594","endLine":3,"endColumn":17},{"ruleId":"591","severity":1,"message":"604","line":3,"column":26,"nodeType":"593","messageId":"594","endLine":3,"endColumn":32},{"ruleId":"591","severity":1,"message":"605","line":6,"column":8,"nodeType":"593","messageId":"594","endLine":6,"endColumn":13},{"ruleId":"591","severity":1,"message":"606","line":9,"column":9,"nodeType":"593","messageId":"594","endLine":9,"endColumn":12},{"ruleId":"591","severity":1,"message":"604","line":6,"column":26,"nodeType":"593","messageId":"594","endLine":6,"endColumn":32},{"ruleId":"599","severity":1,"message":"607","line":27,"column":7,"nodeType":"601","endLine":27,"endColumn":9,"suggestions":"608"},{"ruleId":"591","severity":1,"message":"609","line":2,"column":39,"nodeType":"593","messageId":"594","endLine":2,"endColumn":43},{"ruleId":"591","severity":1,"message":"610","line":2,"column":45,"nodeType":"593","messageId":"594","endLine":2,"endColumn":53},{"ruleId":"591","severity":1,"message":"611","line":2,"column":55,"nodeType":"593","messageId":"594","endLine":2,"endColumn":58},{"ruleId":"591","severity":1,"message":"606","line":2,"column":60,"nodeType":"593","messageId":"594","endLine":2,"endColumn":63},{"ruleId":"591","severity":1,"message":"612","line":2,"column":65,"nodeType":"593","messageId":"594","endLine":2,"endColumn":71},{"ruleId":"591","severity":1,"message":"613","line":14,"column":8,"nodeType":"593","messageId":"594","endLine":14,"endColumn":19},{"ruleId":"591","severity":1,"message":"614","line":15,"column":8,"nodeType":"593","messageId":"594","endLine":15,"endColumn":24},{"ruleId":"599","severity":1,"message":"615","line":73,"column":8,"nodeType":"601","endLine":73,"endColumn":10,"suggestions":"616"},{"ruleId":"591","severity":1,"message":"617","line":75,"column":11,"nodeType":"593","messageId":"594","endLine":75,"endColumn":22},{"ruleId":"591","severity":1,"message":"618","line":4,"column":8,"nodeType":"593","messageId":"594","endLine":4,"endColumn":13},{"ruleId":"591","severity":1,"message":"619","line":2,"column":10,"nodeType":"593","messageId":"594","endLine":2,"endColumn":30},{"ruleId":"591","severity":1,"message":"620","line":2,"column":32,"nodeType":"593","messageId":"594","endLine":2,"endColumn":42},{"ruleId":"591","severity":1,"message":"618","line":4,"column":8,"nodeType":"593","messageId":"594","endLine":4,"endColumn":13},{"ruleId":"591","severity":1,"message":"621","line":15,"column":8,"nodeType":"593","messageId":"594","endLine":15,"endColumn":21},{"ruleId":"591","severity":1,"message":"622","line":17,"column":9,"nodeType":"593","messageId":"594","endLine":17,"endColumn":15},{"ruleId":"591","severity":1,"message":"623","line":24,"column":26,"nodeType":"593","messageId":"594","endLine":24,"endColumn":41},{"ruleId":"599","severity":1,"message":"624","line":46,"column":8,"nodeType":"601","endLine":46,"endColumn":10,"suggestions":"625"},{"ruleId":"591","severity":1,"message":"609","line":1,"column":17,"nodeType":"593","messageId":"594","endLine":1,"endColumn":21},{"ruleId":"599","severity":1,"message":"626","line":33,"column":8,"nodeType":"601","endLine":33,"endColumn":10,"suggestions":"627"},{"ruleId":"628","severity":1,"message":"629","line":1,"column":1,"nodeType":"630","messageId":"631","endLine":40,"endColumn":2},{"ruleId":"632","severity":1,"message":"633","line":4,"column":18,"nodeType":"634","messageId":"631","endLine":4,"endColumn":20},{"ruleId":"632","severity":1,"message":"635","line":7,"column":38,"nodeType":"634","messageId":"631","endLine":7,"endColumn":40},{"ruleId":"591","severity":1,"message":"636","line":17,"column":13,"nodeType":"593","messageId":"594","endLine":17,"endColumn":14},{"ruleId":"632","severity":1,"message":"635","line":25,"column":35,"nodeType":"634","messageId":"631","endLine":25,"endColumn":37},{"ruleId":"632","severity":1,"message":"633","line":26,"column":27,"nodeType":"634","messageId":"631","endLine":26,"endColumn":29},{"ruleId":"637","severity":1,"message":"638","line":33,"column":17,"nodeType":"593","messageId":"639","endLine":33,"endColumn":21},{"ruleId":"591","severity":1,"message":"622","line":29,"column":9,"nodeType":"593","messageId":"594","endLine":29,"endColumn":15},{"ruleId":"591","severity":1,"message":"640","line":87,"column":10,"nodeType":"593","messageId":"594","endLine":87,"endColumn":22},{"ruleId":"599","severity":1,"message":"641","line":17,"column":8,"nodeType":"601","endLine":17,"endColumn":26,"suggestions":"642"},{"ruleId":"591","severity":1,"message":"597","line":1,"column":17,"nodeType":"593","messageId":"594","endLine":1,"endColumn":25},{"ruleId":"591","severity":1,"message":"595","line":2,"column":8,"nodeType":"593","messageId":"594","endLine":2,"endColumn":14},{"ruleId":"643","severity":1,"message":"644","line":4,"column":15,"nodeType":"645","messageId":"631","endLine":4,"endColumn":17},{"ruleId":"599","severity":1,"message":"646","line":45,"column":8,"nodeType":"601","endLine":45,"endColumn":16,"suggestions":"647"},{"ruleId":"632","severity":1,"message":"635","line":58,"column":42,"nodeType":"634","messageId":"631","endLine":58,"endColumn":44},{"ruleId":"599","severity":1,"message":"648","line":71,"column":8,"nodeType":"601","endLine":71,"endColumn":10,"suggestions":"649"},{"ruleId":"591","severity":1,"message":"597","line":1,"column":17,"nodeType":"593","messageId":"594","endLine":1,"endColumn":25},{"ruleId":"591","severity":1,"message":"650","line":9,"column":8,"nodeType":"593","messageId":"594","endLine":9,"endColumn":25},{"ruleId":"591","severity":1,"message":"618","line":2,"column":8,"nodeType":"593","messageId":"594","endLine":2,"endColumn":13},{"ruleId":"591","severity":1,"message":"651","line":4,"column":10,"nodeType":"593","messageId":"594","endLine":4,"endColumn":19},{"ruleId":"591","severity":1,"message":"652","line":7,"column":10,"nodeType":"593","messageId":"594","endLine":7,"endColumn":14},{"ruleId":"632","severity":1,"message":"635","line":99,"column":25,"nodeType":"634","messageId":"631","endLine":99,"endColumn":27},{"ruleId":"599","severity":1,"message":"653","line":193,"column":6,"nodeType":"601","endLine":193,"endColumn":8,"suggestions":"654"},{"ruleId":"655","severity":1,"message":"656","line":199,"column":14,"nodeType":"657","messageId":"658","endLine":199,"endColumn":46},{"ruleId":"655","severity":1,"message":"656","line":200,"column":15,"nodeType":"657","messageId":"658","endLine":200,"endColumn":48},{"ruleId":"655","severity":1,"message":"656","line":203,"column":14,"nodeType":"657","messageId":"658","endLine":203,"endColumn":58},{"ruleId":"599","severity":1,"message":"659","line":35,"column":8,"nodeType":"601","endLine":35,"endColumn":10,"suggestions":"660"},{"ruleId":"591","severity":1,"message":"661","line":4,"column":8,"nodeType":"593","messageId":"594","endLine":4,"endColumn":22},{"ruleId":"591","severity":1,"message":"662","line":6,"column":53,"nodeType":"593","messageId":"594","endLine":6,"endColumn":59},{"ruleId":"591","severity":1,"message":"663","line":15,"column":8,"nodeType":"593","messageId":"594","endLine":15,"endColumn":14},{"ruleId":"591","severity":1,"message":"664","line":20,"column":10,"nodeType":"593","messageId":"594","endLine":20,"endColumn":31},{"ruleId":"599","severity":1,"message":"665","line":81,"column":6,"nodeType":"601","endLine":81,"endColumn":8,"suggestions":"666"},{"ruleId":"655","severity":1,"message":"656","line":87,"column":14,"nodeType":"657","messageId":"658","endLine":87,"endColumn":46},{"ruleId":"655","severity":1,"message":"656","line":88,"column":15,"nodeType":"657","messageId":"658","endLine":88,"endColumn":48},{"ruleId":"655","severity":1,"message":"656","line":91,"column":14,"nodeType":"657","messageId":"658","endLine":91,"endColumn":58},{"ruleId":"632","severity":1,"message":"635","line":221,"column":25,"nodeType":"634","messageId":"631","endLine":221,"endColumn":27},{"ruleId":"591","severity":1,"message":"667","line":3,"column":10,"nodeType":"593","messageId":"594","endLine":3,"endColumn":15},{"ruleId":"591","severity":1,"message":"668","line":4,"column":9,"nodeType":"593","messageId":"594","endLine":4,"endColumn":26},{"ruleId":"591","severity":1,"message":"652","line":6,"column":10,"nodeType":"593","messageId":"594","endLine":6,"endColumn":14},{"ruleId":"591","severity":1,"message":"669","line":27,"column":14,"nodeType":"593","messageId":"594","endLine":27,"endColumn":18},{"ruleId":"599","severity":1,"message":"670","line":86,"column":6,"nodeType":"601","endLine":86,"endColumn":8,"suggestions":"671"},{"ruleId":"655","severity":1,"message":"656","line":92,"column":14,"nodeType":"657","messageId":"658","endLine":92,"endColumn":46},{"ruleId":"655","severity":1,"message":"656","line":93,"column":15,"nodeType":"657","messageId":"658","endLine":93,"endColumn":48},{"ruleId":"655","severity":1,"message":"656","line":96,"column":14,"nodeType":"657","messageId":"658","endLine":96,"endColumn":58},{"ruleId":"591","severity":1,"message":"672","line":119,"column":9,"nodeType":"593","messageId":"594","endLine":119,"endColumn":19},{"ruleId":"591","severity":1,"message":"673","line":59,"column":13,"nodeType":"593","messageId":"594","endLine":59,"endColumn":22},{"ruleId":"591","severity":1,"message":"674","line":60,"column":13,"nodeType":"593","messageId":"594","endLine":60,"endColumn":24},{"ruleId":"591","severity":1,"message":"675","line":61,"column":13,"nodeType":"593","messageId":"594","endLine":61,"endColumn":25},{"ruleId":"599","severity":1,"message":"676","line":88,"column":6,"nodeType":"601","endLine":88,"endColumn":8,"suggestions":"677"},{"ruleId":"655","severity":1,"message":"656","line":94,"column":14,"nodeType":"657","messageId":"658","endLine":94,"endColumn":46},{"ruleId":"655","severity":1,"message":"656","line":95,"column":15,"nodeType":"657","messageId":"658","endLine":95,"endColumn":48},{"ruleId":"655","severity":1,"message":"656","line":98,"column":14,"nodeType":"657","messageId":"658","endLine":98,"endColumn":58},{"ruleId":"632","severity":1,"message":"635","line":254,"column":27,"nodeType":"634","messageId":"631","endLine":254,"endColumn":29},{"ruleId":"591","severity":1,"message":"651","line":1,"column":27,"nodeType":"593","messageId":"594","endLine":1,"endColumn":36},{"ruleId":"591","severity":1,"message":"678","line":10,"column":8,"nodeType":"593","messageId":"594","endLine":10,"endColumn":23},{"ruleId":"591","severity":1,"message":"679","line":84,"column":24,"nodeType":"593","messageId":"594","endLine":84,"endColumn":27},{"ruleId":"591","severity":1,"message":"680","line":84,"column":29,"nodeType":"593","messageId":"594","endLine":84,"endColumn":32},{"ruleId":"681","severity":1,"message":"682","line":235,"column":42,"nodeType":"593","messageId":"683","endLine":235,"endColumn":47},{"ruleId":"591","severity":1,"message":"684","line":1,"column":16,"nodeType":"593","messageId":"594","endLine":1,"endColumn":26},{"ruleId":"591","severity":1,"message":"618","line":5,"column":8,"nodeType":"593","messageId":"594","endLine":5,"endColumn":13},{"ruleId":"591","severity":1,"message":"606","line":6,"column":17,"nodeType":"593","messageId":"594","endLine":6,"endColumn":20},{"ruleId":"591","severity":1,"message":"685","line":6,"column":28,"nodeType":"593","messageId":"594","endLine":6,"endColumn":35},{"ruleId":"591","severity":1,"message":"611","line":6,"column":37,"nodeType":"593","messageId":"594","endLine":6,"endColumn":40},{"ruleId":"591","severity":1,"message":"686","line":6,"column":48,"nodeType":"593","messageId":"594","endLine":6,"endColumn":53},{"ruleId":"591","severity":1,"message":"687","line":11,"column":9,"nodeType":"593","messageId":"594","endLine":11,"endColumn":25},{"ruleId":"591","severity":1,"message":"688","line":11,"column":26,"nodeType":"593","messageId":"594","endLine":11,"endColumn":41},{"ruleId":"591","severity":1,"message":"621","line":13,"column":8,"nodeType":"593","messageId":"594","endLine":13,"endColumn":21},{"ruleId":"591","severity":1,"message":"689","line":15,"column":8,"nodeType":"593","messageId":"594","endLine":15,"endColumn":16},{"ruleId":"591","severity":1,"message":"690","line":17,"column":9,"nodeType":"593","messageId":"594","endLine":17,"endColumn":29},{"ruleId":"591","severity":1,"message":"691","line":18,"column":9,"nodeType":"593","messageId":"594","endLine":18,"endColumn":16},{"ruleId":"599","severity":1,"message":"692","line":38,"column":7,"nodeType":"601","endLine":38,"endColumn":19,"suggestions":"693"},{"ruleId":"591","severity":1,"message":"662","line":5,"column":53,"nodeType":"593","messageId":"594","endLine":5,"endColumn":59},{"ruleId":"591","severity":1,"message":"664","line":19,"column":10,"nodeType":"593","messageId":"594","endLine":19,"endColumn":31},{"ruleId":"591","severity":1,"message":"694","line":24,"column":3,"nodeType":"593","messageId":"594","endLine":24,"endColumn":23},{"ruleId":"591","severity":1,"message":"695","line":27,"column":9,"nodeType":"593","messageId":"594","endLine":27,"endColumn":29},{"ruleId":"591","severity":1,"message":"696","line":27,"column":31,"nodeType":"593","messageId":"594","endLine":27,"endColumn":51},{"ruleId":"591","severity":1,"message":"697","line":28,"column":9,"nodeType":"593","messageId":"594","endLine":28,"endColumn":29},{"ruleId":"591","severity":1,"message":"698","line":46,"column":10,"nodeType":"593","messageId":"594","endLine":46,"endColumn":13},{"ruleId":"599","severity":1,"message":"699","line":81,"column":6,"nodeType":"601","endLine":81,"endColumn":8,"suggestions":"700"},{"ruleId":"599","severity":1,"message":"701","line":90,"column":5,"nodeType":"601","endLine":90,"endColumn":24,"suggestions":"702"},{"ruleId":"655","severity":1,"message":"656","line":95,"column":14,"nodeType":"657","messageId":"658","endLine":95,"endColumn":46},{"ruleId":"655","severity":1,"message":"656","line":96,"column":15,"nodeType":"657","messageId":"658","endLine":96,"endColumn":48},{"ruleId":"655","severity":1,"message":"656","line":99,"column":14,"nodeType":"657","messageId":"658","endLine":99,"endColumn":58},{"ruleId":"599","severity":1,"message":"703","line":240,"column":5,"nodeType":"601","endLine":240,"endColumn":11,"suggestions":"704"},{"ruleId":"632","severity":1,"message":"635","line":245,"column":25,"nodeType":"634","messageId":"631","endLine":245,"endColumn":27},{"ruleId":"591","severity":1,"message":"663","line":1,"column":8,"nodeType":"593","messageId":"594","endLine":1,"endColumn":14},{"ruleId":"705","severity":1,"message":"706","line":106,"column":13,"nodeType":"707","messageId":"708","endLine":115,"endColumn":14},{"ruleId":"709","severity":1,"message":"710","line":116,"column":13,"nodeType":"711","messageId":"712","endLine":116,"endColumn":19},{"ruleId":"705","severity":1,"message":"706","line":119,"column":13,"nodeType":"707","messageId":"708","endLine":131,"endColumn":14},{"ruleId":"705","severity":1,"message":"706","line":134,"column":13,"nodeType":"707","messageId":"708","endLine":153,"endColumn":14},{"ruleId":"705","severity":1,"message":"706","line":157,"column":13,"nodeType":"707","messageId":"708","endLine":175,"endColumn":14},{"ruleId":"591","severity":1,"message":"713","line":208,"column":7,"nodeType":"593","messageId":"594","endLine":208,"endColumn":29},{"ruleId":"714","severity":1,"message":"715","line":268,"column":31,"nodeType":"657","messageId":"716","endLine":268,"endColumn":32,"suggestions":"717"},{"ruleId":"632","severity":1,"message":"635","line":21,"column":16,"nodeType":"634","messageId":"631","endLine":21,"endColumn":18},{"ruleId":"591","severity":1,"message":"718","line":86,"column":17,"nodeType":"593","messageId":"594","endLine":86,"endColumn":27},{"ruleId":"591","severity":1,"message":"719","line":186,"column":9,"nodeType":"593","messageId":"594","endLine":186,"endColumn":18},{"ruleId":"591","severity":1,"message":"720","line":187,"column":9,"nodeType":"593","messageId":"594","endLine":187,"endColumn":25},{"ruleId":"591","severity":1,"message":"721","line":188,"column":9,"nodeType":"593","messageId":"594","endLine":188,"endColumn":23},{"ruleId":"591","severity":1,"message":"722","line":191,"column":9,"nodeType":"593","messageId":"594","endLine":191,"endColumn":20},{"ruleId":"591","severity":1,"message":"723","line":235,"column":7,"nodeType":"593","messageId":"594","endLine":235,"endColumn":21},{"ruleId":"632","severity":1,"message":"635","line":168,"column":22,"nodeType":"634","messageId":"631","endLine":168,"endColumn":24},{"ruleId":"591","severity":1,"message":"724","line":24,"column":13,"nodeType":"593","messageId":"594","endLine":24,"endColumn":14},{"ruleId":"591","severity":1,"message":"725","line":2,"column":9,"nodeType":"593","messageId":"594","endLine":2,"endColumn":18},{"ruleId":"591","severity":1,"message":"726","line":2,"column":20,"nodeType":"593","messageId":"594","endLine":2,"endColumn":27},{"ruleId":"591","severity":1,"message":"727","line":14,"column":25,"nodeType":"593","messageId":"594","endLine":14,"endColumn":33},{"ruleId":"591","severity":1,"message":"724","line":19,"column":15,"nodeType":"593","messageId":"594","endLine":19,"endColumn":16},{"ruleId":"591","severity":1,"message":"728","line":10,"column":8,"nodeType":"593","messageId":"594","endLine":10,"endColumn":17},{"ruleId":"591","severity":1,"message":"597","line":1,"column":9,"nodeType":"593","messageId":"594","endLine":1,"endColumn":17},{"ruleId":"591","severity":1,"message":"663","line":4,"column":8,"nodeType":"593","messageId":"594","endLine":4,"endColumn":14},{"ruleId":"729","severity":1,"message":"730","line":25,"column":29,"nodeType":"731","messageId":"732","endLine":25,"endColumn":31},{"ruleId":"729","severity":1,"message":"730","line":27,"column":40,"nodeType":"731","messageId":"732","endLine":27,"endColumn":42},{"ruleId":"591","severity":1,"message":"733","line":139,"column":7,"nodeType":"593","messageId":"594","endLine":139,"endColumn":28},{"ruleId":"643","severity":1,"message":"644","line":140,"column":9,"nodeType":"645","messageId":"631","endLine":142,"endColumn":6},{"ruleId":"591","severity":1,"message":"734","line":144,"column":9,"nodeType":"593","messageId":"594","endLine":144,"endColumn":12},{"ruleId":"591","severity":1,"message":"664","line":6,"column":10,"nodeType":"593","messageId":"594","endLine":6,"endColumn":31},{"ruleId":"599","severity":1,"message":"735","line":35,"column":8,"nodeType":"601","endLine":35,"endColumn":23,"suggestions":"736"},{"ruleId":"599","severity":1,"message":"737","line":46,"column":8,"nodeType":"601","endLine":46,"endColumn":10,"suggestions":"738"},{"ruleId":"632","severity":1,"message":"635","line":99,"column":31,"nodeType":"634","messageId":"631","endLine":99,"endColumn":33},{"ruleId":"681","severity":1,"message":"682","line":169,"column":42,"nodeType":"593","messageId":"683","endLine":169,"endColumn":47},{"ruleId":"591","severity":1,"message":"725","line":3,"column":10,"nodeType":"593","messageId":"594","endLine":3,"endColumn":19},{"ruleId":"591","severity":1,"message":"726","line":3,"column":21,"nodeType":"593","messageId":"594","endLine":3,"endColumn":28},{"ruleId":"591","severity":1,"message":"725","line":3,"column":10,"nodeType":"593","messageId":"594","endLine":3,"endColumn":19},{"ruleId":"591","severity":1,"message":"726","line":3,"column":21,"nodeType":"593","messageId":"594","endLine":3,"endColumn":28},{"ruleId":"591","severity":1,"message":"739","line":2,"column":10,"nodeType":"593","messageId":"594","endLine":2,"endColumn":20},{"ruleId":"591","severity":1,"message":"651","line":1,"column":16,"nodeType":"593","messageId":"594","endLine":1,"endColumn":25},{"ruleId":"591","severity":1,"message":"663","line":4,"column":8,"nodeType":"593","messageId":"594","endLine":4,"endColumn":14},{"ruleId":"591","severity":1,"message":"609","line":3,"column":26,"nodeType":"593","messageId":"594","endLine":3,"endColumn":30},{"ruleId":"740","severity":1,"message":"741","line":71,"column":13,"nodeType":"742","messageId":"743","endLine":71,"endColumn":35},{"ruleId":"744","severity":1,"message":"745","line":3,"column":16,"nodeType":"746","messageId":"747","endLine":3,"endColumn":46,"fix":"748"},{"ruleId":"744","severity":1,"message":"745","line":5,"column":13,"nodeType":"746","messageId":"747","endLine":5,"endColumn":28,"fix":"749"},{"ruleId":"591","severity":1,"message":"622","line":12,"column":9,"nodeType":"593","messageId":"594","endLine":12,"endColumn":15},{"ruleId":"591","severity":1,"message":"750","line":11,"column":10,"nodeType":"593","messageId":"594","endLine":11,"endColumn":23},"no-native-reassign",["751"],"no-negated-in-lhs",["752"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'Header' is defined but never used.","'Modal' is defined but never used.","'useState' is defined but never used.","'UserContext' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'loadedKey?.time', 'signOut', and 't'. Either include them or remove the dependency array. If 'signOut' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["753"],"'call' is defined but never used.","'Switch' is defined but never used.","'Login' is defined but never used.","'Col' is defined but never used.","React Hook useEffect has missing dependencies: 'form' and 'notificationId'. Either include them or remove the dependency array.",["754"],"'Spin' is defined but never used.","'Checkbox' is defined but never used.","'Row' is defined but never used.","'Button' is defined but never used.","'AfertaPopup' is defined but never used.","'BindroumingPopup' is defined but never used.","React Hook useEffect has a missing dependency: 'setData'. Either include it or remove the dependency array. If 'setData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["755"],"'handleModal' is assigned a value but never used.","'axios' is defined but never used.","'EyeInvisibleOutlined' is defined but never used.","'EyeTwoTone' is defined but never used.","'axiosInstance' is defined but never used.","'Option' is assigned a value but never used.","'setKeyIsLoading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'eKeys' and 't'. Either include them or remove the dependency array. You can also do a functional update 'setEKeys(e => ...)' if you only need 'eKeys' in the 'setEKeys' call.",["756"],"React Hook useEffect has missing dependencies: 'user.tin' and 'user.username'. Either include them or remove the dependency array.",["757"],"no-extend-native","String prototype is read only, properties should not be added.","AssignmentExpression","unexpected","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","Expected '===' and instead saw '=='.","'r' is assigned a value but never used.","no-redeclare","'part' is already defined.","redeclared","'filteredInfo' is assigned a value but never used.","React Hook useEffect has an unnecessary dependency: 'i18next.language'. Either exclude it or remove the dependency array. Outer scope values like 'i18next.language' aren't valid dependencies because mutating them doesn't re-render the component.",["758"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","React Hook useEffect has a missing dependency: 'setChoosenCompany'. Either include it or remove the dependency array.",["759"],"React Hook useEffect has missing dependencies: 'setChoosenCompany', 'setUserComps', and 'user'. Either include them or remove the dependency array. If 'setUserComps' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["760"],"'FacturaCreateForm' is defined but never used.","'useEffect' is defined but never used.","'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'form' and 'ttyId'. Either include them or remove the dependency array.",["761"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","React Hook useEffect has missing dependencies: 'actId', 'user.tin', and 'user.username'. Either include them or remove the dependency array.",["762"],"'PasswordChange' is defined but never used.","'Select' is defined but never used.","'moment' is defined but never used.","'convertProductsToGrid' is defined but never used.","React Hook useEffect has missing dependencies: 'actId', 'duplicateId', 'form', 'grid', 'user.tin', and 'user.username'. Either include them or remove the dependency array. You can also do a functional update 'setGrid(g => ...)' if you only need 'grid' in the 'setGrid' call.",["763"],"'Badge' is defined but never used.","'PlusCircleTwoTone' is defined but never used.","'i18n' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'duplicateId', 'facturaId', 'form', 'user.tin', and 'user.username'. Either include them or remove the dependency array.",["764"],"'formValues' is assigned a value but never used.","'workPhone' is assigned a value but never used.","'physicalTin' is assigned a value but never used.","'physicalName' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'contractId' and 'form'. Either include them or remove the dependency array.",["765"],"'GridUserFetcher' is defined but never used.","'col' is assigned a value but never used.","'row' is assigned a value but never used.","no-self-assign","'total' is assigned to itself.","selfAssignment","'useContext' is defined but never used.","'message' is defined but never used.","'Table' is defined but never used.","'DownloadOutlined' is defined but never used.","'PrinterOutlined' is defined but never used.","'GetToken' is defined but never used.","'ConvertEmpDataToForm' is defined but never used.","'formats' is defined but never used.","React Hook useEffect has missing dependencies: 'form', 'getEmpowerment', and 'params'. Either include them or remove the dependency array.",["766"],"'ConvertEmpDataToGrid' is defined but never used.","'ConvertGridToProduct' is defined but never used.","'ConvertProductToGrid' is defined but never used.","'ProductValueRendered' is defined but never used.","'tin' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'duplicateId', 'editEmp', and 'empowermentId'. Either include them or remove the dependency array.",["767"],"React Hook useEffect has missing dependencies: 'empowermentId' and 'grid'. Either include them or remove the dependency array. You can also do a functional update 'setGrid(g => ...)' if you only need 'grid' in the 'setGrid' call.",["768"],"React Hook useEffect has a missing dependency: 'getProducts'. Either include it or remove the dependency array.",["769"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'FACTURA_PRODUCT_FIELDS' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\/.","unnecessaryEscape",["770","771"],"'WithoutVat' is assigned a value but never used.","'FacturaId' is assigned a value but never used.","'FacturaProductId' is assigned a value but never used.","'ForeignCompany' is assigned a value but never used.","'ProductList' is assigned a value but never used.","'formProperties' is assigned a value but never used.","'e' is assigned a value but never used.","'ENTER_KEY' is defined but never used.","'TAB_KEY' is defined but never used.","'onRevert' is assigned a value but never used.","'PaymeForm' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'EmpowermentDataToForm' is assigned a value but never used.","'emp' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'grid'. Either include it or remove the dependency array. You can also do a functional update 'setGrid(g => ...)' if you only need 'grid' in the 'setGrid' call.",["772"],"React Hook useEffect has missing dependencies: 'loadProducts', 'user.tin', and 'user.username'. Either include them or remove the dependency array. If 'loadProducts' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["773"],"'DatePicker' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","no-whitespace-before-property","Unexpected whitespace before property toString.","MemberExpression","unexpectedWhitespace",{"range":"774","text":"775"},{"range":"776","text":"775"},"'TextInBracket' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"777","fix":"778"},{"desc":"779","fix":"780"},{"desc":"781","fix":"782"},{"desc":"783","fix":"784"},{"desc":"785","fix":"786"},{"desc":"787","fix":"788"},{"desc":"789","fix":"790"},{"desc":"791","fix":"792"},{"desc":"793","fix":"794"},{"desc":"795","fix":"796"},{"desc":"797","fix":"798"},{"desc":"799","fix":"800"},{"desc":"801","fix":"802"},{"desc":"803","fix":"804"},{"desc":"805","fix":"806"},{"desc":"807","fix":"808"},{"desc":"809","fix":"810"},{"messageId":"811","fix":"812","desc":"813"},{"messageId":"814","fix":"815","desc":"816"},{"desc":"817","fix":"818"},{"desc":"819","fix":"820"},[118,120],".",[192,194],"Update the dependencies array to be: [loadedKey?.time, signOut, t]",{"range":"821","text":"822"},"Update the dependencies array to be: [form, notificationId]",{"range":"823","text":"824"},"Update the dependencies array to be: [setData]",{"range":"825","text":"826"},"Update the dependencies array to be: [eKeys, t]",{"range":"827","text":"828"},"Update the dependencies array to be: [user.tin, user.username]",{"range":"829","text":"830"},"Update the dependencies array to be: []",{"range":"831","text":"832"},"Update the dependencies array to be: [chosen, setChoosenCompany]",{"range":"833","text":"834"},"Update the dependencies array to be: [setChoosenCompany, setUserComps, user]",{"range":"835","text":"836"},"Update the dependencies array to be: [form, ttyId]",{"range":"837","text":"838"},"Update the dependencies array to be: [actId, user.tin, user.username]",{"range":"839","text":"840"},"Update the dependencies array to be: [actId, duplicateId, form, grid, user.tin, user.username]",{"range":"841","text":"842"},"Update the dependencies array to be: [duplicateId, facturaId, form, user.tin, user.username]",{"range":"843","text":"844"},"Update the dependencies array to be: [contractId, form]",{"range":"845","text":"846"},"Update the dependencies array to be: [empId, form, getEmpowerment, params, user]",{"range":"847","text":"848"},"Update the dependencies array to be: [duplicateId, editEmp, empowermentId]",{"range":"849","text":"850"},"Update the dependencies array to be: [empowermentId, grid, gridInitialValues]",{"range":"851","text":"852"},"Update the dependencies array to be: [getProducts, grid]",{"range":"853","text":"854"},"removeEscape",{"range":"855","text":"856"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"857","text":"858"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [grid, initialValues]",{"range":"859","text":"860"},"Update the dependencies array to be: [loadProducts, user.tin, user.username]",{"range":"861","text":"862"},[2232,2234],"[loadedKey?.time, signOut, t]",[787,789],"[form, notificationId]",[2708,2710],"[setData]",[1876,1878],"[eKeys, t]",[1181,1183],"[user.tin, user.username]",[651,669],"[]",[1380,1388],"[chosen, setChoosenCompany]",[2185,2187],"[setChoosenCompany, setUserComps, user]",[6296,6298],"[form, ttyId]",[1227,1229],"[actId, user.tin, user.username]",[3106,3108],"[actId, duplicateId, form, grid, user.tin, user.username]",[3444,3446],"[duplicateId, facturaId, form, user.tin, user.username]",[3097,3099],"[contractId, form]",[1654,1666],"[empId, form, getEmpowerment, params, user]",[3370,3372],"[duplicateId, editEmp, empowermentId]",[3507,3526],"[empowermentId, grid, gridInitialValues]",[7491,7497],"[getProducts, grid]",[11499,11500],"",[11499,11499],"\\",[1405,1420],"[grid, initialValues]",[1702,1704],"[loadProducts, user.tin, user.username]"]