[{"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\index.js":"1","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\translate.js":"2","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\reportWebVitals.js":"3","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\store.js":"4","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\App.jsx":"5","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\root-reducer.js":"6","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\root-saga.js":"7","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\env.js":"8","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\user\\user.selector.js":"9","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\user\\user.action.js":"10","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\font-awesome-icons\\font-awesome-icons.js":"11","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\admin\\admin.router.jsx":"12","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\frontend\\index.router.jsx":"13","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\header\\header.component.jsx":"14","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\index.component.jsx":"15","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\user\\user.reducer.js":"16","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\factura-draft\\factura-draft.reducer.js":"17","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\user\\user.action-types.js":"18","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\factura-draft\\factura-draft.action-types.js":"19","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\profile\\profile.component.jsx":"20","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\notifications\\notifications.component.jsx":"21","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\tty\\index.router.jsx":"22","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\contract\\index.router.jsx":"23","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\act\\index.router.jsx":"24","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\empowerment\\index.component.jsx":"25","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\password-change\\password-change.component.jsx":"26","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\account-form\\account-form.component.jsx":"27","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\user-products\\user-products.component.jsx":"28","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\act\\create\\create.component.jsx":"29","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\contract\\view\\view.component.jsx":"30","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\tty\\view\\view.component.jsx":"31","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\act\\view\\view.component.jsx":"32","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\contract\\create\\create.component.jsx":"33","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\common\\home\\home.component.jsx":"34","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\empowerment\\create\\create.component.jsx":"35","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\tty\\create\\create.component.jsx":"36","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\utils\\main.js":"37","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\models\\EmpowermentProduct.js":"38","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\models\\FacturaProduct.js":"39","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\models\\Empowerment.js":"40","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\common\\seller-form.component.jsx":"41","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\common\\buyer-form.component.jsx":"42","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\data-sheet-custom-selector\\custom-selector.component.jsx":"43","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\data-sheet-custom-measure-selector\\custom-selector.component.jsx":"44","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\common\\person-fetch\\person-fetch.component.jsx":"45","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\utils\\utils.js":"46","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\utils\\e-imzo.js":"47","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\utils\\home.config.provider.js":"48","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\dyna-grid\\dyna-grid.component.jsx":"49","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\payme-form\\payme-form.component.jsx":"50","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\classcodes-ajax-search\\classcodes-ajax-search.component.jsx":"51","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\factura\\create\\product-grid.component.jsx":"52","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\rich-text-parser\\rich-text-parser.component.jsx":"53","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\home\\home.component.jsx":"54","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\left-sidebar\\left-sidebar.component.jsx":"55","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\language-dropdown\\locale-dropdown.jsx":"56","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\right-sidebar\\right-sidebar.component.jsx":"57","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\factura\\index.component.jsx":"58","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\frontend\\choose_company\\choose-company.component.jsx":"59","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\frontend\\home\\home.component.jsx":"60","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\admin\\notification\\form.component.jsx":"61","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\admin-card\\admin-card.component.jsx":"62","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\factura\\create\\create-excel-type.component.jsx":"63","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\factura\\create\\create.component.jsx":"64","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\aferta-popup\\aferta-popup.component.jsx":"65","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\bindrouming-popup\\bindrouming-popup.component.jsx":"66","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\factura\\view\\view.component.jsx":"67","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\factura-draft\\factura-draft.action.js":"68","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\factura-draft\\factura-draft.selector.js":"69","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\models\\Factura.js":"70","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\grid-datetime\\grid-datetime.component.jsx":"71","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\grid-user-fetcher-input\\grid-user-fetcher-input.component.jsx":"72","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\grid-doctype-select\\grid-doctype-select.component.jsx":"73","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\grid-singlesidedtype-select.component\\grid-singlesidedtype-select.component.jsx":"74","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\pages\\auth\\login\\login.component.jsx":"75","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\pages\\auth\\index.js":"76","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\sevices\\loginService.js":"77","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\sevices\\api.js":"78","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\sevices\\tokenService.js":"79"},{"size":1027,"mtime":1618477229093,"results":"80","hashOfConfig":"81"},{"size":1131,"mtime":1618477229101,"results":"82","hashOfConfig":"81"},{"size":375,"mtime":1618477229100,"results":"83","hashOfConfig":"81"},{"size":675,"mtime":1618477229097,"results":"84","hashOfConfig":"81"},{"size":2881,"mtime":1618898654955,"results":"85","hashOfConfig":"81"},{"size":534,"mtime":1618477229096,"results":"86","hashOfConfig":"81"},{"size":118,"mtime":1618477229097,"results":"87","hashOfConfig":"81"},{"size":761,"mtime":1618477229085,"results":"88","hashOfConfig":"81"},{"size":990,"mtime":1618477229100,"results":"89","hashOfConfig":"81"},{"size":1056,"mtime":1618477229099,"results":"90","hashOfConfig":"81"},{"size":1404,"mtime":1618477229066,"results":"91","hashOfConfig":"81"},{"size":1184,"mtime":1618477229008,"results":"92","hashOfConfig":"81"},{"size":1184,"mtime":1618899664658,"results":"93","hashOfConfig":"81"},{"size":3821,"mtime":1618477229070,"results":"94","hashOfConfig":"81"},{"size":1746,"mtime":1618913938343,"results":"95","hashOfConfig":"81"},{"size":1875,"mtime":1618477229099,"results":"96","hashOfConfig":"81"},{"size":656,"mtime":1618477229095,"results":"97","hashOfConfig":"81"},{"size":486,"mtime":1618477229098,"results":"98","hashOfConfig":"81"},{"size":92,"mtime":1618477229094,"results":"99","hashOfConfig":"81"},{"size":1047,"mtime":1618477229046,"results":"100","hashOfConfig":"81"},{"size":1765,"mtime":1618477229043,"results":"101","hashOfConfig":"81"},{"size":701,"mtime":1618477229049,"results":"102","hashOfConfig":"81"},{"size":773,"mtime":1618477229024,"results":"103","hashOfConfig":"81"},{"size":704,"mtime":1618477229015,"results":"104","hashOfConfig":"81"},{"size":1122,"mtime":1618659834950,"results":"105","hashOfConfig":"81"},{"size":5151,"mtime":1618477229044,"results":"106","hashOfConfig":"81"},{"size":5588,"mtime":1618477229012,"results":"107","hashOfConfig":"81"},{"size":1874,"mtime":1618477229053,"results":"108","hashOfConfig":"81"},{"size":15030,"mtime":1618477229013,"results":"109","hashOfConfig":"81"},{"size":794,"mtime":1618477229025,"results":"110","hashOfConfig":"81"},{"size":769,"mtime":1618477229050,"results":"111","hashOfConfig":"81"},{"size":769,"mtime":1618477229016,"results":"112","hashOfConfig":"81"},{"size":18597,"mtime":1618477229023,"results":"113","hashOfConfig":"81"},{"size":2733,"mtime":1618766598393,"results":"114","hashOfConfig":"81"},{"size":17700,"mtime":1618823515263,"results":"115","hashOfConfig":"81"},{"size":23703,"mtime":1618477229049,"results":"116","hashOfConfig":"81"},{"size":11919,"mtime":1618477229104,"results":"117","hashOfConfig":"81"},{"size":991,"mtime":1618817884596,"results":"118","hashOfConfig":"81"},{"size":3500,"mtime":1618601052067,"results":"119","hashOfConfig":"81"},{"size":3457,"mtime":1618817884814,"results":"120","hashOfConfig":"81"},{"size":6687,"mtime":1618477229022,"results":"121","hashOfConfig":"81"},{"size":13341,"mtime":1618477229019,"results":"122","hashOfConfig":"81"},{"size":1980,"mtime":1618477229059,"results":"123","hashOfConfig":"81"},{"size":3281,"mtime":1618477229058,"results":"124","hashOfConfig":"81"},{"size":2542,"mtime":1618477229021,"results":"125","hashOfConfig":"81"},{"size":668,"mtime":1618477229105,"results":"126","hashOfConfig":"81"},{"size":28500,"mtime":1618477229102,"results":"127","hashOfConfig":"81"},{"size":18235,"mtime":1618895648682,"results":"128","hashOfConfig":"81"},{"size":15938,"mtime":1618811168966,"results":"129","hashOfConfig":"81"},{"size":284,"mtime":1618477229045,"results":"130","hashOfConfig":"81"},{"size":2606,"mtime":1618477229056,"results":"131","hashOfConfig":"81"},{"size":12195,"mtime":1618895648587,"results":"132","hashOfConfig":"81"},{"size":360,"mtime":1618477229080,"results":"133","hashOfConfig":"81"},{"size":5237,"mtime":1618477229038,"results":"134","hashOfConfig":"81"},{"size":1580,"mtime":1618477229073,"results":"135","hashOfConfig":"81"},{"size":2499,"mtime":1618477229072,"results":"136","hashOfConfig":"81"},{"size":8360,"mtime":1618915844032,"results":"137","hashOfConfig":"81"},{"size":1428,"mtime":1618895648588,"results":"138","hashOfConfig":"81"},{"size":4214,"mtime":1618477229089,"results":"139","hashOfConfig":"81"},{"size":257,"mtime":1618477229090,"results":"140","hashOfConfig":"81"},{"size":7325,"mtime":1618477229009,"results":"141","hashOfConfig":"81"},{"size":708,"mtime":1618477229054,"results":"142","hashOfConfig":"81"},{"size":12443,"mtime":1618477229030,"results":"143","hashOfConfig":"81"},{"size":16573,"mtime":1618895648787,"results":"144","hashOfConfig":"81"},{"size":3339,"mtime":1618477229017,"results":"145","hashOfConfig":"81"},{"size":3344,"mtime":1618477229018,"results":"146","hashOfConfig":"81"},{"size":14737,"mtime":1618895648589,"results":"147","hashOfConfig":"81"},{"size":215,"mtime":1618477229095,"results":"148","hashOfConfig":"81"},{"size":205,"mtime":1618477229096,"results":"149","hashOfConfig":"81"},{"size":6708,"mtime":1618483878073,"results":"150","hashOfConfig":"81"},{"size":402,"mtime":1618477229067,"results":"151","hashOfConfig":"81"},{"size":685,"mtime":1618477229069,"results":"152","hashOfConfig":"81"},{"size":1220,"mtime":1618477229068,"results":"153","hashOfConfig":"81"},{"size":1328,"mtime":1618477229069,"results":"154","hashOfConfig":"81"},{"size":11332,"mtime":1618921981018,"results":"155","hashOfConfig":"81"},{"size":565,"mtime":1618922153158,"results":"156","hashOfConfig":"81"},{"size":325,"mtime":1618913339524,"results":"157","hashOfConfig":"81"},{"size":311,"mtime":1618921856248,"results":"158","hashOfConfig":"81"},{"size":149,"mtime":1618921773493,"results":"159","hashOfConfig":"81"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},"gb797",{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"162"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"162"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"162"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"162"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"162"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"162"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"162"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"162"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"162"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"162"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"162"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"162"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"162"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"162"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"162"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"162"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"162"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"162"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"162"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"162"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"162"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"162"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"162"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"162"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"162"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"162"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"162"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"162"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"162"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"162"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"162"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"162"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"162"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"162"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"162"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"162"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"162"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\index.js",[],["356","357"],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\translate.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\reportWebVitals.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\store.js",["358"],"import { createStore, applyMiddleware } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport { persistStore } from 'redux-persist';\r\nimport rootReducer from './root-reducer';\r\nimport creatSagaMiddleware from 'redux-saga';\r\nimport rootSaga from './root-saga';\r\n\r\nconst sagaMiddleWare = creatSagaMiddleware();\r\n\r\nconst middleWares = [sagaMiddleWare];\r\n\r\nmiddleWares.push(logger);\r\n\r\n// if(process.env.NODE_ENV ==='development'){\r\n//     middleWares.push(logger);\r\n// }\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middleWares));\r\n\r\nsagaMiddleWare.run(rootSaga)\r\n\r\nexport const persistor = persistStore(store);\r\n\r\nexport default { store, persistor };","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\App.jsx",["359","360","361","362"],"import './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport './components/font-awesome-icons/font-awesome-icons';\r\nimport CabinetIndex from './cabinet/index.component';\r\nimport moment from 'moment';\r\nimport \"moment/locale/uz-latn\";\r\nimport 'moment/locale/ru';\r\nimport axios from 'axios';\r\nimport FrontIndexRouter from './frontend/index.router';\r\nimport Header from './components/header/header.component';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectCurrentUser, selectLoadedKey, selectToken } from './redux/user/user.selector';\r\nimport { logOut } from './redux/user/user.action';\r\nimport { API_HOST } from './env';\r\nimport AdminIndexRouter from './admin/admin.router';\r\nimport { message, Modal } from 'antd';\r\nimport { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Auth from \"./pages/auth\";\r\n\r\nconst ForAuthenticatedUsers=()=>{\r\n    return(\r\n        <>\r\n            <Switch>\r\n                <Route exact path=\"/\" render={() => < Redirect to=\"/home\" />} />\r\n                <Route path=\"/home\" component={FrontIndexRouter} />\r\n                <Route path=\"/cabinet\" render={()=> <CabinetIndex /> } />\r\n                <Route path=\"/admin\" render={()=> <AdminIndexRouter /> }/>\r\n            </Switch>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst App = ({ user, token, loadedKey, signOut }) => {\r\n\r\n    moment.locale('uz-latn');\r\n    moment.defaultFormat='MMMM Do YYYY'\r\n    const { t } = useTranslation();\r\n\r\n    axios.defaults.baseURL = API_HOST\r\n\r\n    axios.defaults.headers.common['Authorization'] = \"Bearer \" + token;\r\n\r\n    useEffect(()=>{\r\n\r\n        if (loadedKey?.time + 1000 * 60 * 30 < Date.now()){\r\n            console.log(\"Hi\")\r\n            signOut()\r\n            message.warn((t(\"Sessiyangiz tugadi!\")))\r\n        }\r\n    }, [])\r\n    \r\n   \r\n\r\n    return (\r\n        <div className=\"App\">\r\n            \r\n            {/*<Header />*/}\r\n\r\n            {\r\n                user?<ForAuthenticatedUsers/>:<Auth/>\r\n            }\r\n            {/*<Switch>*/}\r\n            {/*    <Route exact path=\"/\" render={() => < Redirect to=\"/home\" />} />*/}\r\n            {/*    <Route path=\"/home\" component={FrontIndexRouter} />*/}\r\n            {/*    <Route path=\"/cabinet\" render={() => user ? <CabinetIndex /> : <Redirect to=\"/home/login\" />} />*/}\r\n            {/*    <Route path=\"/admin\" render={()=>user.role_id===1? <AdminIndexRouter /> : <Redirect to=\"/home\" />}/>*/}\r\n            {/*</Switch>*/}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectCurrentUser,\r\n    token: selectToken,\r\n    loadedKey: selectLoadedKey\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    signOut: () => dispatch(logOut())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\root-reducer.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\root-saga.js",["363"],"import { all, call } from 'redux-saga/effects';\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n\r\n    ])\r\n}","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\env.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\user\\user.selector.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\user\\user.action.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\font-awesome-icons\\font-awesome-icons.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\admin\\admin.router.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\frontend\\index.router.jsx",["364","365"],"import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect, Route } from 'react-router-dom'\r\nimport { createStructuredSelector } from 'reselect'\r\nimport Home from './home/home.component'\r\nimport Login from '../pages/auth/login/login.component'\r\nimport { selectCurrentUser } from '../redux/user/user.selector'\r\nimport ChooseCompany from './choose_company/choose-company.component'\r\n\r\nconst FrontIndexRouter = ({ match, user }) => {\r\n    console.log(user)\r\n    return (\r\n        <div>\r\n            <Route exact path={`${match.path}`} component={ Home } />\r\n            {/* <Route exact path={`${match.path}/login`} component={ Login } /> */}\r\n            <Route\r\n                exact={true}\r\n                path={`${match.path}/choosecompany`}\r\n                component={ChooseCompany}\r\n            />\r\n            {/*<Route */}\r\n            {/*    exact */}\r\n            {/*    path={`${match.path}/login`} */}\r\n            {/*    component={ Login } */}\r\n            {/*    />*/}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectCurrentUser,\r\n})\r\n\r\nexport default connect(mapStateToProps)(FrontIndexRouter)\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\header\\header.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\index.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\user\\user.reducer.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\factura-draft\\factura-draft.reducer.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\user\\user.action-types.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\factura-draft\\factura-draft.action-types.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\profile\\profile.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\notifications\\notifications.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\tty\\index.router.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\contract\\index.router.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\act\\index.router.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\empowerment\\index.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\password-change\\password-change.component.jsx",["366"],"import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Form, Row, Col, Input, Button, message } from 'antd'\r\nimport axios from 'axios'\r\nimport React, {useState} from 'react'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { connect } from 'react-redux'\r\nimport { createStructuredSelector } from 'reselect'\r\nimport { selectLoadedKey } from '../../redux/user/user.selector'\r\nimport { EIMZOClient } from '../../utils/e-imzo'\r\nimport PaymeForm from '../payme-form/payme-form.component'\r\n\r\nconst PasswordChange = ({ loadedKey }) => {\r\n\r\n    const { t} = useTranslation();\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    \r\n    const handleFinish = values=>{\r\n        setLoading(true);\r\n        EIMZOClient.createPkcs7(\r\n            loadedKey.id,\r\n            values.password,\r\n            null,\r\n            pkcs7=>{\r\n                axios({\r\n                    url: \"user/set-password\",\r\n                    method:\"post\",\r\n                    data: {\r\n                        pkcs7: pkcs7,\r\n                        password: values.password,\r\n                        phone: values.phone\r\n                    }\r\n                })\r\n            },\r\n            (e, r)=>{\r\n                message.error(r)\r\n                console.log(\"r\",r,\"e\",e)\r\n            }\r\n            )\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Form\r\n                onFinish={handleFinish}\r\n            >\r\n                <Row justify=\"space-between\">\r\n                    \r\n                    <Col md={11}>\r\n                        <Form.Item>\r\n                            <Form.Item\r\n                                key={`dyna-form-facutura-no-old-tin`}\r\n                                name=\"password\"\r\n                            >\r\n                                <Input.Password\r\n                                    rules={[{ required: true }]}\r\n                                    size=\"large\"\r\n                                />\r\n                            </Form.Item>\r\n                            <span className=\"custom-input-label-1\">{t(\"Yangi parol\")}</span>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col md={11}>\r\n                        <Form.Item>\r\n                            <Form.Item\r\n                                key={`dyna-form-facutura-no-old-tphone`}\r\n                                name=\"phone\"\r\n                            >\r\n                                <Input\r\n                                    placeholder=\"+998 xx xxx xx xx\"\r\n                                    rules={[{ required: true }]}\r\n                                    size=\"large\"\r\n                                />\r\n                            </Form.Item>\r\n                            <span className=\"custom-input-label-1\">{(\"Telefon raqam\")}</span>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col md={11}>\r\n                        <Form.Item>\r\n                            <Form.Item\r\n                                name=\"confirm\"\r\n                                dependencies={['password']}\r\n                                hasFeedback\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Please confirm your password!',\r\n                                    },\r\n                                    ({ getFieldValue }) => ({\r\n                                        validator(_, value) {\r\n                                            if (!value || getFieldValue('password') === value) {\r\n                                                return Promise.resolve();\r\n                                            }\r\n                                            return Promise.reject(new Error('The two passwords that you entered do not match!'));\r\n                                        },\r\n                                    }),\r\n                                ]}\r\n                            >\r\n                                <Input.Password\r\n                                    rules={[{ required: true }]}\r\n                                    size=\"large\"\r\n                                />\r\n                            </Form.Item>\r\n                            <span className=\"custom-input-label-1\">Prolni tasdiqlang</span>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col md={11}>\r\n                        <Button\r\n                            htmlType=\"submit\"\r\n                            loading={loading}\r\n                            className=\"factra-action-btns sing-btn\"\r\n                            size=\"large\"\r\n                            icon={<FontAwesomeIcon icon=\"save\" className=\"factura-action-btn-icons\" />}>\r\n                            Saqlash\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    loadedKey: selectLoadedKey,\r\n})\r\n\r\nexport default connect(mapStateToProps)(PasswordChange)\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\account-form\\account-form.component.jsx",["367"],"import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Col, Input, Row, Form, Button, message, Select} from 'antd';\r\nimport axios from 'axios';\r\nimport React from 'react'\r\nimport { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { setUser } from '../../redux/user/user.action';\r\nimport { selectCurrentUser } from '../../redux/user/user.selector';\r\nimport { TextInBracket } from '../../utils/utils';\r\n\r\nconst { Option } = Select;\r\n\r\nconst AccountForm = ({user, setUserOnly}) => {\r\n\r\n    const { t } = useTranslation();\r\n\r\n    const [form] = Form.useForm();\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const onSubmit=(values)=>{\r\n        console.log(JSON.stringify(values));\r\n        setLoading(true)\r\n        axios({\r\n            method: \"post\",\r\n            data: values,\r\n            \r\n            url: `company/update?id=${user.id}`\r\n        }).then(res=>{\r\n            setLoading(false)\r\n            //setUserOnly(res.data)\r\n            message.success(\"Succesfully updated!\")\r\n        }).catch(err=>{\r\n            setLoading(false)\r\n            console.log(err)\r\n        })\r\n    }\r\n    const fields = [\r\n        {\r\n            name: \"name\",\r\n            label: \"Nomi\"\r\n        },\r\n        {\r\n            name: \"address\",\r\n            label: \"Manzil\"\r\n        },\r\n        {\r\n            name: \"oked\",\r\n            label: \"OKED\"\r\n        },\r\n        {\r\n            name: \"director_fio\",\r\n            label: \"Direktor\"\r\n        },\r\n        {\r\n            name: \"accountant\",\r\n            label: \"Hisobchi\"\r\n        },\r\n        // {\r\n        //     name: \"phone\",\r\n        //     label: \"Telephone\"\r\n        // },\r\n        {\r\n            name: \"bank_account\",\r\n            label: \"Hisob raqam\"\r\n        },\r\n        {\r\n            name: \"mfo\",\r\n            label: \"MFO\"\r\n        },\r\n        \r\n    ]\r\n   \r\n\r\n    return (\r\n        \r\n            <Form\r\n                initialValues={user}\r\n                onFinish={onSubmit}\r\n                form={form}\r\n            >\r\n                <Row justify=\"space-between\">\r\n                    <Col md={11}>\r\n                    \r\n                        <Form.Item>\r\n                            <Form.Item\r\n                                initialValue={user.tin??user.username}\r\n                                key={`dyna-form-facutura-no-old-tin`}\r\n                                name=\"tin\"\r\n                                >\r\n                                <Input\r\n                                    rules={[{ required: true }]}\r\n                                    size=\"large\"\r\n                                    disabled\r\n                                    />\r\n                            </Form.Item>\r\n                            <span className=\"custom-input-label-1\">{t(\"STIR\")}</span>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    {\r\n                        fields.map(field => <Col md={11}>\r\n                            <Form.Item>\r\n                                <Form.Item\r\n                                    key={`dyna-form-facutura-no-old-${field.name}`}\r\n                                    name={field.name}\r\n                                >\r\n                                    <Input\r\n                                        rules={[{ required: true }]}\r\n                                        size=\"large\"\r\n                                    />\r\n                                </Form.Item>\r\n                                <span className=\"custom-input-label-1\">{field.label}</span>\r\n                            </Form.Item>\r\n                        </Col>)\r\n                    }\r\n                    <Col md={11}>\r\n                        <Form.Item>\r\n                            <Form.Item\r\n                                key={`dyna-form-facutura-no-old-tin-vil`}\r\n                                name=\"ns10_code\"\r\n                            >\r\n                                <Select\r\n                                    rules={[{ required: true }]}\r\n                                    size=\"large\"\r\n                                    bordered={false}\r\n                                >\r\n\r\n                                <Option value={1}>Tashkent</Option>\r\n                                <Option value={2}>Andijon</Option>\r\n                                <Option value={3}>Tashkent</Option>\r\n                                <Option value={14}>Namangan</Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n                            <span className=\"custom-input-label-1\">{t(\"Viloyat\")}</span>\r\n                        </Form.Item>\r\n                    </Col>\r\n                   <Col md={11}>\r\n                        <Button\r\n                            htmlType=\"submit\"\r\n                            loading={loading}\r\n                            className=\"factra-action-btns sing-btn\"\r\n                            size=\"large\"\r\n                            icon={<FontAwesomeIcon icon=\"save\" className=\"factura-action-btn-icons\" />}>\r\n                                Saqlash\r\n                        </Button>\r\n                   </Col>\r\n                </Row>\r\n            </Form>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch=>({\r\n    setUserOnly: (user)=>dispatch(setUser(user))\r\n})\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectCurrentUser\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AccountForm)\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\user-products\\user-products.component.jsx",["368"],"import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Select, Spin } from 'antd'\r\nimport axios from 'axios'\r\nimport React, { useState } from 'react'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { connect } from 'react-redux'\r\nimport { createStructuredSelector } from 'reselect'\r\nimport ClasscodeAjaxSearch from '../../components/classcodes-ajax-search/classcodes-ajax-search.component'\r\nimport { selectCurrentUser } from '../../redux/user/user.selector'\r\nimport HomePage from '../common/home/home.component'\r\n\r\nconst { Option } = Select;\r\n\r\nconst UserProducts = ({ user }) => {\r\n\r\n    const { t } = useTranslation();\r\n    const [spinning, setSpinning] = useState(false);    \r\n    \r\n    const handleFetchTasnifSoliq = ()=>{\r\n        setSpinning(true)\r\n        axios({\r\n            url: `classifications/reload?tin=${user.tin??user.username}`,\r\n            method: \"GET\"\r\n        }).then(res=>{\r\n            setSpinning(false)\r\n            //window.location.reload()\r\n        }).catch(ex=>{\r\n            setSpinning(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Spin spinning={spinning}>\r\n                <ClasscodeAjaxSearch />\r\n            <HomePage \r\n            \r\n            hideTabs\r\n                customButton={<div \r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={handleFetchTasnifSoliq}><span><FontAwesomeIcon icon=\"sync-alt\" /> {t(\"Synxronizatsiya\")}</span></div>}\r\n            doc=\"user-products\"\r\n            addParams={[\r\n                {\r\n                    name: \"tin\",\r\n                    value: user.tin ?? user.username\r\n                }\r\n            ]}\r\n            />\r\n            </Spin>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectCurrentUser\r\n})\r\n\r\nexport default connect(mapStateToProps)(UserProducts)\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\act\\create\\create.component.jsx",["369","370","371","372","373","374"],"import React, { useState, useEffect } from 'react';\r\nimport 'react-datasheet/lib/react-datasheet.css';\r\nimport Datasheet from 'react-datasheet';\r\nimport SelectEditor from '../../../components/data-sheet-custom-selector/custom-selector.component';\r\nimport SelectMeasureEditor from '../../../components/data-sheet-custom-measure-selector/custom-selector.component';\r\nimport { Button, Input, Form, Row, Col, DatePicker, Select, Upload, message } from 'antd';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport './create.style.scss';\r\nimport axios from 'axios';\r\nimport BuyerForm from '../../common/buyer-form.component';\r\nimport SellerForm from '../../common/seller-form.component';\r\nimport { connect } from 'react-redux';\r\nimport { selectCurrentUser, selectToken } from '../../../redux/user/user.selector';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport moment from 'moment';\r\nimport { \r\n  FullscreenOutlined, \r\n  FullscreenExitOutlined, \r\n  } from '@ant-design/icons';\r\nimport { convertProductsToGrid, FIRST_ACT_GRID_ROW } from '../../../utils/main';\r\nimport TextArea from 'antd/lib/input/TextArea';\r\n\r\nexport const setActClient = (seller, client) => {\r\n  return `Биз қуйида имзо чекувчилар, \"${seller ?? \"___________\"}\" бир томондан,бундан кейин Пудратчи деб номланади ва \"${client ?? '__________'}\" бошқа томондан, бундан кейин Буюртмачи деб номланади, иш Буюртмачининг талабларига мувофиқ тўлиқ бажарилганлиги тўғрисида акт туздик.`;\r\n\r\n}\r\n\r\nconst ActForm = ({ token, match, user })=> {\r\n\r\n  const [form] = Form.useForm();\r\n  const { actId } = match.params;\r\n  const [initialData, setInitialData] = useState({actText: setActClient(user.name)})\r\n  const [isLoading, setIsloading] = useState(false);\r\n\r\n \r\n\r\n  useEffect(()=>{\r\n    if(actId){\r\n\r\n      //fetch fatura data\r\n      axios({\r\n        url: `/api/v1/acts/${actId}`,\r\n        method: \"GET\",\r\n      }).then(res=>{\r\n        let data = res.data;\r\n        data.contractDate=moment(data.contractDate);\r\n        data.created_at=moment(data.created_at);\r\n        data.actDate=moment(data.actDate);\r\n        data.updated_at=moment(data.updated_at);\r\n        console.log(data);\r\n  \r\n        setInitialData(res.data);\r\n        form.resetFields();\r\n        setGrid(convertProductsToGrid(res.data.act_products, 'act'));\r\n      }).catch(err=>{\r\n        console.log(err);\r\n      })\r\n      //end fetch factura data;\r\n    }\r\n  }, [])\r\n  \r\n\r\n  const validateMessages = {\r\n    required: 'Bu maydon majburiy!',\r\n    types: {\r\n      email: '${label} is not a valid email!',\r\n      number: '${label} is not a valid number!',\r\n    },\r\n    number: {\r\n      range: '${label} must be between ${min} and ${max}',\r\n    },\r\n    \r\n  };\r\n\r\n  const [fullView, toglleFullView] = useState(false)\r\n\r\n\r\n  const [grid, setGrid] = useState([\r\n    FIRST_ACT_GRID_ROW,\r\n    [\r\n      { readOnly: true, value: 1 },                           //0 ordNo\r\n      { value: \"\" },                                          //1 product name\r\n      { value: \"\", dataEditor:  SelectMeasureEditor },        //2 measure\r\n      { value: '' },                                          //3 amount\r\n      { value: \"\", },                                         //4 price\r\n      { value: '', readOnly: true,}                           //6 total\r\n    ], \r\n    [\r\n      { readOnly: true, value: 2 },                           //0 ordNo\r\n      { value: \"\" },                                          //1 product name\r\n      { value: \"\", dataEditor:  SelectMeasureEditor },        //2 measure\r\n      { value: '' },                                          //3 amount\r\n      { value: \"\", },                                         //4 price\r\n      { value: '', readOnly: true,}                           //6 total\r\n    ],  \r\n    [\r\n      { readOnly: true, value: 3 },                           //0 ordNo\r\n      { value: \"\" },                                          //1 product name\r\n      { value: \"\", dataEditor:  SelectMeasureEditor },        //2 measure\r\n      { value: '' },                                          //3 amount\r\n      { value: \"\", },                                         //4 price\r\n      { value: '', readOnly: true,}                           //6 total\r\n    ], \r\n    [\r\n      { readOnly: true, value: 4 },                           //0 ordNo\r\n      { value: \"\" },                                          //1 product name\r\n      { value: \"\", dataEditor:  SelectMeasureEditor },        //2 measure\r\n      { value: '' },                                          //3 amount\r\n      { value: \"\", },                                         //4 price\r\n      { value: '', readOnly: true,}                           //6 total\r\n    ], \r\n  ])\r\n\r\n\r\n\r\n  //#region data-sheet methods\r\n  const handleRemoveRow = (rowId)=>{\r\n    console.log(rowId)\r\n    grid.splice(rowId, 1)\r\n    setGrid([...grid])\r\n  }\r\n\r\n  const valueRenderer = cell => cell.value;\r\n  \r\n  const onCellsChanged = changes => {\r\n    changes.forEach(({ cell, row, col, value }, index) => {\r\n        //this sets changed values\r\n        grid[row][col] = { ...grid[row][col], value };\r\n        \r\n\r\n        //Lets calculate\r\n        grid[row][5] = { ...grid[row][5], value: grid[row][3].value && grid[row][4].value ? grid[row][3].value * grid[row][4].value : 0};\r\n     \r\n    });\r\n     setGrid([...grid]);\r\n  };\r\n\r\n  const handleAddRow = ()=>{\r\n    \r\n    const sampleRow = [\r\n        { readOnly: true, value: grid.length },                 //0 ordNo\r\n        { value: \"\" },                                          //1 product name\r\n        { value: \"\", dataEditor:  SelectMeasureEditor },        //2 measure\r\n        { value: '' },                                          //3 amount\r\n        { value: \"\", },                                         //4 price\r\n        { value: '', readOnly: true,}                           //5 total\r\n      ];\r\n    \r\n\r\n    let newgrid = [...grid, sampleRow];\r\n\r\n     setGrid(newgrid)\r\n  }\r\n\r\n  const onContextMenu = (e, cell, i, j) =>\r\n    cell.readOnly ? e.preventDefault() : null;\r\n//#endregion\r\n  \r\n  //#region form methods\r\n\r\n  const handleSubmit = (values)=>{\r\n    setIsloading(true);\r\n    console.log(values)\r\n    if(actId){\r\n      axios({\r\n        url:`/api/v1/acts/${actId}`,\r\n        method: 'PATCH',\r\n        data: {act: values, products: grid}\r\n      }).then(res=>{\r\n        setIsloading(false);\r\n        if(res.data.ok){\r\n          message.success(\"Akt yangilandi!\");\r\n        }\r\n        else{\r\n          message.error(\"Akt yangilashda xatolik!\");\r\n        }\r\n        console.log(res)\r\n      }).catch(err=>{\r\n        setIsloading(false)\r\n        message.error(\"Akt yangilashda xatolik!\");\r\n        console.log(err)\r\n      })\r\n    } else{\r\n      axios({\r\n        url:'/api/v1/acts',\r\n        method: 'post',\r\n        data: {act: values, products: grid}\r\n      }).then(res=>{\r\n        setIsloading(false)\r\n        if(res.data.ok){\r\n          message.success(\"Akt yaratildi!\");\r\n        }\r\n        else{\r\n          message.error(\"Akt yaratishda xatolik!\");\r\n        }\r\n        console.log(res)\r\n      }).catch(err=>{\r\n        setIsloading(false)\r\n        message.error(\"Akt yaratishda xatolik!\");\r\n        console.log(err)\r\n      })\r\n    }\r\n    \r\n\r\n  }\r\n\r\n  const handleImportExecl =(value)=>{\r\n    console.log(\"me fired\")\r\n\r\n    if(value.file.status==\"done\"){\r\n      \r\n      const { response } = value.file\r\n\r\n      response.excel.forEach((element, index)=>{\r\n        element[0].value = index + 1;\r\n        element[0].readOnly = true;\r\n        element[2].dataEditor = SelectEditor;\r\n        element[4].dataEditor = SelectMeasureEditor;\r\n      })\r\n\r\n      setGrid([grid[0], ...response.excel])\r\n      console.log(response)\r\n    }\r\n  }\r\n\r\n  //#endregion\r\n  \r\n  return (\r\n    <div style={{padding: 15}}>\r\n      <Form\r\n        initialValues={initialData}\r\n        form={form}\r\n        name=\"factura\"\r\n        onFinish = {handleSubmit}\r\n        scrollToFirstError\r\n        validateMessages={validateMessages}\r\n      >\r\n\r\n      <div className=\"factura-data-sheet-container\">\r\n      <h3>Akt yaratish</h3>\r\n       \r\n      <Row justify=\"space-between\">\r\n            <Col md={11}>\r\n            <Form.Item>\r\n              <Form.Item \r\n                rules={[{required: true}]}\r\n                key=\"dyna-form-facutura-no\"\r\n                name=\"actNo\">\r\n                  <Input\r\n                    size=\"large\"\r\n                    placeholder=\"Akt raqami\" />\r\n              </Form.Item>\r\n                  <span className=\"custom-input-label-1\">Akt raqami</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n            <Form.Item>\r\n              <Form.Item \r\n                key=\"dyna-form-item-inn-date\"\r\n                name=\"actDate\"\r\n                rules={[{required: true}]}>\r\n                  <DatePicker                \r\n                    size=\"large\"\r\n                    placeholder=\"Akt sanasi\" />\r\n              </Form.Item>\r\n                  <span className=\"custom-input-label-1\">Akt sanasi</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n            <Form.Item>\r\n              <Form.Item \r\n                rules={[{required: true}]}\r\n                key=\"dyna-form-item-contract-n0\"\r\n                name=\"contractNo\">\r\n                  <Input\r\n                    size=\"large\"\r\n                    placeholder=\"Shartnoma raqami\" />\r\n              </Form.Item>\r\n                  <span className=\"custom-input-label-1\">Shartnoma raqami</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n            <Form.Item>\r\n              <Form.Item \r\n                rules={[{required: true}]}\r\n                key=\"dyna-form-item-contract-date\"\r\n                name=\"contractDate\">\r\n                  <DatePicker\r\n                    size=\"large\"\r\n                    placeholder=\"Shartnoma sanasi\" />\r\n              </Form.Item>\r\n                  <span className=\"custom-input-label-1\">Shartnoma sanasi</span>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n      </div>\r\n\r\n      <div className=\"factura-data-sheet-container\">\r\n        \r\n        <Row justify=\"space-between\">\r\n        <Col md={11}>  \r\n          <SellerForm form={form} docType=\"act\" />\r\n        </Col>\r\n\r\n        <Col md={11}>\r\n          <BuyerForm form={ form } docType=\"act\" />\r\n        </Col>\r\n      </Row>\r\n      </div>\r\n      \r\n      <div className=\"factura-data-sheet-container\">\r\n            <h3>Akt mazmuni</h3>\r\n              <Form.Item name=\"actText\">\r\n                <TextArea size=\"large\" rows={4} />\r\n              </Form.Item>\r\n          </div>\r\n\r\n      <div className={`factura-data-sheet-container ${fullView ? 'grid-full-view' : null}`}>\r\n        <div style={{marginBottom: 10, display: 'flex', justifyContent:'space-between'}}>\r\n          <div style={{display: 'flex'}}>\r\n              <Upload \r\n                headers={{\r\n                  Authorization: \"Bearer \" + token\r\n                }}\r\n                multiple={false}\r\n                action=\"http://127.0.0.1:8000/api/v1/factura-products/read-excel\"\r\n                accept=\".xlsx, .xls\" \r\n                onChange={handleImportExecl}>\r\n                \r\n                  <Button style={{marginRight: 10}}>Exceldan yuklash</Button>\r\n               \r\n              </Upload>\r\n              <a target=\"_blank\" href=\"../../../excels/on_doc_factura_products.xlsx\" download>\r\n                <Button >\r\n                  Shablon yuklash\r\n                </Button>\r\n              </a>\r\n            </div>\r\n            <Button\r\n              type=\"primary\"\r\n              icon={fullView ? <FullscreenExitOutlined /> : <FullscreenOutlined />} \r\n              onClick={()=>toglleFullView(!fullView)}>\r\n                { fullView ? \"Kichraytirish\" : \"Kengaytirish\" }\r\n            </Button>\r\n        </div>\r\n        \r\n      <div style={{overflowX: 'auto'}} >\r\n        <div style={{width: '100%'}}>\r\n          <Datasheet\r\n            data={ grid}\r\n            valueRenderer={ valueRenderer}\r\n            onContextMenu={ onContextMenu}\r\n            onCellsChanged={ onCellsChanged}\r\n          />\r\n        </div>\r\n      </div>\r\n      <Button \r\n        size=\"large\" \r\n        style={{marginTop: 20, marginRight: 7, width: 220}} \r\n        type=\"primary\" \r\n        icon={<FontAwesomeIcon \r\n          style={{marginRight: 7}} \r\n          icon={[\"far\", \"plus-square\"]} />} \r\n        onClick={  handleAddRow }>Qo'shish</Button>\r\n      \r\n      <Button \r\n        size=\"large\" \r\n        style={{marginTop: 20, width: 220 }} \r\n        danger\r\n        type=\"primary\" \r\n        icon={<FontAwesomeIcon \r\n          style={{marginRight: 7}} \r\n          icon={[\"far\", \"trash-alt\"]} />} \r\n        onClick={ ()=>{ if(grid.length>1){ handleRemoveRow(grid.length-1) }}  }>Oxirgi qatorni o'chirish</Button>\r\n      </div>\r\n          \r\n          \r\n\r\n        <div className=\"factura-data-sheet-container\">\r\n\r\n<Row justify=\"space-between\">\r\n  <Col md={24} >\r\n    <Form.Item>\r\n      <Form.Item \r\n    key=\"selenote-field\"\r\n    name=\"notes\">\r\n      <Input\r\n        size=\"large\"\r\n        placeholder=\"Қўшимча майдон\" />\r\n    </Form.Item>\r\n      <span className=\"custom-input-label-1\">Қўшимча майдон</span>\r\n    </Form.Item>\r\n  </Col>\r\n  \r\n</Row>\r\n</div>\r\n          <div className=\"factura-data-sheet-container\">\r\n            <Row justify=\"space-around\">\r\n              <Col >\r\n                <Button \r\n                  loading={isLoading}\r\n                  primary\r\n                  htmlType=\"submit\"\r\n                  className=\"factra-action-btns save-btn\" \r\n                  size=\"large\"\r\n                  icon={<FontAwesomeIcon icon=\"save\" className=\"factura-action-btn-icons\"  />}>\r\n                    Сақлаб қолиш\r\n                  </Button>\r\n              </Col>\r\n              <Col>\r\n                <Button \r\n                  className=\"factra-action-btns sing-btn\" \r\n                  size=\"large\"\r\n                  icon={<FontAwesomeIcon icon=\"signature\" className=\"factura-action-btn-icons\" />}>\r\n                    Имзолаш\r\n                  </Button>\r\n              </Col>\r\n              <Col>\r\n                <Button \r\n                  icon={<FontAwesomeIcon icon=\"ban\" className=\"factura-action-btn-icons\" />} \r\n                  danger \r\n                  className=\"factra-action-btns\" \r\n                  size=\"large\">\r\n                    Бекор қилиш\r\n                  </Button>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n\r\n          <Form.Item\r\n          name=\"actId\"\r\n          key=\"act-id\"\r\n          >\r\n            <Input type=\"hidden\" />\r\n          </Form.Item>\r\n\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  token: selectToken,\r\n  user: selectCurrentUser\r\n})\r\n\r\nexport default connect(mapStateToProps)(ActForm);","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\contract\\view\\view.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\tty\\view\\view.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\act\\view\\view.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\contract\\create\\create.component.jsx",["375","376","377","378","379","380","381","382"],"import React, { useState, useEffect } from 'react';\r\nimport 'react-datasheet/lib/react-datasheet.css';\r\nimport Datasheet from 'react-datasheet';\r\nimport SelectMeasureEditor from '../../../components/data-sheet-custom-measure-selector/custom-selector.component';\r\nimport { Button, Input, Form, Row, Col, DatePicker, Upload, Divider, message } from 'antd';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n//import './create.style.scss';\r\nimport axios from 'axios';\r\nimport BuyerForm from '../../common/buyer-form.component';\r\nimport SellerForm from '../../common/seller-form.component';\r\nimport { connect } from 'react-redux';\r\nimport { selectToken } from '../../../redux/user/user.selector';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport moment from 'moment';\r\nimport {\r\n  FullscreenOutlined,\r\n  FullscreenExitOutlined,\r\n  PlusOutlined\r\n} from '@ant-design/icons';\r\nimport { convertProductsToGrid, FIRST_CONTRACT_GRID_ROW } from '../../../utils/main';\r\nimport SelectEditor from '../../../components/data-sheet-custom-selector/custom-selector.component';\r\nimport TextArea from 'antd/lib/input/TextArea';\r\n\r\nconst ConractCreateForm = ({ token, match }) => {\r\n\r\n  const [form] = Form.useForm();\r\n  const { contractId } = match.params;\r\n  const [initialData, setInitialData] = useState();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (contractId) {\r\n\r\n      //fetch fatura data\r\n      axios({\r\n        url: `/api/v1/contracts/${contractId}`,\r\n        method: \"GET\",\r\n      }).then(res => {\r\n        let data = res.data;\r\n        data.contractDate = moment(data.contractDate);\r\n        data.created_at = moment(data.created_at);\r\n        data.contractExpireDate = moment(data.contractExpireDate);\r\n        data.updated_at = moment(data.updated_at);\r\n        data.parts = data.contract_parts\r\n        data.contract_partners = data.contract_partners.map(partner=>{\r\n          const { \r\n            account, \r\n            address, \r\n            branchCode, \r\n            branchName, \r\n            director, \r\n            directorTin, \r\n            fizFio, \r\n            fizTin, \r\n            mobilePhone,\r\n            name, \r\n            oked, \r\n            tin,\r\n            workPhone,\r\n            physicalTin,\r\n            physicalName\r\n          } = partner;\r\n          return {\r\n            buyerAccount: account, \r\n            buyerAddress: address, \r\n            buyerBranch: branchCode, \r\n            buyerBranchName: branchName, \r\n            buyerDirector: director, \r\n            buyerDirectorTin: directorTin, \r\n            buyerPhysicalFio: fizFio, \r\n            buyerPhysicalTin: fizTin, \r\n            buyerMobilePhone: mobilePhone,\r\n            buyerName: name, \r\n            oked, \r\n            buyerTin: tin,\r\n          }\r\n        })\r\n        console.log(data);\r\n\r\n        setInitialData(data);\r\n        setGrid(convertProductsToGrid(res.data.contract_products, \"contract\"));\r\n        form.resetFields();\r\n      }).catch(err => {\r\n        console.log(err);\r\n      })\r\n      //end fetch factura data;\r\n    }\r\n  }, [])\r\n\r\n\r\n  const validateMessages = {\r\n    required: 'Bu maydon majburiy!',\r\n    types: {\r\n      email: '${label} is not a valid email!',\r\n      number: '${label} is not a valid number!',\r\n    },\r\n    number: {\r\n      range: '${label} must be between ${min} and ${max}',\r\n    },\r\n\r\n  };\r\n\r\n  const [fullView, toglleFullView] = useState(false)\r\n\r\n  const [grid, setGrid] = useState([\r\n    FIRST_CONTRACT_GRID_ROW,\r\n    [\r\n      { readOnly: true, value: 1 }, //0 ordNo\r\n      { value: \"\" }, //1 product name\r\n      { value: \"\", dataEditor: SelectEditor }, //2 catalogCode\r\n      { value: \"\" }, //3 shrix code\r\n      { value: \"\", dataEditor: SelectMeasureEditor }, //4 measure\r\n      { value: '' }, //5 amount\r\n      { value: \"\", }, //6 price\r\n      { value: '' }, //7 delivery cost\r\n      { value: '', readOnly: true, }, //8 total\r\n    ],\r\n    [\r\n      { readOnly: true, value: 2 }, //0 ordNo\r\n      { value: \"\" }, //1 product name\r\n      { value: \"\", dataEditor: SelectEditor }, //2 catalogCode\r\n      { value: \"\" }, //3 shrix code\r\n      { value: \"\", dataEditor: SelectMeasureEditor }, //4 measure\r\n      { value: '' }, //5 amount\r\n      { value: \"\", }, //6 price\r\n      { value: '' }, //7 delivery cost\r\n      { value: '', readOnly: true, }, //8 total\r\n    ],\r\n    [\r\n      { readOnly: true, value: 3 }, //0 ordNo\r\n      { value: \"\" }, //1 product name\r\n      { value: \"\", dataEditor: SelectEditor }, //2 catalogCode\r\n      { value: \"\" }, //3 shrix code\r\n      { value: \"\", dataEditor: SelectMeasureEditor }, //4 measure\r\n      { value: '' }, //5 amount\r\n      { value: \"\", }, //6 price\r\n      { value: '' }, //7 delivery cost\r\n      { value: '', readOnly: true, }, //8 total\r\n    ],\r\n    [\r\n      { readOnly: true, value: 4 }, //0 ordNo\r\n      { value: \"\" }, //1 product name\r\n      { value: \"\", dataEditor: SelectEditor }, //2 catalogCode\r\n      { value: \"\" }, //3 shrix code\r\n      { value: \"\", dataEditor: SelectMeasureEditor }, //4 measure\r\n      { value: '' }, //5 amount\r\n      { value: \"\", }, //6 price\r\n      { value: '' }, //7 delivery cost\r\n      { value: '', readOnly: true, }, //8 total\r\n    ],\r\n  ])\r\n\r\n\r\n  //#region data-sheet methods\r\n  const handleRemoveRow = (rowId) => {\r\n    grid.splice(rowId, 1)\r\n    setGrid([...grid])\r\n  }\r\n\r\n  const valueRenderer = cell => cell.value;\r\n  const onCellsChanged = changes => {\r\n    changes.forEach(({ cell, row, col, value }, index) => {\r\n      //this sets changed values\r\n      grid[row][col] = { ...grid[row][col], value };\r\n\r\n\r\n      //Lets calculate\r\n      grid[row][8].value = grid[row][5].value && grid[row][6].value\r\n        ? parseFloat(grid[row][5].value) * parseFloat(grid[row][6].value)\r\n        + parseFloat(grid[row][7].value ? grid[row][7].value : 0)\r\n        : 0\r\n\r\n\r\n\r\n    });\r\n    setGrid([...grid]);\r\n  };\r\n\r\n  const handleAddRow = () => {\r\n\r\n    const sampleRow = [\r\n      { readOnly: true, value: grid.length }, //0 ordNo\r\n      { value: \"\" }, //1 product name\r\n      { value: \"\", dataEditor: SelectEditor }, //2 catalogCode\r\n      { value: \"\" }, //3 shrix code\r\n      { value: \"\", dataEditor: SelectMeasureEditor }, //4 measure\r\n      { value: '' }, //5 amount\r\n      { value: \"\", }, //6 price\r\n      { value: '' }, //7 delivery cost\r\n      { value: '', readOnly: true, }, //8 total\r\n    ]\r\n\r\n    let newgrid = [...grid, sampleRow];\r\n\r\n    setGrid(newgrid)\r\n  }\r\n\r\n  const onContextMenu = (e, cell, i, j) =>\r\n    cell.readOnly ? e.preventDefault() : null;\r\n  //#endregion\r\n\r\n  //#region form methods\r\n\r\n  const handleSubmit = (values) => {\r\n    console.log(values)\r\n    setIsLoading(true);\r\n    let parts = values.parts.map((part, index) => ({ ...part, ordNo: index + 1 }));\r\n    let partners = values.contract_partners;\r\n    delete values.parts;\r\n    delete values.contract_partners;\r\n    if (contractId) {\r\n      axios({\r\n        url: `/api/v1/contracts/${contractId}`,\r\n        method: 'PATCH',\r\n        data: { contract: values, products: grid, parts: parts, contract_partners: partners }\r\n      }).then(res => {\r\n        console.log(res)\r\n        if (res.data.ok) {\r\n          message.success(\"Shartnoma yangilandi!\");\r\n        } else {\r\n          message.error(\"Shartnoma yangilashda xatolik!\");\r\n        }\r\n        setIsLoading(false);\r\n      }).catch(err => {\r\n        message.error(\"Shartnoma yangilashda xatolik!\");\r\n        console.log(err)\r\n        setIsLoading(false);\r\n      })\r\n    } else {\r\n      axios({\r\n        url: '/api/v1/contracts',\r\n        method: 'post',\r\n        data: { contract: values, products: grid, parts: parts, contract_partners: partners  }\r\n      }).then(res => {\r\n        console.log(res)\r\n        if (res.data.ok) {\r\n          message.success(\"Yangi shartnoma yaratildi!\")\r\n        } else {\r\n          message.error(\"Shartnoma yaratish xatolik!\");\r\n        }\r\n        setIsLoading(false);\r\n      }).catch(err => {\r\n        console.log(err)\r\n        message.error(\"Shartnoma yaratish xatolik!\");\r\n        setIsLoading(false);\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  const handleImportExecl = (value) => {\r\n\r\n    if (value.file.status == \"done\") {\r\n\r\n      const { response } = value.file\r\n\r\n      response.excel.forEach((element, index) => {\r\n        element[0].value = index + 1;\r\n        element[0].readOnly = true;\r\n        element[4].dataEditor = SelectMeasureEditor;\r\n      })\r\n\r\n      setGrid([grid[0], ...response.excel])\r\n      console.log(response)\r\n    }\r\n  }\r\n\r\n  //#endregion\r\n\r\n  return (\r\n    <div style={{ padding: 15 }}>\r\n      <Form\r\n        initialValues={initialData}\r\n        form={form}\r\n        name=\"factura\"\r\n        onFinish={handleSubmit}\r\n        scrollToFirstError\r\n        validateMessages={validateMessages}\r\n      >\r\n\r\n        <div className=\"factura-data-sheet-container\">\r\n          <h3>Shartnoma</h3>\r\n\r\n          <Row justify=\"space-between\">\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  rules={[{ required: true }]}\r\n                  key=\"dyna-form-facutura-no\"\r\n                  name=\"contractName\">\r\n                  <Input\r\n                    size=\"large\"\r\n                    placeholder=\"Nomi\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Nomi</span>\r\n              </Form.Item>\r\n            </Col>\r\n\r\n            <Col md={11}>\r\n              <div style={{ display: 'flex', justifyContent: \"space-between\" }}>\r\n                <Form.Item>\r\n                  <Form.Item\r\n                    key=\"dyna-form-item-inn-date\"\r\n                    name=\"contractDate\"\r\n                    rules={[{ required: true }]}>\r\n                    <DatePicker\r\n                      size=\"large\"\r\n                      placeholder=\"Tuzilgan sanasi\" />\r\n                  </Form.Item>\r\n                  <span className=\"custom-input-label-1\">Tuzilgan sanasi</span>\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                  <Form.Item\r\n                    key=\"dyna-form-item-inn-date-expire\"\r\n                    name=\"contractExpireDate\"\r\n                    rules={[{ required: true }]}>\r\n                    <DatePicker\r\n                      size=\"large\"\r\n                      placeholder=\"Amal qilish sanasi\" />\r\n                  </Form.Item>\r\n                  <span className=\"custom-input-label-1\">Amal qilish sanasi</span>\r\n                </Form.Item>\r\n              </div>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  rules={[{ required: true }]}\r\n                  key=\"dyna-form-item-contract-n0\"\r\n                  name=\"contractNo\">\r\n                  <Input\r\n                    size=\"large\"\r\n                    placeholder=\"Shartnoma raqami\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Shartnoma raqami</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  rules={[{ required: true }]}\r\n                  key=\"dyna-form-item-contract-date\"\r\n                  name=\"contractPlace\">\r\n                  <Input\r\n                    size=\"large\"\r\n                    placeholder=\"Shartnoma joyi\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Shartnoma joyi</span>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n\r\n        <div className=\"factura-data-sheet-container\">\r\n\r\n          <Row justify=\"space-between\">\r\n            <Col md={11}>\r\n              <SellerForm docType=\"contract\" form={form} />\r\n            </Col>\r\n\r\n          <Form.List name=\"contract_partners\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                  {fields.map(field => (\r\n                    <Col sm={11}>\r\n                      <BuyerForm\r\n                        key={field.key}\r\n                        fieldList={field}\r\n                        remove={remove}\r\n                        docType=\"contract\"\r\n                        form={form} />\r\n                    </Col>\r\n                  ))}\r\n                <Form.Item>\r\n                  <Button \r\n                    size=\"large\" \r\n                    className=\"factra-action-btns\" \r\n                    style={{width:'100%'}} \r\n                    type=\"dashed\" \r\n                    onClick={() => add()} \r\n                    icon={<PlusOutlined />}>\r\n                    Kontragent qo'shish\r\n              </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n\r\n          </Form.List>\r\n          </Row>\r\n        </div>\r\n        <div className={`factura-data-sheet-container ${fullView ? 'grid-full-view' : null}`}>\r\n          <div style={{ marginBottom: 10, display: 'flex', justifyContent: 'space-between' }}>\r\n            <div style={{ display: 'flex' }}>\r\n              <Upload\r\n                headers={{\r\n                  Authorization: \"Bearer \" + token\r\n                }}\r\n                multiple={false}\r\n                action=\"http://127.0.0.1:8000/api/v1/factura-products/read-excel\"\r\n                accept=\".xlsx, .xls\"\r\n                onChange={handleImportExecl}>\r\n\r\n                <Button style={{ marginRight: 10 }}>Exceldan yuklash</Button>\r\n\r\n              </Upload>\r\n              <a target=\"_blank\" href=\"../../../excels/on_doc_contract_products.xlsx\" download>\r\n                <Button >\r\n                  Shablon yuklash\r\n                </Button>\r\n              </a>\r\n            </div>\r\n            <Button\r\n              type=\"primary\"\r\n              icon={fullView ? <FullscreenExitOutlined /> : <FullscreenOutlined />}\r\n              onClick={() => toglleFullView(!fullView)}>\r\n              {fullView ? \"Kichraytirish\" : \"Kengaytirish\"}\r\n            </Button>\r\n          </div>\r\n\r\n          <div style={{ overflowX: 'auto' }} >\r\n            <div style={{ width: '100%' }}>\r\n              <Datasheet\r\n                data={grid}\r\n                valueRenderer={valueRenderer}\r\n                onContextMenu={onContextMenu}\r\n                onCellsChanged={onCellsChanged}\r\n              />\r\n            </div>\r\n          </div>\r\n          <Button\r\n            size=\"large\"\r\n            style={{ marginTop: 20, marginRight: 7, width: 220 }}\r\n            type=\"primary\"\r\n            icon={<FontAwesomeIcon\r\n              style={{ marginRight: 7 }}\r\n              icon={[\"far\", \"plus-square\"]} />}\r\n            onClick={handleAddRow}>Qo'shish</Button>\r\n\r\n          <Button\r\n            size=\"large\"\r\n            style={{ marginTop: 20, width: 220 }}\r\n            danger\r\n            type=\"primary\"\r\n            icon={<FontAwesomeIcon\r\n              style={{ marginRight: 7 }}\r\n              icon={[\"far\", \"trash-alt\"]} />}\r\n            onClick={() => { if (grid.length > 1) { handleRemoveRow(grid.length - 1) } }}>Oxirgi qatorni o'chirish</Button>\r\n        </div>\r\n\r\n        <div className=\"factura-data-sheet-container\">\r\n          <h3>Shartnoma shartlari</h3>\r\n          <Form.List name=\"parts\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map(field => (\r\n                  <Row key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"baseline\">\r\n                    <Col sm={24}>\r\n                      <Form.Item>\r\n                        <Form.Item\r\n                          {...field}\r\n                          name={[field.name, 'title']}\r\n                          fieldKey={[field.fieldKey, 'title']}\r\n                          rules={[{ required: true }]}\r\n                        >\r\n                          <Input\r\n                            className=\"border-right-square\"\r\n                            size=\"large\"\r\n                            placeholder=\"Shart sarlavhasi\"\r\n                            addonAfter={\r\n                              <FontAwesomeIcon\r\n                                icon={[\"far\", \"times-circle\"]}\r\n                                onClick={() => remove(field.name)} />} />\r\n                        </Form.Item>\r\n                        <span className=\"custom-input-label-1\">Shart sarlavhasi</span>\r\n                      </Form.Item>\r\n                    </Col>\r\n                    <Col sm={24}>\r\n                      <Form.Item\r\n                        {...field}\r\n                        name={[field.name, 'body']}\r\n                        fieldKey={[field.fieldKey, 'body']}\r\n                        rules={[{ required: true }]}\r\n                      >\r\n                        <TextArea rows={4} placeholder=\"Sharnoma matni\" size=\"large\" />\r\n                      </Form.Item>\r\n                    </Col>\r\n\r\n                    <Divider />\r\n                  </Row>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button size=\"large\" type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                    Maydon qo'shish\r\n              </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        </div>\r\n        <div className=\"factura-data-sheet-container\">\r\n          <Row justify=\"space-around\">\r\n            <Col >\r\n              <Button\r\n                primary\r\n                htmlType=\"submit\"\r\n                loading={isLoading}\r\n                className=\"factra-action-btns save-btn\"\r\n                size=\"large\"\r\n                icon={<FontAwesomeIcon icon=\"save\" className=\"factura-action-btn-icons\" />}>\r\n                Сақлаб қолиш\r\n                  </Button>\r\n            </Col>\r\n            <Col>\r\n              <Button\r\n                className=\"factra-action-btns sing-btn\"\r\n                size=\"large\"\r\n                icon={<FontAwesomeIcon icon=\"signature\" className=\"factura-action-btn-icons\" />}>\r\n                Имзолаш\r\n                  </Button>\r\n            </Col>\r\n            <Col>\r\n              <Button\r\n                icon={<FontAwesomeIcon icon=\"ban\" className=\"factura-action-btn-icons\" />}\r\n                danger\r\n                className=\"factra-action-btns\"\r\n                size=\"large\">\r\n                Бекор қилиш\r\n                  </Button>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n        <Form.Item\r\n          name=\"contractId\"\r\n          key=\"contractId-1\"\r\n        >\r\n          <Input type=\"hidden\" />\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  token: selectToken\r\n})\r\n\r\nexport default connect(mapStateToProps)(ConractCreateForm);","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\common\\home\\home.component.jsx",["383"],"import React, { useState } from 'react';\r\nimport './home.style.scss';\r\nimport DynaGrid from '../../../components/dyna-grid/dyna-grid.component';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport { get_home_config } from '../../../utils/home.config.provider';\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst HomePage = ({ doc, hideTabs, addParams, customButton })=> {\r\n\r\n    const {t} = useTranslation();\r\n\r\n    const tabs = {\r\n        1: [0],\r\n        2: [1],\r\n        3: [2],\r\n        4: [0, 1, 2, 3]\r\n    }\r\n\r\n    const { title, createTitle, createUrl, gridSourceUrl, gridConfig } = get_home_config(doc);\r\n\r\n    const [activeTab, setActiveTab] = useState(1);\r\n\r\n    return (\r\n        <div className=\"factura-home-page-container\">\r\n            <div className=\"factura-home-sub-con\">\r\n                <div className=\"factura-home-title\">\r\n                    <h2>{ title }</h2>\r\n                    {\r\n                        customButton \r\n                        ?customButton\r\n                        : <Link to={createUrl}><span>{createTitle}</span></Link>\r\n                    }\r\n                </div>\r\n                {\r\n                    hideTabs\r\n                    ? null\r\n                    : <div className=\"factura-home-list-tabs\">\r\n                    <div className=\"factura-home-list-tab-con\">\r\n                        <div onClick={()=>setActiveTab(1)} className={`status-tab-bar ${activeTab===1 ? 'active-tab' : ''}`}>\r\n                            {t(\"Kiruvchi\")}\r\n                        </div> \r\n                        <div onClick={()=>setActiveTab(2)} className={`status-tab-bar ${activeTab===2 ? 'active-tab' : ''}`}>\r\n                            {t(\"Chiquvchi\")}\r\n                        </div>\r\n                        <div onClick={()=>setActiveTab(3)} className={`status-tab-bar ${activeTab===3 ? 'active-tab' : ''}`}>\r\n                            {t(\"Saqlangan\")}\r\n                        </div>\r\n                        <div onClick={()=>setActiveTab(4)} className={`status-tab-bar ${activeTab===4 ? 'active-tab' : ''}`}>\r\n                            {t(\"Barchasi\")}\r\n                        </div>\r\n                    </div>\r\n                            {console.log(\"tab3\",tabs[3])}\r\n                </div>\r\n                }\r\n                \r\n                \r\n                <div>\r\n                    <DynaGrid   \r\n                        config={{ ...gridConfig, dataSourcePath: `${gridSourceUrl}?${tabs[activeTab].map(text=>'AllDocumentsSearch[write_type]='+text+'&')}${addParams ? addParams.map(p=>`${p.name}=${p.value}`): \"\"}`}}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\empowerment\\create\\create.component.jsx",["384","385","386","387","388","389","390","391","392","393","394"],"import React, { useState, useEffect } from 'react';\r\nimport 'react-datasheet/lib/react-datasheet.css';\r\nimport Datasheet from 'react-datasheet';\r\nimport SelectMeasureEditor from '../../../components/data-sheet-custom-measure-selector/custom-selector.component';\r\nimport { Button, Input, Form, Row, Col, DatePicker, Select, Upload, message } from 'antd';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n//import './create.style.scss';\r\nimport axios from 'axios';\r\nimport BuyerForm from '../../common/buyer-form.component';\r\nimport SellerForm from '../../common/seller-form.component';\r\nimport { connect } from 'react-redux';\r\nimport {selectCurrentUser, selectToken} from '../../../redux/user/user.selector';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport moment from 'moment';\r\nimport { \r\n  FullscreenOutlined, \r\n  FullscreenExitOutlined, \r\n  } from '@ant-design/icons';\r\nimport { convertProductsToGrid, FIRST_EMPOWERMENT_GRID_ROW } from '../../../utils/main';\r\nimport { GetEmpowermentDataToSign } from '../../models/Empowerment';\r\nimport {ConverEmpGridToData, ConvertEmpDataToForm, ConvertEmpDataToGrid} from \"../../models/EmpowermentProduct\";\r\nimport {ConvertGridToProduct, ConvertProductToGrid} from \"../../models/FacturaProduct\";\r\n\r\nconst EmpowermentForm = ({ token, match, user })=> {\r\n\r\n  const [form] = Form.useForm();\r\n  const { empowermentId } = match.params;\r\n  const [initialData, setInitialData] = useState()\r\n  const [newEmpId,setNewEmpId] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [products, setProducts] = useState([]);\r\n  const [tin,setTin] = useState('');\r\n\r\n\r\n  useEffect(()=>{\r\n    if(empowermentId){\r\n        // setNewEmpId(empowermentId)\r\n      //fetch fatura data\r\n      axios({\r\n        url: `emp/view/?EmpId=${empowermentId}&tin=${user.tin}`,\r\n        method: \"GET\",\r\n      }).then(res=>{\r\n        let data = (res.data.data[0]);\r\n        console.log(\"data\",res)\r\n        data.contractDate=moment(data.contractDate);\r\n        data.created_at=moment(data.created_at);\r\n        data.empowermentDateOfExpire=moment(data.empowermentDateOfExpire);\r\n        data.empowermentDateOfIssue=moment(data.empowermentDateOfIssue);\r\n        data.agentPassportDateOfIssue=moment(data.agentPassportDateOfIssue);\r\n        data.updated_at=moment(data.updated_at);\r\n\r\n        setInitialData(data);\r\n        form.resetFields();\r\n        setGrid(convertProductsToGrid(res.data.products, \"empowerment\"));\r\n      }).catch(err=>{\r\n        console.log(err);\r\n      })\r\n      //end fetch factura data;\r\n    }else{\r\n      axios({\r\n        url: \"info/get-guid\",\r\n        method: \"get\"\r\n      }).then(res=>{\r\n        if(res.data.success){\r\n          setNewEmpId(res.data.data)\r\n          console.log(\"resId\",res)\r\n        }\r\n      }).catch(ex=>{\r\n        console.log(\"err\",ex)\r\n      })\r\n    }\r\n  }, [])\r\n  \r\n\r\n  const validateMessages = {\r\n    required: 'Bu maydon majburiy!',\r\n    types: {\r\n      email: '${label} is not a valid email!',\r\n      number: '${label} is not a valid number!',\r\n    },\r\n    number: {\r\n      range: '${label} must be between ${min} and ${max}',\r\n    },\r\n    \r\n  };\r\n\r\n\r\n  const [fullView, toglleFullView] = useState(false)\r\n\r\n\r\n  const [grid, setGrid] = useState([\r\n    FIRST_EMPOWERMENT_GRID_ROW,\r\n    [\r\n      { readOnly: true, value: 1 },                           //0 ordNo\r\n      { value: \"\" },                                          //1 product name\r\n      { value: \"\", dataEditor:  SelectMeasureEditor },        //2 measure\r\n      { value: '' },                                          //3 amount\r\n    ],\r\n  ])\r\n\r\n  const fetchAgent = e=>{\r\n    let val = e.target.value;\r\n    if(!isNaN(val)){\r\n\r\n      if(val > 100000000 && val<999999999){\r\n        axios({\r\n          method: \"GET\",\r\n          url: \"info/contragent-by-tin?tin=\"+val\r\n        })\r\n        .then(res=>{\r\n          setTin(val);\r\n          const { \r\n            name, \r\n            fullName, \r\n            passIssueDate, \r\n            passOrg,\r\n            passNumber,\r\n            passSeries\r\n          } = res.data;\r\n          console.log(moment('2020-00-00 00:00:00')._isValid)\r\n          form.setFieldsValue({\r\n            agentFio: fullName ?? name,\r\n            agentPassportDateOfIssue: moment(passIssueDate)._isValid ? moment(passIssueDate) : null,\r\n            agentPassportIssuedBy: passOrg,\r\n            agentPassportNumber: passSeries + passNumber\r\n          })\r\n        })\r\n      }\r\n\r\n    }else{\r\n      message.warning(\"STIR notog'ri kiritildi!\");\r\n    }\r\n  }\r\n\r\n\r\n  //#region data-sheet methods\r\n  const handleRemoveRow = (rowId)=>{\r\n    console.log(rowId)\r\n\r\n    console.log(grid)\r\n    grid.splice(rowId, 1)\r\n    console.log(grid)\r\n    setGrid([...grid])\r\n  }\r\n\r\n  const valueRenderer = cell => cell.value;\r\n  const onCellsChanged = changes => {\r\n    changes.forEach(({ cell, row, col, value }, index) => {\r\n        //this sets changed values\r\n        grid[row][col] = { ...grid[row][col], value };        \r\n\r\n    });\r\n     setGrid([...grid]);\r\n  };\r\n\r\n  const handleAddRow = ()=>{\r\n    \r\n    const sampleRow = [\r\n      { readOnly: true, value:    grid.length }, //0 ordNo\r\n      { value: \"\" }, //1 product name\r\n      { value: \"\", dataEditor:  SelectMeasureEditor }, //4 measure\r\n      { value: '' }, //5 amount\r\n    ]\r\n\r\n    let newgrid = [...grid, sampleRow];\r\n\r\n     setGrid(newgrid)\r\n  }\r\n\r\n\r\n\r\n  const onContextMenu = (e, cell, i, j) =>\r\n    cell.readOnly ? e.preventDefault() : null;\r\n//#endregion\r\n  \r\n  //#region form methods\r\n\r\n\r\n  const handleSubmit = (values)=>{\r\n    console.log(\"data\",GetEmpowermentDataToSign( values, products,newEmpId))\r\n    setIsLoading(true)\r\n    if(empowermentId){\r\n      axios({\r\n        url:`/api/v1/empowerments/${empowermentId}`,\r\n        method: 'PATCH',\r\n        data: {emp: values, products: grid}\r\n      }).then(res=>{\r\n        console.log(res)\r\n        setIsLoading(false);\r\n        if(res.data.ok){\r\n          message.success(\"Ishonchnoma ozgartirildi!\")\r\n        }\r\n        else{\r\n          message.error(\"Ishonchnoma o'zgartirishda xatolik!\");\r\n        }\r\n      }).catch(err=>{\r\n        setIsLoading(false);\r\n        message.error(\"Ishonchnoma o'zgartirishda xatolik!\");\r\n        console.log(err)\r\n      })\r\n    } else{\r\n      axios({\r\n        url:'emp/create',\r\n        method: 'post',\r\n        data: GetEmpowermentDataToSign( values, products,newEmpId)\r\n      }).then(res=>{\r\n        setIsLoading(false)\r\n        if(res.data?.success){\r\n          message.success(\"Ishonchnma yaratildi!\");\r\n        }else{\r\n          message.error(\"Ishonchnoma yaratishda xatolikkk\");\r\n        }\r\n\r\n        console.log(\"resp\",res)\r\n      }).catch(err=>{\r\n        setIsLoading(false);\r\n        message.error(\"Ishonchnoma yaratishda xatolik\");\r\n        console.log(err)\r\n      })\r\n    }\r\n    \r\n  }\r\n  function getProducts(){\r\n     setProducts(ConverEmpGridToData(grid, tin, newEmpId));\r\n  }\r\n  useEffect(()=>{\r\n    getProducts();\r\n  },[grid])\r\n\r\n  const handleImportExecl =(value)=>{\r\n    console.log(\"me fired\")\r\n\r\n    if(value.file.status==\"done\"){\r\n      \r\n      const { response } = value.file\r\n\r\n      response.excel.forEach((element, index)=>{\r\n        element[0].value = index + 1;\r\n        element[0].readOnly = true;\r\n        element[4].dataEditor = SelectMeasureEditor;\r\n      })\r\n\r\n      setGrid([grid[0], ...response.excel])\r\n      console.log(response)\r\n    }\r\n  }\r\n\r\n  //#endregion\r\n  \r\n  return (\r\n    <div style={{padding: 15}}>\r\n      <Form\r\n        initialValues={initialData}\r\n        form={form}\r\n        name=\"factura\"\r\n        onFinish = {handleSubmit}\r\n        scrollToFirstError\r\n        validateMessages={validateMessages}\r\n      >\r\n\r\n      <div className=\"factura-data-sheet-container\">\r\n      <h3>Ishonchnoma</h3>\r\n      \r\n      <Row justify=\"space-between\">\r\n            <Col md={11}>\r\n            <Form.Item>\r\n              <Form.Item \r\n                rules={[{required: true}]}\r\n                key=\"dyna-form-facutura-no\"\r\n                name=\"empowermentNo\">\r\n                  <Input\r\n                    size=\"large\"\r\n                    placeholder=\"Inshonchnoma raqami\" />\r\n              </Form.Item>\r\n                  <span className=\"custom-input-label-1\">Inshonchnoma raqami</span>\r\n              </Form.Item>\r\n            </Col>\r\n            \r\n            <Col md={11}>\r\n              <div style={{display: 'flex', justifyContent: \"space-between\"}}>\r\n            <Form.Item>\r\n              <Form.Item \r\n                key=\"dyna-form-item-inn-date\"\r\n                name=\"empowermentDateOfIssue\"\r\n                rules={[{required: true}]}>\r\n                  <DatePicker                \r\n                    size=\"large\"\r\n                    placeholder=\"Berilgan sanasi\" />\r\n              </Form.Item>\r\n                  <span className=\"custom-input-label-1\">Berilgan sanasi</span>\r\n              </Form.Item>\r\n          \r\n            <Form.Item>\r\n              <Form.Item \r\n                key=\"dyna-form-item-inn-date-expire\"\r\n                name=\"empowermentDateOfExpire\"\r\n                rules={[{required: true}]}>\r\n                  <DatePicker                \r\n                    size=\"large\"\r\n                    placeholder=\"Amal qilish sanasi\" />\r\n              </Form.Item>\r\n                  <span className=\"custom-input-label-1\">Amal qilish sanasi</span>\r\n              </Form.Item>\r\n              </div>\r\n            </Col>\r\n            <Col md={11}>\r\n            <Form.Item>\r\n              <Form.Item \r\n                rules={[{required: true}]}\r\n                key=\"dyna-form-item-contract-n0\"\r\n                name=\"contractNo\">\r\n                  <Input\r\n                    size=\"large\"\r\n                    placeholder=\"Shartnoma raqami\" />\r\n              </Form.Item>\r\n                  <span className=\"custom-input-label-1\">Shartnoma raqami</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n            <Form.Item>\r\n              <Form.Item \r\n                rules={[{required: true}]}\r\n                key=\"dyna-form-item-contract-date\"\r\n                name=\"contractDate\">\r\n                  <DatePicker\r\n                    size=\"large\"\r\n                    placeholder=\"Shartnoma sanasi\" />\r\n              </Form.Item>\r\n                  <span className=\"custom-input-label-1\">Shartnoma sanasi</span>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n      </div>\r\n\r\n      <div className=\"factura-data-sheet-container\">\r\n        \r\n        <Row justify=\"space-between\">\r\n        <Col md={11}>  \r\n          <SellerForm docType=\"empowerment\"/>\r\n        </Col>\r\n\r\n        <Col md={11}>\r\n          <BuyerForm form={ form } docType=\"empowerment\"/>\r\n        </Col>\r\n      </Row>\r\n      </div>\r\n      <div className={`factura-data-sheet-container ${fullView ? 'grid-full-view' : null}`}>\r\n        <div style={{marginBottom: 10, display: 'flex', justifyContent:'space-between'}}>\r\n          <div style={{display: 'flex'}}>\r\n              <Upload \r\n                headers={{\r\n                  Authorization: \"Bearer \" + token\r\n                }}\r\n                multiple={false}\r\n                action=\"http://127.0.0.1:8000/api/v1/factura-products/read-excel\"\r\n                accept=\".xlsx, .xls\" \r\n                onChange={handleImportExecl}>\r\n                \r\n                  <Button style={{marginRight: 10}}>Exceldan yuklash</Button>\r\n               \r\n              </Upload>\r\n              <a target=\"_blank\" href=\"../../../excels/on_doc_factura_products.xlsx\" download>\r\n                <Button >\r\n                  Shablon yuklash\r\n                </Button>\r\n              </a>\r\n            </div>\r\n            <Button\r\n              type=\"primary\"\r\n              icon={fullView ? <FullscreenExitOutlined /> : <FullscreenOutlined />} \r\n              onClick={()=>toglleFullView(!fullView)}>\r\n                { fullView ? \"Kichraytirish\" : \"Kengaytirish\" }\r\n            </Button>\r\n        </div>\r\n        \r\n      <div style={{overflowX: 'auto'}} >\r\n        <div style={{width: '100%'}}>\r\n          <Datasheet\r\n            data={grid}\r\n            valueRenderer={ valueRenderer}\r\n            onContextMenu={ onContextMenu}\r\n            onCellsChanged={ onCellsChanged}\r\n          />\r\n        </div>\r\n      </div>\r\n      <Button \r\n        size=\"large\" \r\n        style={{marginTop: 20, marginRight: 7, width: 220}} \r\n        type=\"primary\" \r\n        icon={<FontAwesomeIcon \r\n          style={{marginRight: 7}} \r\n          icon={[\"far\", \"plus-square\"]} />} \r\n        onClick={  handleAddRow }>Qo'shish</Button>\r\n      \r\n      <Button \r\n        size=\"large\" \r\n        style={{marginTop: 20, width: 220 }} \r\n        danger\r\n        type=\"primary\" \r\n        icon={<FontAwesomeIcon \r\n          style={{marginRight: 7}} \r\n          icon={[\"far\", \"trash-alt\"]} />} \r\n        onClick={ ()=>{ if(grid.length>1){ handleRemoveRow(grid.length-1) }}  }>Oxirgi qatorni o'chirish</Button>\r\n      </div>\r\n          \r\n        <div className=\"factura-data-sheet-container\">\r\n\r\n          <Row justify=\"space-between\">\r\n          <Col md={7}>\r\n              <Form.Item>\r\n                <Form.Item \r\n              key=\"seler-account-tyin-inn\"\r\n              name=\"agentTin\">\r\n                <Input\r\n                  size=\"large\"\r\n                  placeholder=\"СТИР\"\r\n                  onChange={fetchAgent}\r\n\r\n                  />\r\n              </Form.Item>\r\n                <span className=\"custom-input-label-1\">СТИР</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={7} >\r\n              <Form.Item>\r\n                <Form.Item \r\n              key=\"agentFio-no\"\r\n              name=\"agentFio\">\r\n                <Input\r\n                  size=\"large\"\r\n                  placeholder=\"ФИШ\" />\r\n              </Form.Item>\r\n                <span className=\"custom-input-label-1\">ФИШ</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={7}>\r\n              <Form.Item>\r\n                <Form.Item \r\n              key=\"seler-account-empowerment-dateof-issue-agentJobTittle\"\r\n              name=\"agentJobTittle\">\r\n                <Input\r\n                  size=\"large\"\r\n                  placeholder=\"Мансаб\" />\r\n              </Form.Item>\r\n                <span className=\"custom-input-label-1\">Мансаб</span>\r\n              </Form.Item>\r\n            </Col>\r\n            \r\n            <Col md={7}>\r\n          \r\n                <Form.Item>\r\n                  <Form.Item \r\n                key=\"seler-account-agent-fioe\"\r\n                name=\"agentPassportNumber\">\r\n                  <Input\r\n                    size=\"large\"\r\n                    placeholder=\"Паспорт серия ва рақами\" />\r\n                </Form.Item>\r\n                  <span className=\"custom-input-label-1\">Паспорт серия ва рақами</span>\r\n                </Form.Item>\r\n            \r\n            </Col>\r\n\r\n            <Col md={7} >\r\n              <Form.Item>\r\n                <Form.Item\r\n              key=\"selenote-field\"\r\n              name=\"agentPassportIssuedBy\">\r\n                <Input\r\n                  size=\"large\"\r\n                  placeholder=\"Ким томонидан берилган\" />\r\n              </Form.Item>\r\n                <span className=\"custom-input-label-1\">Ким томонидан берилган</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={7} >\r\n              <Form.Item>\r\n                <Form.Item\r\n              key=\"selenote-field\"\r\n              name=\"agentPassportDateOfIssue\">\r\n                <DatePicker\r\n                  size=\"large\"\r\n                  placeholder=\"Паспорт берилган сана\" />\r\n              </Form.Item>\r\n                <span className=\"custom-input-label-1\">Паспорт берилган сана</span>\r\n              </Form.Item>\r\n            </Col>\r\n\r\n          </Row>\r\n          </div>\r\n          <div className=\"factura-data-sheet-container\">\r\n            <Row justify=\"space-around\">\r\n              <Col >\r\n                <Button \r\n                  loading={isLoading}\r\n                  primary\r\n                  htmlType=\"submit\"\r\n                  className=\"factra-action-btns save-btn\" \r\n                  size=\"large\"\r\n                  icon={<FontAwesomeIcon icon=\"save\" className=\"factura-action-btn-icons\"  />}>\r\n                    Сақлаб қолиш\r\n                  </Button>\r\n              </Col>\r\n              <Col>\r\n                <Button \r\n                  className=\"factra-action-btns sing-btn\" \r\n                  size=\"large\"\r\n                  icon={<FontAwesomeIcon icon=\"signature\" className=\"factura-action-btn-icons\" />}>\r\n                    Имзолаш\r\n                  </Button>\r\n              </Col>\r\n              <Col>\r\n                <Button \r\n                  icon={<FontAwesomeIcon icon=\"ban\" className=\"factura-action-btn-icons\" />} \r\n                  danger \r\n                  className=\"factra-action-btns\" \r\n                  size=\"large\">\r\n                    Бекор қилиш\r\n                  </Button>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          <Form.Item\r\n            name=\"empowermentId\"\r\n            key=\"empowermemt-id\"\r\n          >\r\n            <Input type=\"hidden\" />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"empowermentProductId\"\r\n            key=\"empowermemt-product-id\"\r\n          >\r\n            <Input type=\"hidden\" />\r\n          </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  token: selectToken,\r\n  user: selectCurrentUser\r\n})\r\n\r\nexport default connect(mapStateToProps)(EmpowermentForm);","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\tty\\create\\create.component.jsx",["395","396","397","398","399"],"import React, { useState, useEffect } from 'react';\r\nimport 'react-datasheet/lib/react-datasheet.css';\r\nimport { Button, Input, Form, Row, Col, DatePicker, message, Radio, Upload } from 'antd';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport axios from 'axios';\r\nimport Datasheet from 'react-datasheet';\r\nimport BuyerForm from '../../common/buyer-form.component';\r\nimport SellerForm from '../../common/seller-form.component';\r\nimport { connect } from 'react-redux';\r\nimport { selectCurrentUser, selectToken } from '../../../redux/user/user.selector';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport moment from 'moment';\r\nimport PersonFetch from '../../common/person-fetch/person-fetch.component';\r\nimport { convertProductsToGrid, FIRST_TTY_GRID_ROW } from '../../../utils/main';\r\nimport { \r\n  FullscreenOutlined, \r\n  FullscreenExitOutlined, \r\n  } from '@ant-design/icons';\r\nimport SelectEditor from '../../../components/data-sheet-custom-selector/custom-selector.component';\r\nimport SelectMeasureEditor from '../../../components/data-sheet-custom-measure-selector/custom-selector.component';\r\n\r\n\r\nconst TTYForm = ({ match, token, user }) => {\r\n\r\n  const [form] = Form.useForm();\r\n  const { ttyId } = match.params;\r\n  const [initialData, setInitialData] = useState()\r\n  const [isLoading, setIsloading] = useState(false);\r\n\r\n\r\n  //#region DATA SHEET\r\n\r\n  const [fullView, toglleFullView] = useState(false)\r\n\r\n\r\n  const [grid, setGrid] = useState([\r\n    FIRST_TTY_GRID_ROW,\r\n    [\r\n      { readOnly: true, value: 1 }, //0 ordNo\r\n      { value: \"\" }, //1 product name\r\n      { value: \"\", dataEditor:  SelectMeasureEditor }, //2 measure\r\n      { value: '' }, //3 count\r\n      { value: \"\", }, //4 price\r\n      { value: \"\", readOnly: true}, //5 total\r\n      { value: '' }, //6 delivery cost\r\n      { value: \"\", }, //7 Docs\r\n      { value: \"\", }, //8 weight measure method\r\n      { value: \"\", }, //9 item class\r\n      { value: \"\", }, //10 brutto weight\r\n      { value: \"\", }, //11 netto weight                       //12 total\r\n    ], \r\n    [\r\n      { readOnly: true, value:2 }, //0 ordNo\r\n      { value: \"\" }, //1 product name\r\n      { value: \"\", dataEditor:  SelectMeasureEditor }, //2 measure\r\n      { value: '' }, //3 count\r\n      { value: \"\", }, //4 price\r\n      { value: \"\", readOnly: true}, //5 total\r\n      { value: '' }, //6 delivery cost\r\n      { value: \"\", }, //7 Docs\r\n      { value: \"\", }, //8 weight measure method\r\n      { value: \"\", }, //9 item class\r\n      { value: \"\", }, //10 brutto weight\r\n      { value: \"\", }, //11 netto weight\r\n    ], \r\n    [\r\n      { readOnly: true, value:3 }, //0 ordNo\r\n      { value: \"\" }, //1 product name\r\n      { value: \"\", dataEditor:  SelectMeasureEditor }, //2 measure\r\n      { value: '' }, //3 count\r\n      { value: \"\", }, //4 price\r\n      { value: \"\", readOnly: true}, //5 total\r\n      { value: '' }, //6 delivery cost\r\n      { value: \"\", }, //7 Docs\r\n      { value: \"\", }, //8 weight measure method\r\n      { value: \"\", }, //9 item class\r\n      { value: \"\", }, //10 brutto weight\r\n      { value: \"\", }, //11 netto weight\r\n    ], \r\n    [\r\n      { readOnly: true, value:4 }, //0 ordNo\r\n      { value: \"\" }, //1 product name\r\n      { value: \"\", dataEditor:  SelectMeasureEditor }, //2 measure\r\n      { value: '' }, //3 count\r\n      { value: \"\", }, //4 price\r\n      { value: \"\", readOnly: true}, //5 total\r\n      { value: '' }, //6 delivery cost\r\n      { value: \"\", }, //7 Docs\r\n      { value: \"\", }, //8 weight measure method\r\n      { value: \"\", }, //9 item class\r\n      { value: \"\", }, //10 brutto weight\r\n      { value: \"\", }, //11 netto weight\r\n    ], \r\n  ])\r\n\r\n  const handleImportExecl =(value)=>{\r\n    console.log(\"me fired\")\r\n\r\n    if(value.file.status==\"done\"){\r\n      \r\n      const { response } = value.file\r\n\r\n      response.excel.forEach((element, index)=>{\r\n        element[0].value = index + 1;\r\n        element[0].readOnly = true;\r\n        element[2].dataEditor = SelectEditor;\r\n        element[4].dataEditor = SelectMeasureEditor;\r\n      })\r\n\r\n      setGrid([grid[0], ...response.excel])\r\n      console.log(response)\r\n    }\r\n  }\r\n\r\n  //#region data-sheet methods\r\n  const handleRemoveRow = (rowId)=>{\r\n\r\n    grid.splice(rowId, 1)\r\n    setGrid([...grid])\r\n  }\r\n\r\n  const valueRenderer = cell => cell.value;\r\n  const onCellsChanged = changes => {\r\n    changes.forEach(({ cell, row, col, value }, index) => {\r\n        //this sets changed values\r\n        grid[row][col] = { ...grid[row][col], value };\r\n        \r\n\r\n        //Lets calculate\r\n        let priceamount = parseFloat(grid[row][3].value??0) * parseFloat(grid[row][4].value??0);\r\n\r\n        grid[row][5] = {...grid[row][5], value: priceamount ?? 0}\r\n\r\n       \r\n     \r\n    });\r\n     setGrid([...grid]);\r\n  };\r\n\r\n  const handleAddRow = ()=>{\r\n    \r\n    const sampleRow = [\r\n      { readOnly: true, value:    grid.length }, //0 ordNo\r\n      { value: \"\" }, //1 product name\r\n      { value: \"\", dataEditor:  SelectMeasureEditor }, //2 measure\r\n      { value: '' }, //3 count\r\n      { value: \"\", }, //4 price\r\n      { value: \"\", readOnly: true}, //5 total\r\n      { value: '' }, //6 delivery cost\r\n      { value: \"\", }, //7 Docs\r\n      { value: \"\", }, //8 weight measure method\r\n      { value: \"\", }, //9 item class\r\n      { value: \"\", }, //10 brutto weight\r\n      { value: \"\", }, //11 netto weight\r\n    ]\r\n\r\n    let newgrid = [...grid, sampleRow];\r\n\r\n     setGrid(newgrid)\r\n  }\r\n\r\n  const onContextMenu = (e, cell, i, j) =>\r\n    cell.readOnly ? e.preventDefault() : null;\r\n//#endregion\r\n\r\n  //#endregion\r\n\r\n\r\n  useEffect(() => {\r\n    if (ttyId) {\r\n\r\n      //fetch fatura data\r\n      axios({\r\n        url: `/api/v1/ttys/${ttyId}`,\r\n        method: \"GET\",\r\n      }).then(res => {\r\n        let data = res.data;\r\n        data.contractDate = moment(data.contractDate);\r\n        data.created_at = moment(data.created_at);\r\n        data.wayBillDate = moment(data.wayBillDate);\r\n        data.tripTicketDate = moment(data.tripTicketDate);\r\n        data.updated_at = moment(data.updated_at);\r\n        console.log(data);\r\n\r\n        setInitialData(res.data);\r\n        form.resetFields();\r\n        setGrid(convertProductsToGrid(res.data.products, \"tty\"))\r\n      }).catch(err => {\r\n        console.log(err);\r\n      })\r\n      //end fetch factura data;\r\n    }\r\n  }, [])\r\n\r\n\r\n  const validateMessages = {\r\n    required: 'Bu maydon majburiy!',\r\n    types: {\r\n      email: '${label} is not a valid email!',\r\n      number: '${label} is not a valid number!',\r\n    },\r\n    number: {\r\n      range: '${label} must be between ${min} and ${max}',\r\n    },\r\n\r\n  };\r\n\r\n  //#region form methods\r\n\r\n  const handleSubmit = (values) => {\r\n    setIsloading(true);\r\n    console.log(values)\r\n    if (ttyId) {\r\n      axios({\r\n        url: `/api/v1/ttys/${ttyId}`,\r\n        method: 'PATCH',\r\n        data: { tty: values, products: grid }\r\n      }).then(res => {\r\n        setIsloading(false);\r\n        message.success(\"TTY yangilandi!\");\r\n        console.log(res)\r\n      }).catch(err => {\r\n        setIsloading(false)\r\n        message.error(\"TTY yangilashda xatolik!\");\r\n        console.log(err)\r\n      })\r\n    } else {\r\n      axios({\r\n        url: '/api/v1/ttys',\r\n        method: 'post',\r\n        data: { tty: values, products: grid }\r\n      }).then(res => {\r\n        setIsloading(false)\r\n        message.success(\"TTY yaratildi!\");\r\n        console.log(res)\r\n      }).catch(err => {\r\n        setIsloading(false)\r\n        message.error(\"TTY yaratishda xatolik!\");\r\n        console.log(err)\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  //#endregion\r\n\r\n  return (\r\n    <div style={{ padding: 15 }}>\r\n      <Form\r\n        initialValues={initialData}\r\n        form={form}\r\n        name=\"factura\"\r\n        onFinish={handleSubmit}\r\n        scrollToFirstError\r\n        validateMessages={validateMessages}\r\n      >\r\n\r\n        <div className=\"factura-data-sheet-container\">\r\n          <h3>TTY yaratish</h3>\r\n\r\n          <Row justify=\"space-between\">\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  rules={[{ required: true }]}\r\n                  key=\"dyna-form-facutura-no\"\r\n                  name=\"wayBillNo\">\r\n                  <Input\r\n                    size=\"large\"\r\n                    placeholder=\"TTY raqami\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">TTY raqami</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  key=\"dyna-form-item-inn-date\"\r\n                  name=\"wayBillDate\"\r\n                  rules={[{ required: true }]}>\r\n                  <DatePicker\r\n                    size=\"large\"\r\n                    placeholder=\"TTY sanasi\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">TTY sanasi</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={24}>\r\n              <Form.Item\r\n                name=\"deliveryType\"\r\n                key=\"deliveryType\"\r\n                initialValue={1}\r\n              >\r\n                <Radio.Group style={{ width: '100%' }} options={[\r\n                  { label: \"Omborxonadan omborxonaga\", value: 1 },\r\n                  { label: \"Sotuvchidan xaridorgacha\", value: 2 }\r\n                ]}\r\n                  optionType=\"button\"\r\n                />\r\n\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n        <div className=\"factura-data-sheet-container\">\r\n          <Row justify=\"space-between\">\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  rules={[{ required: true }]}\r\n                  key=\"dyna-form-item-contract-n0\"\r\n                  name=\"contractNo\">\r\n                  <Input\r\n                    size=\"large\"\r\n                    placeholder=\"Shartnoma raqami\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Shartnoma raqami</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  rules={[{ required: true }]}\r\n                  key=\"dyna-form-item-contract-date\"\r\n                  name=\"contractDate\">\r\n                  <DatePicker\r\n                    size=\"large\"\r\n                    placeholder=\"Shartnoma sanasi\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Shartnoma sanasi</span>\r\n              </Form.Item>\r\n            </Col>\r\n\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  rules={[{ required: true }]}\r\n                  key=\"dyna-form-item-contract-n0-TripTicketNo\"\r\n                  name=\"tripTicketNo\">\r\n                  <Input\r\n                    size=\"large\"\r\n                    placeholder=\"Shartnoma raqami\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Yo'l varaqasi raqami</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  rules={[{ required: true }]}\r\n                  key=\"dyna-form-item-contract-date-TripTicketDate\"\r\n                  name=\"tripTicketDate\">\r\n                  <DatePicker\r\n                    size=\"large\"\r\n                    placeholder=\"Shartnoma sanasi\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Yo'l varaqasi sanasi</span>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n\r\n        <div className=\"factura-data-sheet-container\">\r\n\r\n          <Row justify=\"space-between\">\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"truckRegNo\"\r\n                  key=\"truckRegNo\"\r\n                  rules={[{ required: true }]}\r\n                >\r\n                  <Input size=\"large\" placeholder=\"Avtomobil davlat raqami\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Avtomobil davlat raqami</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"truckModel\"\r\n                  key=\"truckModel\"\r\n                  rules={[{ required: true }]}\r\n                >\r\n                  <Input size=\"large\" placeholder=\"Avtomobil turi\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Avtomobil turi</span>\r\n              </Form.Item>\r\n            </Col>\r\n\r\n            <Col md={24}>\r\n              <Form.Item\r\n                name=\"trailerType\"\r\n                key=\"trailerType\"\r\n                initialValue={1}\r\n              >\r\n                <Radio.Group style={{ width: '100%' }} options={[\r\n                  { label: \"Tirkama\", value: 1 },\r\n                  { label: \"Yarim tirkama\", value: 2 }\r\n                ]}\r\n                  optionType=\"button\"\r\n                />\r\n              </Form.Item>\r\n            </Col>\r\n\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"trailerRegNo\"\r\n                  key=\"TrailerRegNo\"\r\n                  rules={[{ required: true }]}\r\n                >\r\n                  <Input size=\"large\" placeholder=\"Tirkama davlat raqami\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Tirkama davlat raqami</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"trailerModel\"\r\n                  key=\"TrailerRegNoType\"\r\n                  rules={[{ required: true }]}\r\n                >\r\n                  <Input size=\"large\" placeholder=\"Tirkama turi\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Tirkama turi</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"driverFio\"\r\n                  key=\"DriverFio\"\r\n                  rules={[{ required: true }]}\r\n                >\r\n                  <Input size=\"large\" placeholder=\"Haydovchi FIO\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Haydovchi FIO</span>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n\r\n        <div className=\"factura-data-sheet-container\">\r\n\r\n          <Row justify=\"space-between\">\r\n            <Col md={11}>\r\n              <SellerForm form={form} docType=\"act\" />\r\n            </Col>\r\n\r\n            <Col md={11}>\r\n              <BuyerForm form={form} docType=\"act\" />\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n\r\n        <div className=\"factura-data-sheet-container\">\r\n\r\n          <Row justify=\"space-between\">\r\n            <Col md={11}>\r\n              <PersonFetch\r\n                form={form}\r\n                pName=\"carrierName\"\r\n                pTin=\"carrierTin\"\r\n                nameLabel=\"Tashuvchi FIO\"\r\n                tinLabel=\"Tashunchi STIR\" />\r\n            </Col>\r\n\r\n            <Col md={11}>\r\n              <PersonFetch\r\n                form={form}\r\n                pName=\"customerName\"\r\n                pTin=\"customerTin\"\r\n                nameLabel=\"Buyurtmachi FIO\"\r\n                tinLabel=\"Buyurtmachi STIR\" />\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n\r\n        <div className=\"factura-data-sheet-container\">\r\n          <Row justify=\"space-between\">\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"pointOfLoading\"\r\n                  key=\"PointOfLoading\"\r\n                >\r\n                  <Input size=\"large\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Yuklash manzili</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"pointOfUnloading\"\r\n                  key=\"pointOfUnloading\"\r\n                >\r\n                  <Input size=\"large\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Tushirish mazili</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"pointOfRedirectName\"\r\n                  key=\"pointOfRedirectName\"\r\n                >\r\n                  <Input size=\"large\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Boshqa manzil nomi</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"pointOfRedirectAddress\"\r\n                  key=\"pointOfRedirectAddress\"\r\n                >\r\n                  <Input size=\"large\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Boshqa manzil manzili</span>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n\r\n        <div className=\"factura-data-sheet-container\">\r\n          <Row justify=\"space-between\">\r\n\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"giverFio\"\r\n                  key=\"giverFio\"\r\n                >\r\n                  <Input size=\"large\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Topshirdi</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"takerFio\"\r\n                  key=\"takerFio\"\r\n                >\r\n                  <Input size=\"large\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Qabul qildi</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"giverDriverFio\"\r\n                  key=\"giverDriverFio\"\r\n                >\r\n                  <Input size=\"large\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Topshiruvchi haydovchi FIO</span>\r\n              </Form.Item>\r\n            </Col>\r\n\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"takerDriverFio\"\r\n                  key=\"takerDriverFio\"\r\n                >\r\n                  <Input size=\"large\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Qabulqiluvchi haydovchi FIO</span>\r\n              </Form.Item>\r\n            </Col>\r\n\r\n\r\n            <Col md={24} >\r\n              <Form.Item>\r\n                <Form.Item\r\n                  key=\"selenote-field\"\r\n                  name=\"specialNotes\">\r\n                  <Input\r\n                    size=\"large\"\r\n                    placeholder=\"Қўшимча майдон\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Қўшимча майдон</span>\r\n              </Form.Item>\r\n            </Col>\r\n\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"deliveryDistance\"\r\n                  key=\"deliveryDistance\"\r\n                >\r\n                  <Input size=\"large\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Tashish orligi</span>\r\n              </Form.Item>\r\n            </Col>\r\n\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  name=\"deliveryDistanceInCity\"\r\n                  key=\"deliveryDistanceInCity\"\r\n                >\r\n                  <Input size=\"large\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">Tashish orqliq (Shaharda)</span>\r\n              </Form.Item>\r\n            </Col>\r\n\r\n          </Row>\r\n        </div>\r\n\r\n        <div className={`factura-data-sheet-container ${fullView ? 'grid-full-view' : null}`}>\r\n        <div style={{marginBottom: 10, display: 'flex', justifyContent:'space-between'}}>\r\n          <div style={{display: 'flex'}}>\r\n              <Upload \r\n                headers={{\r\n                  Authorization: \"Bearer \" + token\r\n                }}\r\n                multiple={false}\r\n                action=\"http://127.0.0.1:8000/api/v1/factura-products/read-excel\"\r\n                accept=\".xlsx, .xls\" \r\n                onChange={handleImportExecl}>\r\n                \r\n                  <Button style={{marginRight: 10}}>Exceldan yuklash</Button>\r\n               \r\n              </Upload>\r\n              <a target=\"_blank\" href=\"../../../excels/on_doc_factura_products.xlsx\" download>\r\n                <Button >\r\n                  Shablon yuklash\r\n                </Button>\r\n              </a>\r\n            </div>\r\n            <Button\r\n              type=\"primary\"\r\n              icon={fullView ? <FullscreenExitOutlined /> : <FullscreenOutlined />} \r\n              onClick={()=>toglleFullView(!fullView)}>\r\n                { fullView ? \"Kichraytirish\" : \"Kengaytirish\" }\r\n            </Button>\r\n        </div>\r\n        \r\n      <div style={{overflowX: 'auto'}} >\r\n        <div style={{width: '100%'}}>\r\n          <Datasheet\r\n            data={ grid}\r\n            valueRenderer={ valueRenderer}\r\n            onContextMenu={ onContextMenu}\r\n            onCellsChanged={ onCellsChanged}\r\n          />\r\n        </div>\r\n      </div>\r\n      <Button \r\n        size=\"large\" \r\n        style={{marginTop: 20, marginRight: 7, width: 220}} \r\n        type=\"primary\" \r\n        icon={<FontAwesomeIcon \r\n          style={{marginRight: 7}} \r\n          icon={[\"far\", \"plus-square\"]} />} \r\n        onClick={  handleAddRow }>Qo'shish</Button>\r\n      \r\n      <Button \r\n        size=\"large\" \r\n        style={{marginTop: 20, width: 220 }} \r\n        danger\r\n        type=\"primary\" \r\n        icon={<FontAwesomeIcon \r\n          style={{marginRight: 7}} \r\n          icon={[\"far\", \"trash-alt\"]} />} \r\n        onClick={ ()=>{ if(grid.length>1){ handleRemoveRow(grid.length-1) }}  }>Oxirgi qatorni o'chirish</Button>\r\n      </div>\r\n\r\n        <div className=\"factura-data-sheet-container\">\r\n          <Row justify=\"space-around\">\r\n            <Col >\r\n              <Button\r\n                loading={isLoading}\r\n                primary\r\n                htmlType=\"submit\"\r\n                className=\"factra-action-btns save-btn\"\r\n                size=\"large\"\r\n                icon={<FontAwesomeIcon icon=\"save\" className=\"factura-action-btn-icons\" />}>\r\n                Сақлаб қолиш\r\n                  </Button>\r\n            </Col>\r\n            <Col>\r\n              <Button\r\n                className=\"factra-action-btns sing-btn\"\r\n                size=\"large\"\r\n                icon={<FontAwesomeIcon icon=\"signature\" className=\"factura-action-btn-icons\" />}>\r\n                Имзолаш\r\n                  </Button>\r\n            </Col>\r\n            <Col>\r\n              <Button\r\n                icon={<FontAwesomeIcon icon=\"ban\" className=\"factura-action-btn-icons\" />}\r\n                danger\r\n                className=\"factra-action-btns\"\r\n                size=\"large\">\r\n                Бекор қилиш\r\n                  </Button>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  token: selectToken,\r\n  user: selectCurrentUser\r\n})\r\n\r\nexport default connect(mapStateToProps)(TTYForm);","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\utils\\main.js",["400","401","402","403","404","405","406"],"import moment from 'moment';\r\nimport SelectMeasureEditor from '../components/data-sheet-custom-measure-selector/custom-selector.component';\r\nimport SelectEditor from '../components/data-sheet-custom-selector/custom-selector.component';\r\nimport i18n from \"../translate\";\r\n\r\nconst t = i18n.t.bind(i18n)\r\n\r\nexport const getFileExtension = filename => {\r\n    return filename.slice((filename.lastIndexOf('.') - 1 >>> 0) + 2);\r\n}\r\n\r\nexport const FIRST_TTY_GRID_ROW = [\r\n    { readOnly: true, value: \"\", width: 50 }, //0 ordNo\r\n    { readOnly: true, value: 'Товар/хизмат лар номи*' }, //1 product name\r\n    { readOnly: true, value: \"ўлчов бирлиги.*\", dataEditor: SelectMeasureEditor }, //2 measure\r\n    { readOnly: true, value: 'миқдори' }, //3 count\r\n    { readOnly: true, value: \"Нарҳ*\", }, //4 price\r\n    { readOnly: true, value: \"Юкнинг умумий қиймати\", }, //5 total\r\n    { readOnly: true, value: 'етказиб бериш нарҳи*' }, //6 delivery cost\r\n    { readOnly: true, value: \"Юкка доир хужжатлар\", }, //7 Docs\r\n    { readOnly: true, value: \"Массани аниқлаш усули\", }, //8 weight measure method\r\n    { readOnly: true, value: \"Юк синфи\", }, //9 item class\r\n    { readOnly: true, value: \"Масса (брутто)\", }, //10 brutto weight\r\n    { readOnly: true, value: \"Масса (нетто)\", }, //11 netto weight\r\n]\r\n\r\nexport const FIRST_FACTURA_GRID_ROW = [\r\n    { readOnly: true, value: '', width: 50 },\r\n    { value: t('Tovar/xizmat nomi'), readOnly: true, width: 200 },\r\n    { value: t('Tovar/xizmatlar yagona elektron milliy katalog identifikatsiya kodi'), readOnly: true, width: 150 },\r\n    { value: t('Tovar/xizmat shtrix kodi'), readOnly: true, width: 100 },\r\n    { value: t(\"O'lchov birligi\"), readOnly: true, width: 100 },\r\n    { value: t(\"Miqdori\"), readOnly: true, width: 100 },\r\n    { value: t(\"Narxi\"), readOnly: true, width: 100 },\r\n    { value: t(\"Aksiz soliq (%)\"), readOnly: true, width: 100 },\r\n    { value: t(\"Aksiz soliq, miqdori\"), readOnly: true, width: 100 },\r\n    { value: t(\"Yetkazib berish narxi\"), readOnly: true, width: 100 },\r\n    { value: t(\"QQS (%)\"), readOnly: true, width: 100 },\r\n    { value: t(\"QQS, miqdori\"), readOnly: true, width: 100 },\r\n    { value: t(\"Umumiy summa\"), readOnly: true, width: 150 },\r\n];\r\n\r\nexport const FIRST_ACT_GRID_ROW = [\r\n    { readOnly: true, value: '', width: 50 },\r\n    { value: 'Товар/хизмат лар номи*', readOnly: true, width: 200 },\r\n    { value: 'ўлчов бирлиги.*', readOnly: true, width: 100 },\r\n    { value: \"миқдори\", readOnly: true, width: 100 },\r\n    { value: \"Нарҳ*\", readOnly: true, width: 100 },\r\n    { value: \"Total*\", readOnly: true, width: 150 },\r\n];\r\n\r\nexport const FIRST_CONTRACT_GRID_ROW = [\r\n    { readOnly: true, value: '', width: 50 },\r\n    { value: 'Товар/хизмат лар номи*', readOnly: true, width: 200 },\r\n    { value: 'Товар/хизмат лар Ягона электрон миллий каталоги бўйича идентификация коди*', readOnly: true, width: 150 },\r\n    { value: 'Товар/хизмат штрих коди', readOnly: true, width: 100 },\r\n    { value: 'ўлчов бирлиги.*', readOnly: true, width: 100 },\r\n    { value: \"миқдори\", readOnly: true, width: 100 },\r\n    { value: \"Нарҳ*\", readOnly: true, width: 100 },\r\n    { value: \"етказиб бериш нарҳи*\", readOnly: true, width: 100 },\r\n    { value: \"Total*\", readOnly: true, width: 150 },\r\n];\r\n\r\nexport const FIRST_EMPOWERMENT_GRID_ROW = [\r\n    { readOnly: true, value: '', width: 50 },\r\n    { value: 'Товар/хизмат лар номи*', readOnly: true, width: 200 },\r\n    { value: 'ўлчов бирлиги.*', readOnly: true, width: 100 },\r\n    { value: \"миқдори\", readOnly: true, width: 100 },\r\n]\r\n\r\nexport const SAMPLE_FACTURA_GRID_ROW = [\r\n    { readOnly: true, value: 1 }, //0 ordNo\r\n    { value: \"\" }, //1 product name\r\n    { value: \"\", dataEditor: SelectEditor }, //2 catalogCode\r\n    { value: \"\" }, //3 shrix code\r\n    { value: \"\", dataEditor: SelectMeasureEditor }, //4 measure\r\n    { value: '' }, //5 amount\r\n    { value: \"\", }, //6 price\r\n    { value: '' }, //7 aksiz rate\r\n    { value: '', readOnly: true }, //8 aksiz amount\r\n    { value: '' }, //9 delivery cost\r\n    { value: \"\" }, //10 VAT rate\r\n    { value: '', readOnly: true }, //11 VAT amount\r\n    { value: '', readOnly: true, }, //12 total\r\n]\r\n\r\nexport const SAMPLE_CONTRACT_GRID_ROW = [\r\n    { readOnly: true, value: 1 }, //0 ordNo\r\n    { value: \"\" }, //1 product name\r\n    { value: \"\", dataEditor: SelectEditor }, //2 catalogCode\r\n    { value: \"\" }, //3 shrix code\r\n    { value: \"\", dataEditor: SelectMeasureEditor }, //4 measure\r\n    { value: '' }, //5 amount\r\n    { value: \"\", }, //6 price\r\n    { value: '' }, //7 delivery cost\r\n    { value: '', readOnly: true, }, //8 total\r\n]\r\n\r\nexport const convertProductsToGrid = (products, doc = \"factura\") => {\r\n\r\n    let gridProducts;\r\n\r\n    switch (doc) {\r\n\r\n        case \"empowerment\":\r\n            {\r\n                gridProducts = products.map(product => {\r\n                    return [\r\n                        { readOnly: true, value: product[\"ordNo\"], width: 50 },\r\n                        { value: product[\"name\"] },\r\n                        { value: product[\"measureId\"], dataEditor: SelectMeasureEditor },\r\n                        { value: product[\"count\"] },\r\n                    ]\r\n                })\r\n                gridProducts.unshift(FIRST_EMPOWERMENT_GRID_ROW);\r\n            }\r\n            break;\r\n\r\n        case \"act\":\r\n            {\r\n                gridProducts = products.map(product => {\r\n                    return [\r\n                        { readOnly: true, value: product[\"ordNo\"], width: 50 },\r\n                        { value: product[\"name\"] },\r\n                        { value: product[\"measureId\"], dataEditor: SelectMeasureEditor },\r\n                        { value: product[\"count\"] },\r\n                        { value: product[\"price\"] },\r\n                        { value: parseFloat(product[\"count\"]) * parseFloat(product[\"price\"]), readOnly: true, width: 150 },\r\n                    ]\r\n                })\r\n                gridProducts.unshift(FIRST_ACT_GRID_ROW);\r\n            }\r\n            break;\r\n        case \"contract\":\r\n            {\r\n\r\n                gridProducts = products.map(product => {\r\n                    return [\r\n                        { readOnly: true, value: product[\"ordNo\"] }, //0 ordNo\r\n                        { value: product[\"name\"] }, //1 product name\r\n                        { value: product[\"catalogCode\"], dataEditor: SelectEditor }, //2 catalogCode\r\n                        { value: product[\"barCode\"] }, //3 shrix code\r\n                        { value: product[\"measureId\"], dataEditor: SelectMeasureEditor },\r\n                        { value: product[\"count\"] }, //5 amount\r\n                        { value: product[\"price\"], }, //6 price\r\n                        { value: product[\"deliverySum\"] }, //9 delivery cost\r\n                        {\r\n                            value: product[\"count\"] * product[\"price\"] + parseFloat(product[\"deliverySum\"]),\r\n                            readOnly: true\r\n                        }\r\n                    ]\r\n                })\r\n                gridProducts.unshift(FIRST_CONTRACT_GRID_ROW);\r\n            }\r\n            break;\r\n\r\n        case \"tty\":\r\n            {\r\n                gridProducts = products.map((product, index) => {\r\n                    return [\r\n                        { readOnly: true, value: index + 1, width: 50 }, //0 ordNo\r\n                        { value: product.name }, //1 product name\r\n                        { value: product.measureId, dataEditor: SelectMeasureEditor }, //2 measure\r\n                        { value: product.count }, //3 count\r\n                        { value: product.price }, //4 price\r\n                        { value: product.count * product.price, readOnly: true }, //5 total\r\n                        { value: product.deliveryCost }, //6 delivery cost\r\n                        { value: product.docs, }, //7 Docs\r\n                        { value: product.weightMeasureMethod, }, //8 weight measure method\r\n                        { value: product.itemClass, }, //9 item class\r\n                        { value: product.weightBrut, }, //10 brutto weight\r\n                        { value: product.weightNet, }, //11 netto weight\r\n                    ]\r\n                })\r\n                gridProducts.unshift(FIRST_TTY_GRID_ROW);\r\n            }\r\n            break;\r\n\r\n        default:\r\n            {\r\n                gridProducts = products.map(product => {\r\n                    return [\r\n                        { readOnly: true, value: product[\"ordNo\"] }, //0 ordNo\r\n                        { value: product[\"name\"] }, //1 product name\r\n                        { value: product[\"catalogCode\"], dataEditor: SelectEditor }, //2 catalogCode\r\n                        { value: product[\"barCode\"] }, //3 shrix code\r\n                        { value: product[\"measureId\"], dataEditor: SelectMeasureEditor }, //4 measure\r\n                        { value: product[\"count\"] }, //5 amount\r\n                        { value: product[\"baseSumma\"], }, //6 price\r\n                        { value: product[\"exciseRate\"] }, //7 aksiz rate\r\n                        { value: product[\"exciseSum\"], readOnly: true }, //8 aksiz amount\r\n                        { value: product[\"deliverySum\"] }, //9 delivery cost\r\n                        { value: product[\"vatRate\"] }, //10 VAT rate\r\n                        { value: product[\"vatRate\"] * product[\"baseSumma\"], readOnly: true }, //11 VAT amount\r\n                        { value: product[\"summa\"], readOnly: true, }, //12 total\r\n                    ]\r\n                })\r\n                gridProducts.unshift(FIRST_FACTURA_GRID_ROW);\r\n            }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    return gridProducts;\r\n}\r\n\r\nconst FACTURA_PRODUCT_FIELDS = {\r\n    0: \"ordNo\",\r\n\r\n}\r\n\r\n//#region Rich text editr configs\r\nexport const modules = {\r\n    toolbar: [\r\n        ['bold', 'italic', 'underline', 'strike'], // toggled buttons\r\n        ['blockquote', 'code-block'],\r\n        ['image', 'link'],\r\n\r\n        //[{ 'header': 1 }, { 'header': 2 }],               // custom button values\r\n        [{ 'list': 'ordered' }, { 'list': 'bullet' }],\r\n        [{ 'script': 'sub' }, { 'script': 'super' }], // superscript/subscript\r\n        [{ 'indent': '-1' }, { 'indent': '+1' }], // outdent/indent\r\n        //[{ 'direction': 'rtl' }],                         // text direction\r\n\r\n        [{ 'size': ['small', false, 'large', 'huge'] }], // custom dropdown\r\n        [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\r\n\r\n        [{ 'color': [] }, { 'background': [] }], // dropdown with defaults from theme\r\n        [{ 'font': [] }],\r\n        [{ 'align': [] }],\r\n        ['clean'] // remove formatting button\r\n    ],\r\n    imageDrop: true,\r\n}\r\n\r\nexport const formats = [\r\n    'header',\r\n    'bold', 'italic', 'underline', 'strike', 'blockquote',\r\n    'list', 'bullet', 'indent',\r\n    'link', 'image', 'code-block', 'color', 'background',\r\n    'size', 'align', 'direction', 'indent', 'font', 'script'\r\n];\r\n\r\nexport const modulesForQuestion = {\r\n    toolbar: [\r\n        ['bold', 'italic', 'underline', ], // toggled buttons\r\n        ['code-block'],\r\n        ['image'],\r\n\r\n        //[{ 'header': 1 }, { 'header': 2 }],               // custom button values\r\n        [{ 'list': 'ordered' }, { 'list': 'bullet' }],\r\n\r\n        ['clean'] // remove formatting button\r\n    ],\r\n    imageDrop: true,\r\n}\r\n\r\nexport const formatsForQuestion = [\r\n        'bold', 'italic', 'underline',\r\n        'list', 'bullet',\r\n        'image', 'code-block',\r\n    ]\r\n    //#endregion \r\n\r\n\r\nexport const getValidFileName = (fileName) => {\r\n    return fileName.replace(/[\\/|\\\\\\s:*!?\"<>]/g, \"_\")\r\n}","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\models\\EmpowermentProduct.js",["407","408","409"],"import {useState} from \"react\";\r\n\r\nexport default class EmpowermentProduct{\r\n    \"OrdNo\" = 1;\r\n    \"Name\" = \"\";\r\n    \"MeasureId\" = \"\";\r\n    \"Count\"=\"\"\r\n}\r\n\r\nconst properties=[\r\n    \"OrdNo\",\r\n    \"Name\",\r\n    \"MeasureId\",\r\n    \"Count\"\r\n];\r\n\r\nexport const ConverEmpGridToData = (data, tin, empId) => {\r\n    // const [datum,setDatum]=useState([]);\r\n    let res=[];\r\n    let emp = new EmpowermentProduct();\r\n    if (Array.isArray(data)) {\r\n        data.map((row,index)=>{\r\n            if (index!==0){\r\n                properties.map((prop,i)=>{\r\n                    emp[prop]=row[i]?.value;\r\n                })\r\n                res.push({...emp})\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\n// export const ConvertEmpDataToForm=(products)=>{\r\n//     let resp = products.map(product=>[\r\n//         {value:product.ordNo,readOnly:true},\r\n//         {value:product.Name},\r\n//         {value:product.MeasureId},\r\n//         {value:product.Count}\r\n//     ])\r\n//     return resp;\r\n// }","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\models\\FacturaProduct.js",["410"],"import SelectMeasureEditor from \"../../components/data-sheet-custom-measure-selector/custom-selector.component\";\r\nimport SelectEditor from '../../components/data-sheet-custom-selector/custom-selector.component'\r\nimport { ProductValueRendered } from '../factura/create/product-grid.component';\r\nexport default class FacturaProduct {\r\n    \"OrdNo\"= 1;\r\n    \"CommittentName\"= null;\r\n    \"CommittentTin\"= \"\";\r\n    \"CommittentVatRegCode\"= \"\";\r\n    \"CatalogCode\"= \"\";\r\n    \"CatalogName\"= \"\";\r\n    \"Barcode\"= \"\";\r\n    \"Name\"= \"\";\r\n    \"Serial\"= \"\";\r\n    \"MeasureId\"= \"\";\r\n    \"BaseSumma\"= \"\";\r\n    \"ProfitRate\"= \"\";\r\n    \"Count\"=\"\";\r\n    \"Summa\"= \"\";\r\n    \"DeliverySum\"= \"\";\r\n    \"ExciseRate\"= \"\";\r\n    \"ExciseSum\"= \"\";\r\n    \"VatRate\"= \"0\";\r\n    \"VatSum\"= \"0\";\r\n    \"DeliverySumWithVat\"= \"\";\r\n    \"WithoutVat\"= true;\r\n    \"Marks\"= {\r\n        \"ProductType\": null,\r\n        \"KIZ\": [\r\n            \r\n        ],\r\n        \"NomUpak\": [\r\n            \r\n        ],\r\n        \"IdentTransUpak\": [\r\n            \r\n        ]\r\n    }\r\n}\r\n\r\nconst product_property_order = [\r\n    \"OrdNo\",\r\n    \"Name\",\r\n    [\r\n        \"CatalogCode\",\r\n        \"CatalogName\"\r\n    ],\r\n    \"Barcode\",\r\n    \"MeasureId\",\r\n    \"Count\",\r\n    \"BaseSumma\",\r\n    \"ExciseRate\",\r\n    \"ExciseSum\",\r\n    \"DeliverySum\",\r\n    \"VatRate\",\r\n    \"VatSum\",\r\n    \"DeliverySumWithVat\"\r\n]\r\n\r\nexport const ConvertGridToProduct = (data, Tin, FacturaId)=>{\r\n\r\n    let res = [];\r\n    let HasVat = false;\r\n    let HasExcise = false;\r\n    let HasCommittent = false;\r\n    let HasMedical = false;\r\n\r\n    if(Array.isArray(data)){\r\n\r\n        let WithoutVat=false;\r\n\r\n        data.forEach(row=>{\r\n            let p = new FacturaProduct();\r\n\r\n            product_property_order.forEach((prop, index)=>{\r\n                if(Array.isArray(prop)){\r\n                    prop.forEach(subProp=>{\r\n                        p[subProp]=row[index].value[subProp]\r\n                    })\r\n                }\r\n                else{\r\n                    p[prop] = row[index].value\r\n                }\r\n            })\r\n\r\n            if(p.VatRate>0){\r\n                WithoutVat=false;\r\n                HasVat=true;\r\n            }\r\n            if(p.ExciseRate>0){\r\n                HasExcise=true;\r\n            }\r\n\r\n            res.push(p)\r\n        })\r\n    }\r\n\r\n    return {\r\n        FacturaId,\r\n        Tin,\r\n        HasCommittent,\r\n        HasVat,\r\n        HasMedical,\r\n        HasExcise,\r\n        Products: res\r\n    }\r\n\r\n}\r\n\r\nexport const ConvertProductToGrid = products=>{\r\n    \r\n        let res = products.map(product => [\r\n            { readOnly: true, value: product.OrdNo }, //0 ordNo\r\n            { value: product.Name }, //1 product name\r\n            { value: {classCode: product.CatalogCode, className: product.CatalogName}, dataEditor: SelectEditor, valueViewer: ProductValueRendered }, //2 catalogCode\r\n            { value: product.Barcode }, //3 shrix code\r\n            { value: product.MeasureId, dataEditor: SelectMeasureEditor }, //4 measure\r\n            { value: product.Count }, //5 amount\r\n            { value: product.BaseSumma, }, //6 price\r\n            { value: product.ExciseRate }, //7 aksiz rate\r\n            { value: product.ExciseSum, readOnly: true }, //8 aksiz amount\r\n            { value: product.DeliverySum }, //9 delivery cost\r\n            { value: product.VatRate }, //10 VAT rate\r\n            { value: product.VatSum, readOnly: true }, //11 VAT amount\r\n            { value: product.DeliverySumWithVat, readOnly: true }, //12 total\r\n        ])\r\n        return res\r\n}","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\models\\Empowerment.js",["411","412"],"export default class Empowerment {\r\n    \"EmpowermentID\"= \"\";\r\n    \"EmpowermentDoc\"= {\r\n        \"EmpowermentNo\": \"\",\r\n        \"EmpowermentDateOfIssue\": \"\",\r\n        \"EmpowermentDateOfExpire\": \"\"\r\n    };\r\n    \"ContractDoc\"= {\r\n        \"ContractNo\": \"\",\r\n        \"ContractDate\": \"\"\r\n    };\r\n    \"Agent\"= {\r\n        \"AgentEmpowermentId\": \"\",\r\n        \"AgentTin\": \"\",\r\n        \"JobTitle\": \"\",\r\n        \"Fio\": \"\",\r\n        \"Passport\":{\r\n            \"Number\": \"\",\r\n            \"DateOfIssue\": \"\",\r\n            \"IssuedBy\": \"\"\r\n        }\r\n    };\r\n    \"SellerTin\"= \"200523221\";\r\n    \"BuyerTin\"= \"505282068\";\r\n    \"Seller\"= {\r\n        \"Name\": \"\",\r\n        \"Account\": \"\",\r\n        \"BankId\": \"\",\r\n        \"Address\": \"\",\r\n        \"Mobile\": \"\",\r\n        \"WorkPhone\": \"\",\r\n        \"Oked\": \"\",\r\n        \"DistrictId\": \"\",\r\n        \"Director\": \"\",\r\n        \"Accountant\": \"\"\r\n    }\r\n    \"Buyer\"= {\r\n        \"Name\": \"\",\r\n        \"Account\": \"\",\r\n        \"BankId\": \"\",\r\n        \"Address\": \"\",\r\n        \"Mobile\": \"\",\r\n        \"WorkPhone\": \"\",\r\n        \"Oked\": \"\",\r\n        \"DistrictId\": \"\",\r\n        \"Director\": \"\",\r\n        \"Accountant\": \"\"\r\n    };\r\n    \"ProductList\"= {\r\n        \"EmpowermentProductId\": \"\",\r\n        \"Tin\": \"\",\r\n        \"Products\":[]\r\n    }\r\n}\r\n\r\nexport const GetEmpowermentDataToSign = (formData, products, empId)=>{\r\n    let {\r\n        agentFio,\r\n        agentJobTitle,\r\n        agentPassportDateOfIssue,\r\n        agentPassportIssuedBy,\r\n        agentPassportNumber,\r\n        agentTin,\r\n        buyerAccount,\r\n        buyerAccountant,\r\n        buyerAddress,\r\n        buyerDirector,\r\n        buyerOked,\r\n        buyerMfo,\r\n        buyerName,\r\n        buyerTin,\r\n        contractDate,\r\n        contractNo,\r\n        empowermentDateOfExpire,\r\n        empowermentDateOfIssue,\r\n        empowermentNo,\r\n        sellerAccount,\r\n        sellerAccountant,\r\n        sellerAddress,\r\n        sellerDirector,\r\n        sellerMfo,\r\n        sellerName,\r\n        sellerOked,\r\n        sellerTin\r\n    } = formData;\r\n\r\n    let emp = new Empowerment();\r\n    emp.EmpowermentID=empId;\r\n    emp.EmpowermentDoc={\r\n        EmpowermentDateOfExpire:empowermentDateOfExpire,\r\n        EmpowermentDateOfIssue: empowermentDateOfIssue,\r\n        EmpowermentNo:empowermentNo\r\n    }\r\n    emp.ContractDoc={\r\n        ContractNo:contractNo,\r\n        ContractDate:contractDate\r\n    }\r\n    emp.Agent = {\r\n        AgentTin: agentTin,\r\n        Fio: agentFio,\r\n        JobTitle: agentJobTitle,\r\n        AgentEmpowermentId: empId,\r\n        Passport:{\r\n            DateOfIssue: agentPassportDateOfIssue,\r\n            Number: agentPassportNumber,\r\n            IssuedBy: agentPassportIssuedBy\r\n        }\r\n    }\r\n    emp.SellerTin=sellerTin;\r\n    emp.BuyerTin=buyerTin;\r\n    emp.Seller={\r\n        Name: sellerName,\r\n        Account: sellerAccount,\r\n        BankId: sellerMfo,\r\n        Address: sellerAddress,\r\n        Oked: sellerOked,\r\n        Director: sellerDirector,\r\n        Accountant: sellerAccountant,\r\n    }\r\n    emp.Buyer={\r\n        Name: buyerName,\r\n        Account: buyerAccount,\r\n        BankId: buyerMfo,\r\n        Address: buyerAddress,\r\n        Oked: buyerOked,\r\n        Director: buyerDirector,\r\n        Accountant: buyerAccountant,\r\n    }\r\n\r\n    emp.ProductList={\r\n        EmpowermentProductId:empId,\r\n        Tin:sellerTin,\r\n        Products:products\r\n    }\r\n\r\n    return emp;\r\n}\r\n\r\nexport const EmpowermentDataToForm=formData=>{\r\n    let {\r\n\r\n    } = formData;\r\n\r\n    let emp = {\r\n\r\n    }\r\n}\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\common\\seller-form.component.jsx",["413"],"import React, { Fragment } from 'react';\r\nimport { Input, Form, Row, Col } from 'antd';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectCurrentUser } from '../../redux/user/user.selector';\r\nimport { connect } from 'react-redux';\r\nimport PersonFetch from './person-fetch/person-fetch.component';\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst SellerForm = ({ user, docType, form }) => {\r\n\r\n    const {t} = useTranslation();\r\n\r\n  const { tin, name, fullName, regCode, mfo, bank_account, address, director_fio, director_tin, accountant, phone } = user;\r\n\r\n  return (\r\n    <div>\r\n\r\n      <h3>{t(\"Sizning ma'lumotlaringiz\")}</h3>\r\n\r\n      {\r\n        docType==\"contract\" ?\r\n        <PersonFetch\r\n        form={form}\r\n        nameCol={11}\r\n        tinCol={11}\r\n        tinLabel={t(\"Jis.Shaxs STIR\")}\r\n        nameLabel={t(\"Jis.Shaxs FIO\")}\r\n        pTin=\"sellerFizTin\"\r\n        pName=\"sellerFizFio\"\r\n      />\r\n      : null\r\n      }\r\n      \r\n\r\n      <Form.Item>\r\n        <Form.Item\r\n          key=\"dyna-form-item-inn-seller\"\r\n          name=\"sellerTin\"\r\n          rules={[{ required: true }]}\r\n          initialValue={tin}>\r\n          <Input\r\n            disabled\r\n            size=\"large\"\r\n            placeholder={t(\"STIR\")} />\r\n        </Form.Item>\r\n        <span className=\"custom-input-label-1\">{t(\"STIR\")}</span>\r\n      </Form.Item>\r\n      {\r\n        docType !== \"contract\" ?\r\n          <h3>{t(\"Tashkilot\")}</h3>\r\n          : null\r\n      }\r\n      <Form.Item>\r\n        <Form.Item\r\n          key=\"seller-name-1-sellerName\"\r\n          rules={[{ required: true }]}\r\n          name=\"sellerName\"\r\n          initialValue={name ?? fullName}>\r\n          <Input\r\n\r\n            size=\"large\"\r\n            placeholder={t(\"Sotuvchi nomi\")} />\r\n        </Form.Item>\r\n        <span className=\"custom-input-label-1\">{t(\"Sotuvchi nomi\")}</span>\r\n      </Form.Item>\r\n      {\r\n        docType !== \"act\" ?\r\n          <Fragment>\r\n            {\r\n              docType === \"contract\" || docType === \"empowerment\"\r\n                ? null\r\n                : <Form.Item>\r\n                  <Form.Item\r\n                    key=\"seler-account-vatreg\"\r\n                    name=\"sellerVatRegCode\"\r\n                    initialValue={regCode}>\r\n                    <Input\r\n                      size=\"large\"\r\n                      placeholder={t(\"QQS tolovchi registratsiya raqami\")} />\r\n                  </Form.Item>\r\n                  <span className=\"custom-input-label-1\">{t(\"QQS tolovchi registratsiya raqami\")}</span>\r\n                </Form.Item>\r\n            }\r\n\r\n            <Row justify=\"space-between\">\r\n              <Col md={11} >\r\n                <Form.Item>\r\n                  <Form.Item\r\n                    key=\"seler-account\"\r\n                    name=\"sellerAccount\"\r\n                    initialValue={bank_account}>\r\n                    <Input\r\n                      size=\"large\"\r\n                      placeholder={t(\"Hisob raqami\")} />\r\n                  </Form.Item>\r\n                  <span className=\"custom-input-label-1\">{t(\"Hisob raqami\")}</span>\r\n                </Form.Item>\r\n              </Col>\r\n              <Col md={11}>\r\n                {\r\n                  docType === \"contract\"\r\n                    ? <Form.Item>\r\n                      <Form.Item\r\n                        key=\"seler-account\"\r\n                        name=\"sellerMobilePhone\"\r\n                        initialValue={phone}>\r\n                        <Input\r\n                          size=\"large\"\r\n                          placeholder={t(\"Telfon raqam\")} />\r\n                      </Form.Item>\r\n                      <span className=\"custom-input-label-1\">{t(\"Telfon raqam\")}</span>\r\n                    </Form.Item>\r\n                    : <Form.Item>\r\n                      <Form.Item\r\n                        key=\"seler-account\"\r\n                        name=\"sellerMfo\"\r\n                        initialValue={mfo}>\r\n                        <Input\r\n                          size=\"large\"\r\n                          placeholder={t(\"MFO\")} />\r\n                      </Form.Item>\r\n                      <span className=\"custom-input-label-1\">{t(\"MFO\")}</span>\r\n                    </Form.Item>\r\n                }\r\n\r\n              </Col>\r\n            </Row>\r\n            <Form.Item>\r\n              <Form.Item\r\n                key=\"seler-account\"\r\n                name=\"sellerAddress\"\r\n                initialValue={address}>\r\n                <Input\r\n                  rules={[{ required: true }]}\r\n                  size=\"large\"\r\n                  placeholder={t(\"Manzil\")} />\r\n              </Form.Item>\r\n              <span className=\"custom-input-label-1\">{t(\"Manzil\")}</span>\r\n            </Form.Item>\r\n            <Row justify=\"space-between\">\r\n              <Col md={11} >\r\n                <Form.Item>\r\n                  <Form.Item\r\n                    key=\"seler-account\"\r\n                    name=\"sellerDirector\"\r\n                    initialValue={director_fio}>\r\n                    <Input\r\n                      size=\"large\"\r\n                      placeholder={t(\"Direktor\")} />\r\n                  </Form.Item>\r\n                  <span className=\"custom-input-label-1\">{t(\"Direktor\")}</span>\r\n                </Form.Item>\r\n              </Col>\r\n              <Col md={11}>\r\n                {\r\n                  docType === \"contract\"\r\n                    ? \r\n                    <Form.Item>\r\n                      <Form.Item\r\n                        key=\"seler-account\"\r\n                        name=\"sellerDirectorTin\"\r\n                        initialValue={director_tin}>\r\n                        <Input\r\n                          size=\"large\"\r\n                          placeholder={t(\"Direktor\") + \" \" + t(\"STIR\")} />\r\n                      </Form.Item>\r\n                      <span className=\"custom-input-label-1\">{t(\"Direktor\")+ \" \" +t(\"STIR\")}</span>\r\n                    </Form.Item>\r\n                    : <Form.Item>\r\n                      <Form.Item\r\n                        key=\"seler-account\"\r\n                        name=\"sellerAccountant\"\r\n                        initialValue={accountant}>\r\n                        <Input\r\n                          size=\"large\"\r\n                          placeholder={t(\"Bosh hisobchi\")} />\r\n                      </Form.Item>\r\n                      <span className=\"custom-input-label-1\">{t(\"Bosh hisobchi\")}</span>\r\n                    </Form.Item>\r\n                }\r\n              </Col>\r\n            </Row>\r\n          </Fragment>\r\n          : null\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  user: selectCurrentUser\r\n})\r\n\r\nexport default connect(mapStateToProps)(SellerForm);\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\common\\buyer-form.component.jsx",["414"],"import React, { Fragment } from 'react';\r\nimport { Input, Form, Row, Col, message, Switch, Select, Button } from 'antd';\r\nimport { CloseOutlined, CheckOutlined } from '@ant-design/icons';\r\nimport { useState } from 'react';\r\nimport axios from 'axios';\r\nimport PersonFetch from './person-fetch/person-fetch.component';\r\nimport { setActClient } from '../act/create/create.component';\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst BuyerForm = ({ form, docType, remove, fieldList }) => {\r\n\r\n  const {t} = useTranslation();\r\n  const [isFacturaSingleSided, setIsFacturaSingleSided] = useState(false);\r\n  const [buyerBranches, setBuyerBranches] = useState([]);\r\n\r\n  const handleSingleSided = (value) => {\r\n    setIsFacturaSingleSided(value)\r\n  }\r\n\r\n  const handleFetchBuyer = e => {\r\n    console.log(e.target.value)\r\n    if (!isNaN(e.target.value)) {\r\n      if (e.target.value > 100000000 && e.target.value <= 999999999) {\r\n        axios({\r\n          url: \r\n          `info/contragent-by-tin?tin=${e.target.value}`,\r\n          method: \"GET\",\r\n         \r\n        }).then(res => {\r\n          const { \r\n            tin, \r\n            accountant, \r\n            account, \r\n            address, \r\n            phone, \r\n            name, \r\n            fullName, \r\n            mfo, \r\n            director,\r\n            directorTin, \r\n            regCode } = res.data;\r\n\r\n          let data = {\r\n            buyerTin: tin,\r\n            buyerAccountant: accountant,\r\n            buyerAccount: account,\r\n            buyerAddress: address,\r\n            buyerMobilePhone: phone,\r\n            buyerName: name ?? fullName,\r\n            buyerMfo: mfo,\r\n            buyerDirector: director,\r\n            buyerDirectorTin: directorTin,\r\n            buyerVatRegCode: regCode\r\n          }\r\n\r\n          if(docType===\"act\"){\r\n            form.setFieldsValue({\r\n              actText: setActClient(form.getFieldValue(\"SellerName\"), name ?? fullName)\r\n            })\r\n          }\r\n\r\n\r\n          if(fieldList){\r\n            let fetcherData = form.getFieldValue(\"contract_partners\");\r\n            \r\n            fetcherData[fieldList.name] = {...fetcherData[fieldList.name], ...data}\r\n\r\n            setBuyerBranches(res.data.branches ?? []);\r\n\r\n            form.setFieldsValue({contract_partners: [...fetcherData]})\r\n          }else{\r\n            \r\n            form.setFieldsValue(data)\r\n          }\r\n         \r\n        }).catch(err => {\r\n          console.log(err)\r\n        })\r\n      } else {\r\n        form.setFieldsValue({\r\n          buyerAccountant: null,\r\n          buyerAccount: null,\r\n          buyerAddress: null,\r\n          buyerMobilePhone: null,\r\n          buyerName: null,\r\n          buyerMfo: null,\r\n          buyerDirector: null,\r\n          buyerVatRegCode: null\r\n        })\r\n      }\r\n    } else {\r\n      message.warning(t(\"STIR notog'ri kiritildi!\"))\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      \r\n      <h3>{t(\"Kontragent ma'lumotlari\")}</h3>\r\n      {\r\n        docType ===\"contract\"\r\n        ? <PersonFetch \r\n          form={form} \r\n          pTin={fieldList ? [fieldList.name,\"buyerPhysicalTin\"] : \"buyerPhysicalTin\"} \r\n          pName={fieldList ? [fieldList.name, \"buyerPhysicalFio\"] : \"buyerPhysicalFio\"} \r\n          tinLabel={t(\"Jis. Shaxs STIR\")} nameLabel={t(\"Jis. Shaxs FIO\")} tinCol={11} nameCol={11} />\r\n        : null\r\n      }\r\n      \r\n      <Row justify=\"space-between\">\r\n        <Col md={docType !== \"factura\" ? 24 : 11}>\r\n          <Form.Item>\r\n            <Form.Item\r\n              key={fieldList ? `dyna-form-item-inn-Buyer-${fieldList.key}` : \"dyna-form-item-inn-Buyer\"}\r\n              name={fieldList ? [fieldList.name,\"buyerTin\"] : \"buyerTin\"}\r\n              \r\n            >\r\n              <Input\r\n                onChange={handleFetchBuyer}\r\n                size=\"large\"\r\n                placeholder={t(\"STIR\")} />\r\n            </Form.Item>\r\n            <span className=\"custom-input-label-1\">{t(\"STIR\")}</span>\r\n          </Form.Item>\r\n        </Col>\r\n        <Col md={docType !== \"factura\" ? 0 : 11}>\r\n          <h4>{t(\"Bir tomonlama fakturami?\")}</h4>\r\n          <Switch\r\n            onChange={handleSingleSided}\r\n            checkedChildren={<CheckOutlined />}\r\n            unCheckedChildren={<CloseOutlined />}\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      {\r\n        isFacturaSingleSided ?\r\n          <div>\r\n            <h3>{t(\"Turi\")}</h3>\r\n            <Form.Item\r\n              key=\"sigle-sided-factura-type-1\"\r\n              \r\n              >\r\n              <Form.Item\r\n                name={fieldList ? [fieldList.name, \"singleSidedType\"] : \"singleSidedType\"}\r\n              >\r\n                <Select bordered={false} size=\"large\">\r\n                  <Option value={1}>На физ. лицо</Option>\r\n                  <Option value={2}>На экспорт</Option>\r\n                  <Option value={3}>На импорт</Option>\r\n                  <Option value={4}>Реализация, связанная с гос. секретом</Option>\r\n                  <Option value={5}>Финансовые услуги</Option>\r\n                </Select>\r\n\r\n              </Form.Item>\r\n              <span className=\"custom-input-label-1\">{t(\"Kontragent turi\")}</span>\r\n            </Form.Item>\r\n          </div>\r\n          : null\r\n      }\r\n\r\n      {\r\n        !isFacturaSingleSided ?\r\n          <div>\r\n            { docType==\"contract\" ? null : <h3>{t(\"Hamkor korxonasi\")}</h3> }\r\n            <Form.Item>\r\n              <Form.Item\r\n                rules={[{ required: true }]}\r\n                key=\"buyer-name-1-BuyerName\"\r\n                name={fieldList ? [fieldList.name,\"buyerName\"] : \"buyerName\"}\r\n              >\r\n                <Input\r\n                  onChange={val=>{\r\n                    form.setFieldsValue({\r\n                      actText: setActClient(form.getFieldValue(\"SellerName\"), val.target.value)})\r\n                    }\r\n                  }\r\n                  size=\"large\"\r\n                  placeholder={t(\"Nomi\")} />\r\n              </Form.Item>\r\n              <span className=\"custom-input-label-1\">{t(\"Nomi\")}</span>\r\n            </Form.Item>\r\n            {\r\n              docType !== \"act\" ?\r\n                <Fragment>\r\n                  {\r\n                    docType === \"contract\" || docType === \"empowerment\"\r\n                      ? null\r\n                      : <Form.Item>\r\n                        <Form.Item\r\n                          key=\"seler-account-vatreg\"\r\n                          name={fieldList ? [fieldList.name, \"buyerVatRegCode\"] : \"buyerVatRegCode\"}\r\n                        >\r\n                          <Input\r\n                            size=\"large\"\r\n                            placeholder={t(\"QQS tolovchi registratsiya raqami\")}\r\n                          />\r\n                        </Form.Item>\r\n                        <span className=\"custom-input-label-1\">{t(\"QQS tolovchi registratsiya raqami\")}</span>\r\n                      </Form.Item>\r\n                  }\r\n\r\n                  <Row justify=\"space-between\">\r\n                    <Col md={11} >\r\n                      <Form.Item>\r\n                        <Form.Item\r\n                          key=\"seler-account\"\r\n\r\n                          name={fieldList ? [fieldList.name,\"buyerAccount\"] : \"buyerAccount\"}\r\n                          >\r\n                          <Input\r\n                            size=\"large\"\r\n                            placeholder={t(\"Hisob raqami\")} />\r\n                        </Form.Item>\r\n                        <span className=\"custom-input-label-1\">{t(\"Hisob raqami\")}</span>\r\n                      </Form.Item>\r\n                    </Col>\r\n\r\n                    <Col md={11}>\r\n                      {\r\n                        docType === \"contract\"\r\n                          ? <Form.Item>\r\n                          <Form.Item\r\n                            key=\"seler-account\"\r\n                            name={fieldList ? [fieldList.name,\"buyerMobilePhone\"] : \"buyerMobilePhone\"}\r\n                          >\r\n                            <Input\r\n                              size=\"large\"\r\n                              placeholder={t(\"Telfon raqam\")}\r\n                            />\r\n                          </Form.Item>\r\n                          <span className=\"custom-input-label-1\">{t(\"Telfon raqam\")}</span>\r\n                        </Form.Item>\r\n                          : <Form.Item>\r\n                            <Form.Item\r\n                              key=\"seler-account\"\r\n                              name={fieldList ? [fieldList.name,\"buyerMfo\"] : \"buyerMfo\"}\r\n                            >\r\n                              <Input\r\n                                size=\"large\"\r\n                                placeholder={t(\"MFO\")}\r\n                              />\r\n                            </Form.Item>\r\n                            <span className=\"custom-input-label-1\">{t(\"MFO\")}</span>\r\n                          </Form.Item>\r\n                      }\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <Form.Item>\r\n                    <Form.Item\r\n                      rules={[{ required: true }]}\r\n                      key=\"seler-account\"\r\n                      name={fieldList ? [fieldList.name,\"buyerAddress\"] : \"buyerAddress\"}\r\n                    >\r\n                      <Input\r\n                        size=\"large\"\r\n                        placeholder={t(\"Manzil\")} />\r\n                    </Form.Item>\r\n                    <span className=\"custom-input-label-1\">{t(\"Manzil\")}</span>\r\n                  </Form.Item>\r\n                    \r\n                  {\r\n                      docType===\"contract\"?\r\n                      <Col md={24} >\r\n                      <Form.Item>\r\n                        <Form.Item\r\n                          key=\"seler-account\"\r\n                          name={fieldList ? [fieldList.name,\"buyerBranch\"] : \"buyerBranch\"}\r\n                        >\r\n                          <Select\r\n                            bordered={false}\r\n                            size=\"large\"\r\n                            defaultActiveFirstOption\r\n                            placeholder=\"\">\r\n                              {buyerBranches.map(item=><Option value={item.tin}>{ item.tin } - {item.name}</Option>)}\r\n                          </Select>\r\n                        </Form.Item>\r\n                        <span className=\"custom-input-label-1\">{t(\"Filiali\")}</span>\r\n                      </Form.Item>\r\n                    </Col>\r\n                    :null\r\n                    }\r\n\r\n                  <Row justify=\"space-between\" align=\"stretch\">\r\n                    <Col md={11} >\r\n                      <Form.Item>\r\n                        <Form.Item\r\n                          key=\"seler-account\"\r\n                          name={fieldList ? [fieldList.name,\"buyerDirector\"] : \"buyerDirector\"}\r\n                        >\r\n                          <Input\r\n                            size=\"large\"\r\n                            placeholder={t(\"Direktor\")}  />\r\n                        </Form.Item>\r\n                        <span className=\"custom-input-label-1\">{t(\"Direktor\")}</span>\r\n                      </Form.Item>\r\n                    </Col>\r\n                    <Col md={11} >\r\n                      {\r\n                        docType === \"contract\"\r\n                          ? (remove && fieldList ? <Button \r\n                              className=\"factra-action-btns\" \r\n                              style={{width: '100%'}} \r\n                              danger \r\n                              size=\"large\" \r\n                              onClick={()=>remove(fieldList.name)} >\r\n                                Olib tashlash\r\n                                </Button> \r\n                                : null ) \r\n                          : <Form.Item>\r\n                            <Form.Item\r\n                              key=\"seler-account\"\r\n                              name={fieldList ? [fieldList.name,\"buyerAccountant\"] : \"buyerAccountant\"}\r\n                            >\r\n                              <Input\r\n                                size=\"large\"\r\n                                placeholder={t(\"Bosh hisobchi\")} />\r\n                            </Form.Item>\r\n                            <span className=\"custom-input-label-1\">{t(\"Bosh hisobchi\")}</span>\r\n                          </Form.Item>\r\n                      }\r\n\r\n                    </Col>\r\n                    {\r\n                    docType===\"contract\" ?\r\n                    <Col md={11}>\r\n                      <Form.Item\r\n                        key=\"seler-account-Buyer-dir-tin\"\r\n                        name={ fieldList ? [fieldList.name, \"buyerDirectorTin\"] :\"buyerDirectorTin\"}\r\n                        >\r\n                        <Input\r\n                          type=\"hidden\"\r\n                          size=\"large\"\r\n                          placeholder={t(\"Direktor\") + \" \" + t(\"STIR\")} />\r\n                      </Form.Item>\r\n                      \r\n                      </Col>\r\n                    : null\r\n                  }\r\n                  </Row>\r\n                  \r\n                  \r\n                </Fragment>\r\n                : null\r\n            }\r\n          </div>\r\n          : null\r\n      }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BuyerForm;","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\data-sheet-custom-selector\\custom-selector.component.jsx",["415"],"import React, { PureComponent } from 'react'\r\nimport Select from \"react-select\"\r\nimport { ENTER_KEY, TAB_KEY } from 'react-datasheet/lib/keys';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectUserProducts } from '../../redux/user/user.selector';\r\nimport { connect } from 'react-redux';\r\nimport './custom-selector.style.scss'\r\n\r\nclass SelectEditor extends PureComponent {\r\n  constructor(props) {\r\n    super(props)\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleKeyDown = this.handleKeyDown.bind(this)\r\n    this.state = {}\r\n  }\r\n\r\n  handleChange(opt) {\r\n    console.log(opt)\r\n    \r\n    const { onCommit, onRevert } = this.props\r\n    if(!opt){\r\n      onRevert()\r\n    }\r\n    const { e } = this.state\r\n    onCommit(opt.value)\r\n    console.log('COMMITTED', opt.value)\r\n  }\r\n\r\n  handleKeyDown(e) {\r\n    // record last key pressed so we can handle enter\r\n    if (e.which === ENTER_KEY || e.which === TAB_KEY) {\r\n      e.persist()\r\n      this.setState({ e })\r\n    } else {\r\n      this.setState({ e: null })\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  optionstag = this.props.userProducts.map(d => ({ label: d.className, \r\n    value: //d.classCode\r\n    { CatalogCode: d.classCode, CatalogName: d.className } \r\n  }))\r\n\r\n  render() {\r\n    return (\r\n      <Select\r\n        size=\"small\"\r\n        showSearch\r\n        autoFocus\r\n        dropdownClassName=\"class-codes-drop-down-list\"\r\n        style={{width: \"100%\"}}\r\n        dropdownMatchSelectWidth={false}\r\n        open={true}\r\n        menuPortalTarget={document.body}\r\n        styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}\r\n        value={this.state.selected}\r\n        onChange={this.handleChange}\r\n        //onSelect={this.handleChange}\r\n        onInputKeyDown={this.handleKeyDown}\r\n       options={this.optionstag} \r\n      />\r\n       \r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  userProducts: selectUserProducts\r\n})\r\n\r\nexport default connect(mapStateToProps)(SelectEditor);","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\data-sheet-custom-measure-selector\\custom-selector.component.jsx",["416","417","418","419"],"import React, { PureComponent } from \"react\";\r\nimport {ENTER_KEY, TAB_KEY} from 'react-datasheet/lib/keys';\r\nimport Select from 'react-select';\r\n\r\n\r\nexport default class SelectMeasureEditor extends PureComponent {\r\n    constructor (props) {\r\n      super(props)\r\n      this.handleChange = this.handleChange.bind(this)\r\n      this.state = {}\r\n    }\r\n  \r\n    handleChange (opt) {\r\n      const { onCommit, onRevert } = this.props\r\n      // if (!opt) {\r\n      //   return onRevert()\r\n      // }\r\n      console.log(opt)\r\n      const { e } = this.state\r\n      onCommit(opt.target.value, e)\r\n    }\r\n  \r\n    render () {\r\n      return (\r\n        <select\r\n          onChange={this.handleChange}\r\n        >\r\n          {\r\n            measures.map(measure=><option value={measure.value}> {measure.value} - {measure.label}</option>)\r\n          }\r\n        </select>\r\n      )\r\n    }\r\n  }\r\n\r\n\r\nexport const measures = [\r\n    { value: 0, label: \"boshqa\" },\r\n    {value: 1,\tlabel: \"штука\"},\r\n  {value: 2,\tlabel: \"пачка\"},\r\n  {value: 3,\tlabel: \"миллиграмм\"},\r\n  {value: 4,\tlabel: \"грамм\"},\r\n  {value: 5,\tlabel: \"килограмм\"},\r\n  {value: 6,\tlabel: \"центнер\"},\r\n  {value: 7, label:\t\" тонна\"},\r\n  {value: 8, label:\t\" миллиметр\"},\r\n  {value: 9, label:\t\"сантиметр\"},\r\n  {value:10, label:\t\"дециметр\"},\r\n  {value:11, label:\t\"метр\"},\r\n  {value:12, label:\t\"километр\"},\r\n  {value:13, label:\t\"кв. миллиметр\"},\r\n  {value:14, label:\t\"кв. сантиметр\"},\r\n  {value:15, label:\t\"кв. дециметр\"},\r\n  {value:16, label:\t\"кв. метр\"},\r\n  {value:17, label:\t\"1000 куб. метр\"},\r\n  {value:18, label:\t\"кв. километр\"},\r\n  {value:19, label:\t\"куб. дециметр\"},\r\n  {value:20, label:\t\"куб. метр\"},\r\n  {value:21, label:\t\"куб. километр\"},\r\n  {value:22, label:\t\"миллилитр\"},\r\n  {value:23, label:\t\"литр\"},\r\n  {value:24, label:\t\"дал\"},\r\n  {value:25, label:\t\"сум\"},\r\n  {value:26, label:\t\"комплект\"},\r\n  {value:27, label:\t\"сутка\"},\r\n  {value:28, label:\t\"соат\"},\r\n  {value:29, label:\t\"пар\"},\r\n  {value:30, label:\t\"флакон\"},\r\n  {value:31, label:\t\"размещение\"},\r\n  {value:32, label:\t\"показы\"},\r\n  {value:33, label:\t\"коробка\"},\r\n  {value:34, label:\t\"моточас\"},\r\n  {value:35, label:\t\"Гкал\"},\r\n  {value:36, label:\t\"кВтч\"},\r\n  {value:37, label:\t\"рейс\"},\r\n  {value:38, label:\t\"упаковка\"},\r\n  {value:39, label:\t\"минут\"},\r\n  {value:40, label:\t\"норма/час\"},\r\n  {value:41, label:\t\"баллон\"},\r\n  {value:42, label:\t\"день\"},\r\n  {value:43, label:\t\"месяц\"},\r\n  {value:44, label:\t\"мегабайт\"},\r\n  {value:45, label:\t\"серия\"},\r\n  {value:46, label:\t\"бутылка\"},\r\n  {value:47, label:\t\"кега\"},\r\n  {value:48, label:\t\"публикация\"},\r\n  {value:49, label:\t\"рулон\"},\r\n  {value:50, label:\t\"порция\"},\r\n  {value:51, label:\t\"погонный метр\"},\r\n  {value:52, label:\t\"га\"},\r\n  {value:53, label:\t\"кВарч\"},\r\n  {value:54, label:\t\"человек/час\"},\r\n  {value:55, label:\t\"кВар\"},\r\n  {value:56, label:\t\"кВт\"},\r\n  {value:57, label:\t\"год\"},\r\n  {value:58, label:\t\"лист\"},\r\n  {value:59, label:\t\"блок\"},\r\n  \r\n  ]\r\n  ","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\common\\person-fetch\\person-fetch.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\utils\\utils.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\utils\\e-imzo.js",["420","421","422","423","424","425","426"],"String.prototype.splitKeep = function(splitter, ahead) {\r\n    var self = this;\r\n    var result = [];\r\n    if (splitter != '') {\r\n        // Substitution of matched string\r\n        function getSubst(value) {\r\n            var substChar = value[0] == '0' ? '1' : '0';\r\n            var subst = '';\r\n            for (var i = 0; i < value.length; i++) {\r\n                subst += substChar;\r\n            }\r\n            return subst;\r\n        };\r\n        var matches = [];\r\n        // Getting mached value and its index\r\n        var replaceName = splitter instanceof RegExp ? \"replace\" : \"replaceAll\";\r\n        var r = self[replaceName](splitter, function(m, i, e) {\r\n            matches.push({ value: m, index: i });\r\n            return getSubst(m);\r\n        });\r\n        // Finds split substrings\r\n        var lastIndex = 0;\r\n        for (var i = 0; i < matches.length; i++) {\r\n            var m = matches[i];\r\n            var nextIndex = ahead == true ? m.index : m.index + m.value.length;\r\n            if (nextIndex != lastIndex) {\r\n                var part = self.substring(lastIndex, nextIndex);\r\n                result.push(part);\r\n                lastIndex = nextIndex;\r\n            }\r\n        };\r\n        if (lastIndex < self.length) {\r\n            var part = self.substring(lastIndex, self.length);\r\n            result.push(part);\r\n        };\r\n    } else {\r\n        result.add(self);\r\n    };\r\n    return result;\r\n};\r\n\r\nexport const CAPIWS = {\r\n    URL: (window.location.protocol.toLowerCase() === \"https:\" ? \"wss://127.0.0.1:64443\" : \"ws://127.0.0.1:64646\") + \"/service/cryptapi\",\r\n    callFunction: function(funcDef, callback, error) {\r\n        if (!window.WebSocket) {\r\n            if (error)\r\n                error();\r\n            return;\r\n        }\r\n        var socket;\r\n        try {\r\n            socket = new WebSocket(this.URL);\r\n        } catch (e) {\r\n            error(e);\r\n        }\r\n        socket.onerror = function(e) {\r\n            if (error)\r\n                error(e);\r\n        };\r\n        socket.onmessage = function(event) {\r\n            var data = JSON.parse(event.data);\r\n            socket.close();\r\n            callback(event, data);\r\n        };\r\n        socket.onopen = function() {\r\n            socket.send(JSON.stringify(funcDef));\r\n        };\r\n    },\r\n    version: function(callback, error) {\r\n        if (!window.WebSocket) {\r\n            if (error)\r\n                error();\r\n            return;\r\n        }\r\n        var socket;\r\n        try {\r\n            socket = new WebSocket(this.URL);\r\n        } catch (e) {\r\n            error(e);\r\n        }\r\n        socket.onerror = function(e) {\r\n            if (error)\r\n                error(e);\r\n        };\r\n        socket.onmessage = function(event) {\r\n            var data = JSON.parse(event.data);\r\n            socket.close();\r\n            callback(event, data);\r\n        };\r\n        socket.onopen = function() {\r\n            var o = { name: 'version' };\r\n            socket.send(JSON.stringify(o));\r\n        };\r\n    },\r\n    apidoc: function(callback, error) {\r\n        if (!window.WebSocket) {\r\n            if (error)\r\n                error();\r\n            return;\r\n        }\r\n        var socket;\r\n        try {\r\n            socket = new WebSocket(this.URL);\r\n        } catch (e) {\r\n            error(e);\r\n        }\r\n        socket.onerror = function(e) {\r\n            if (error)\r\n                error(e);\r\n        };\r\n        socket.onmessage = function(event) {\r\n            var data = JSON.parse(event.data);\r\n            socket.close();\r\n            callback(event, data);\r\n        };\r\n        socket.onopen = function() {\r\n            var o = { name: 'apidoc' };\r\n            socket.send(JSON.stringify(o));\r\n        };\r\n    },\r\n    apikey: function(domainAndKey, callback, error) {\r\n        if (!window.WebSocket) {\r\n            if (error)\r\n                error();\r\n            return;\r\n        }\r\n        var socket;\r\n        try {\r\n            socket = new WebSocket(this.URL);\r\n        } catch (e) {\r\n            error(e);\r\n        }\r\n        socket.onerror = function(e) {\r\n            if (error)\r\n                error(e);\r\n        };\r\n        socket.onmessage = function(event) {\r\n            var data = JSON.parse(event.data);\r\n            socket.close();\r\n            callback(event, data);\r\n        };\r\n        socket.onopen = function() {\r\n            var o = { name: 'apikey', arguments: domainAndKey };\r\n            socket.send(JSON.stringify(o));\r\n        };\r\n    }\r\n};\r\n\r\nexport const EIMZOClient = {\r\n    NEW_API: false,\r\n    API_KEYS: [\r\n        'cabinet.onlinefactura.uz', 'F09A2CBE8EA25A5C065AF78D32F517B1DCF12E997575556CBD90B405A90420E6EB538FCCFFCBAA22C5D191CAB3803965621B023E8642F77F35DDA072FBA17914'\r\n    ],\r\n    checkVersion: function(success, fail) {\r\n        CAPIWS.version(function(event, data) {\r\n            if (data.success === true) {\r\n                if (data.major && data.minor) {\r\n                    var installedVersion = parseInt(data.major) * 100 + parseInt(data.minor);\r\n                    EIMZOClient.NEW_API = installedVersion >= 336;\r\n                    success(data.major, data.minor);\r\n                } else {\r\n                    fail(null, 'E-IMZO Version is undefined');\r\n                }\r\n            } else {\r\n                fail(null, data.reason);\r\n            }\r\n        }, function(e) {\r\n            fail(e, null);\r\n        });\r\n    },\r\n    installApiKeys: function(success, fail) {\r\n        CAPIWS.apikey(EIMZOClient.API_KEYS, function(event, data) {\r\n            if (data.success) {\r\n                success();\r\n            } else {\r\n                fail(null, data.reason);\r\n            }\r\n        }, function(e) {\r\n            fail(e, null);\r\n        });\r\n    },\r\n    listAllUserKeys: function(itemIdGen, itemUiGen, success, fail) {\r\n        var items = [];\r\n        var errors = [];\r\n        if (!EIMZOClient.NEW_API) {\r\n            EIMZOClient._findCertKeys(itemIdGen, itemUiGen, items, errors, function(firstItmId) {\r\n                EIMZOClient._findPfxs(itemIdGen, itemUiGen, items, errors, function(firstItmId2) {\r\n                    if (items.length === 0 && errors.length > 0) {\r\n                        fail(errors[0].e, errors[0].r);\r\n                    } else {\r\n                        var firstId = null;\r\n                        if (items.length === 1) {\r\n                            if (firstItmId) {\r\n                                firstId = firstItmId;\r\n                            } else if (firstItmId2) {\r\n                                firstId = firstItmId2;\r\n                            }\r\n                        }\r\n                        success(items, firstId);\r\n                    }\r\n                });\r\n            });\r\n        } else {\r\n            EIMZOClient._findCertKeys2(itemIdGen, itemUiGen, items, errors, function(firstItmId) {\r\n                EIMZOClient._findPfxs2(itemIdGen, itemUiGen, items, errors, function(firstItmId2) {\r\n                    EIMZOClient._findTokens2(itemIdGen, itemUiGen, items, errors, function(firstItmId3) {\r\n                        if (items.length === 0 && errors.length > 0) {\r\n                            fail(errors[0].e, errors[0].r);\r\n                        } else {\r\n                            var firstId = null;\r\n                            if (items.length === 1) {\r\n                                if (firstItmId) {\r\n                                    firstId = firstItmId;\r\n                                } else if (firstItmId2) {\r\n                                    firstId = firstItmId2;\r\n                                } else if (firstItmId3) {\r\n                                    firstId = firstItmId3;\r\n                                }\r\n                            }\r\n                            success(items, firstId);\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n        }\r\n    },\r\n    loadKey: function(itemObject, success, fail, verifyPassword) {\r\n        if (itemObject) {\r\n            var vo = itemObject;\r\n            if (vo.type === \"certkey\") {\r\n                CAPIWS.callFunction({ plugin: \"certkey\", name: \"load_key\", arguments: [vo.disk, vo.path, vo.name, vo.serialNumber] }, function(event, data) {\r\n                    if (data.success) {\r\n                        var id = data.keyId;\r\n                        success(id);\r\n                    } else {\r\n                        fail(null, data.reason);\r\n                    }\r\n                }, function(e) {\r\n                    fail(e, null);\r\n                });\r\n            } else if (vo.type === \"pfx\") {\r\n                CAPIWS.callFunction({ plugin: \"pfx\", name: \"load_key\", arguments: [vo.disk, vo.path, vo.name, vo.alias] }, function(event, data) {\r\n                    if (data.success) {\r\n                        var id = data.keyId;\r\n                        if (verifyPassword) {\r\n                            CAPIWS.callFunction({ name: \"verify_password\", plugin: \"pfx\", arguments: [id] }, function(event, data) {\r\n                                if (data.success) {\r\n                                    success(id);\r\n                                } else {\r\n                                    fail(null, data.reason);\r\n                                }\r\n                            }, function(e) {\r\n                                fail(e, null);\r\n                            });\r\n                        } else {\r\n                            success(id);\r\n                        }\r\n                    } else {\r\n                        fail(null, data.reason);\r\n                    }\r\n                }, function(e) {\r\n                    fail(e, null);\r\n                });\r\n            } else if (vo.type === \"ftjc\") {\r\n                CAPIWS.callFunction({ plugin: \"ftjc\", name: \"load_key\", arguments: [vo.cardUID] }, function(event, data) {\r\n                    if (data.success) {\r\n                        var id = data.keyId;\r\n                        if (verifyPassword) {\r\n                            CAPIWS.callFunction({ plugin: \"ftjc\", name: \"verify_pin\", arguments: [id, '1'] }, function(event, data) {\r\n                                if (data.success) {\r\n                                    success(id);\r\n                                } else {\r\n                                    fail(null, data.reason);\r\n                                }\r\n                            }, function(e) {\r\n                                fail(e, null);\r\n                            });\r\n                        } else {\r\n                            success(id);\r\n                        }\r\n                    } else {\r\n                        fail(null, data.reason);\r\n                    }\r\n                }, function(e) {\r\n                    fail(e, null);\r\n                });\r\n            }\r\n        }\r\n    },\r\n    changeKeyPassword: function(itemObject, success, fail) {\r\n        if (itemObject) {\r\n            var vo = itemObject;\r\n            if (vo.type === \"pfx\") {\r\n                CAPIWS.callFunction({ plugin: \"pfx\", name: \"load_key\", arguments: [vo.disk, vo.path, vo.name, vo.alias] }, function(event, data) {\r\n                    if (data.success) {\r\n                        var id = data.keyId;\r\n                        CAPIWS.callFunction({ name: \"change_password\", plugin: \"pfx\", arguments: [id] }, function(event, data) {\r\n                            if (data.success) {\r\n                                success();\r\n                            } else {\r\n                                fail(null, data.reason);\r\n                            }\r\n                        }, function(e) {\r\n                            fail(e, null);\r\n                        });\r\n                    } else {\r\n                        fail(null, data.reason);\r\n                    }\r\n                }, function(e) {\r\n                    fail(e, null);\r\n                });\r\n            } else if (vo.type === \"ftjc\") {\r\n                CAPIWS.callFunction({ plugin: \"ftjc\", name: \"load_key\", arguments: [vo.cardUID] }, function(event, data) {\r\n                    if (data.success) {\r\n                        var id = data.keyId;\r\n                        CAPIWS.callFunction({ name: \"change_pin\", plugin: \"ftjc\", arguments: [id, '1'] }, function(event, data) {\r\n                            if (data.success) {\r\n                                success();\r\n                            } else {\r\n                                fail(null, data.reason);\r\n                            }\r\n                        }, function(e) {\r\n                            fail(e, null);\r\n                        });\r\n                    } else {\r\n                        fail(null, data.reason);\r\n                    }\r\n                }, function(e) {\r\n                    fail(e, null);\r\n                });\r\n            }\r\n        }\r\n    },\r\n    createPkcs7: function(id, data, timestamper, success, fail) {\r\n        CAPIWS.callFunction({ plugin: \"pkcs7\", name: \"create_pkcs7\", arguments: [btoa(unescape(encodeURIComponent(data))), id, 'no'] }, function(event, data) {\r\n            if (data.success) {\r\n                var pkcs7 = data.pkcs7_64;\r\n                if (timestamper) {\r\n                    var sn = data.signer_serial_number;\r\n                    timestamper(data.signature_hex, function(tst) {\r\n                        CAPIWS.callFunction({ plugin: \"pkcs7\", name: \"attach_timestamp_token_pkcs7\", arguments: [pkcs7, sn, tst] }, function(event, data) {\r\n                            if (data.success) {\r\n                                var pkcs7tst = data.pkcs7_64;\r\n                                success(pkcs7tst);\r\n                            } else {\r\n                                fail(null, data.reason);\r\n                            }\r\n                        }, function(e) {\r\n                            fail(e, null);\r\n                        });\r\n                    }, fail);\r\n                } else {\r\n                    success(pkcs7);\r\n                }\r\n            } else {\r\n                fail(null, data.reason);\r\n            }\r\n        }, function(e) {\r\n            fail(e, null);\r\n        });\r\n    },\r\n    appendPkcs7Attached: function(id, data, timestamper, success, fail) {\r\n        CAPIWS.callFunction({ plugin: \"pkcs7\", name: \"append_pkcs7_attached\", arguments: [data, id] }, function(event, data) {\r\n            if (data.success) {\r\n                var pkcs7 = data.pkcs7_64;\r\n                if (timestamper) {\r\n                    var sn = data.signer_serial_number;\r\n                    timestamper(data.signature_hex, function(tst) {\r\n                        CAPIWS.callFunction({ plugin: \"pkcs7\", name: \"attach_timestamp_token_pkcs7\", arguments: [pkcs7, sn, tst] }, function(event, data) {\r\n                            if (data.success) {\r\n                                var pkcs7tst = data.pkcs7_64;\r\n                                success(pkcs7tst);\r\n                            } else {\r\n                                fail(null, data.reason);\r\n                            }\r\n                        }, function(e) {\r\n                            fail(e, null);\r\n                        });\r\n                    }, fail);\r\n                } else {\r\n                    success(pkcs7);\r\n                }\r\n            } else {\r\n                fail(null, data.reason);\r\n            }\r\n        }, function(e) {\r\n            fail(e, null);\r\n        });\r\n    },\r\n    _getX500Val: function(s, f) {\r\n        var res = s.splitKeep(/,[A-Z]+=/g, true);\r\n        for (var i in res) {\r\n            var n = res[i].search((i > 0 ? \",\" : \"\") + f + \"=\");\r\n            if (n !== -1) {\r\n                return res[i].slice(n + f.length + 1 + (i > 0 ? 1 : 0));\r\n            }\r\n        }\r\n        return \"\";\r\n    },\r\n    _findCertKeyCertificates: function(itemIdGen, itemUiGen, items, errors, allDisks, diskIndex, params, callback) {\r\n        if (parseInt(diskIndex) + 1 > allDisks.length) {\r\n            callback(params);\r\n            return;\r\n        }\r\n        CAPIWS.callFunction({ plugin: \"certkey\", name: \"list_certificates\", arguments: [allDisks[diskIndex]] }, function(event, data) {\r\n            if (data.success) {\r\n                for (var rec in data.certificates) {\r\n                    var el = data.certificates[rec];\r\n                    var vo = {\r\n                        disk: el.disk,\r\n                        path: el.path,\r\n                        name: el.name,\r\n                        serialNumber: el.serialNumber,\r\n                        subjectName: el.subjectName,\r\n                        validFrom: new Date(el.validFrom),\r\n                        validTo: new Date(el.validTo),\r\n                        issuerName: el.issuerName,\r\n                        publicKeyAlgName: el.publicKeyAlgName,\r\n                        CN: EIMZOClient._getX500Val(el.subjectName, \"CN\"),\r\n                        TIN: EIMZOClient._getX500Val(el.subjectName, \"INITIALS\"),\r\n                        O: EIMZOClient._getX500Val(el.subjectName, \"O\"),\r\n                        T: EIMZOClient._getX500Val(el.subjectName, \"T\"),\r\n                        type: 'certkey'\r\n                    };\r\n                    if (!vo.TIN)\r\n                        continue;\r\n                    var itmkey = itemIdGen(vo, rec);\r\n                    if (params.length === 0) {\r\n                        params.push(itmkey);\r\n                    }\r\n                    var itm = itemUiGen(itmkey, vo);\r\n                    items.push(itm);\r\n                }\r\n            } else {\r\n                errors.push({ r: data.reason });\r\n            }\r\n            EIMZOClient._findCertKeyCertificates(itemIdGen, itemUiGen, items, errors, allDisks, parseInt(diskIndex) + 1, params, callback);\r\n        }, function(e) {\r\n            errors.push({ e: e });\r\n            EIMZOClient._findCertKeyCertificates(itemIdGen, itemUiGen, items, errors, allDisks, parseInt(diskIndex) + 1, params, callback);\r\n        });\r\n    },\r\n    _findCertKeys: function(itemIdGen, itemUiGen, items, errors, callback) {\r\n        var allDisks = [];\r\n        CAPIWS.callFunction({ plugin: \"certkey\", name: \"list_disks\" }, function(event, data) {\r\n            if (data.success) {\r\n                for (var rec in data.disks) {\r\n                    allDisks.push(data.disks[rec]);\r\n                    if (parseInt(rec) + 1 >= data.disks.length) {\r\n                        var params = [];\r\n                        EIMZOClient._findCertKeyCertificates(itemIdGen, itemUiGen, items, errors, allDisks, 0, params, function(params) {\r\n                            callback(params[0]);\r\n                        });\r\n                    }\r\n                }\r\n            } else {\r\n                errors.push({ r: data.reason });\r\n            }\r\n        }, function(e) {\r\n            errors.push({ e: e });\r\n            callback();\r\n        });\r\n    },\r\n    _findPfxCertificates: function(itemIdGen, itemUiGen, items, errors, allDisks, diskIndex, params, callback) {\r\n        if (parseInt(diskIndex) + 1 > allDisks.length) {\r\n            callback(params);\r\n            return;\r\n        }\r\n        CAPIWS.callFunction({ plugin: \"pfx\", name: \"list_certificates\", arguments: [allDisks[diskIndex]] }, function(event, data) {\r\n            if (data.success) {\r\n                for (var rec in data.certificates) {\r\n                    var el = data.certificates[rec];\r\n                    var x500name_ex = el.alias.toUpperCase();\r\n                    x500name_ex = x500name_ex.replace(\"1.2.860.3.16.1.1=\", \"INN=\");\r\n                    x500name_ex = x500name_ex.replace(\"1.2.860.3.16.1.2=\", \"PINFL=\");\r\n                    var vo = {\r\n                        disk: el.disk,\r\n                        path: el.path,\r\n                        name: el.name,\r\n                        alias: el.alias,\r\n                        serialNumber: EIMZOClient._getX500Val(x500name_ex, \"SERIALNUMBER\"),\r\n                        validFrom: new Date(EIMZOClient._getX500Val(x500name_ex, \"VALIDFROM\").replace(/\\./g, \"-\").replace(\" \", \"T\")),\r\n                        validTo: new Date(EIMZOClient._getX500Val(x500name_ex, \"VALIDTO\").replace(/\\./g, \"-\").replace(\" \", \"T\")),\r\n                        CN: EIMZOClient._getX500Val(x500name_ex, \"CN\"),\r\n                        TIN: (EIMZOClient._getX500Val(x500name_ex, \"INN\") ? EIMZOClient._getX500Val(x500name_ex, \"INN\") : EIMZOClient._getX500Val(x500name_ex, \"UID\")),\r\n                        UID: EIMZOClient._getX500Val(x500name_ex, \"UID\"),\r\n                        O: EIMZOClient._getX500Val(x500name_ex, \"O\"),\r\n                        T: EIMZOClient._getX500Val(x500name_ex, \"T\"),\r\n                        type: 'pfx'\r\n                    };\r\n                    if (!vo.TIN)\r\n                        continue;\r\n                    var itmkey = itemIdGen(vo, rec);\r\n                    if (params.length === 0) {\r\n                        params.push(itmkey);\r\n                    }\r\n                    var itm = itemUiGen(itmkey, vo);\r\n                    items.push(itm);\r\n                }\r\n            } else {\r\n                errors.push({ r: data.reason });\r\n            }\r\n            EIMZOClient._findPfxCertificates(itemIdGen, itemUiGen, items, errors, allDisks, parseInt(diskIndex) + 1, params, callback);\r\n        }, function(e) {\r\n            errors.push({ e: e });\r\n            EIMZOClient._findPfxCertificates(itemIdGen, itemUiGen, items, errors, allDisks, parseInt(diskIndex) + 1, params, callback);\r\n        });\r\n    },\r\n    _findPfxs: function(itemIdGen, itemUiGen, items, errors, callback) {\r\n        var allDisks = [];\r\n        CAPIWS.callFunction({ plugin: \"pfx\", name: \"list_disks\" }, function(event, data) {\r\n            if (data.success) {\r\n                var disks = data.disks;\r\n                for (var rec in disks) {\r\n                    allDisks.push(data.disks[rec]);\r\n                    if (parseInt(rec) + 1 >= data.disks.length) {\r\n                        var params = [];\r\n                        EIMZOClient._findPfxCertificates(itemIdGen, itemUiGen, items, errors, allDisks, 0, params, function(params) {\r\n                            callback(params[0]);\r\n                        });\r\n                    }\r\n                }\r\n            } else {\r\n                errors.push({ r: data.reason });\r\n            }\r\n        }, function(e) {\r\n            errors.push({ e: e });\r\n            callback();\r\n        });\r\n    },\r\n    _findCertKeys2: function(itemIdGen, itemUiGen, items, errors, callback) {\r\n        var itmkey0;\r\n        CAPIWS.callFunction({ plugin: \"certkey\", name: \"list_all_certificates\" }, function(event, data) {\r\n            if (data.success) {\r\n                for (var rec in data.certificates) {\r\n                    var el = data.certificates[rec];\r\n                    var vo = {\r\n                        disk: el.disk,\r\n                        path: el.path,\r\n                        name: el.name,\r\n                        serialNumber: el.serialNumber,\r\n                        subjectName: el.subjectName,\r\n                        validFrom: new Date(el.validFrom),\r\n                        validTo: new Date(el.validTo),\r\n                        issuerName: el.issuerName,\r\n                        publicKeyAlgName: el.publicKeyAlgName,\r\n                        CN: EIMZOClient._getX500Val(el.subjectName, \"CN\"),\r\n                        TIN: EIMZOClient._getX500Val(el.subjectName, \"INITIALS\"),\r\n                        O: EIMZOClient._getX500Val(el.subjectName, \"O\"),\r\n                        T: EIMZOClient._getX500Val(el.subjectName, \"T\"),\r\n                        type: 'certkey'\r\n                    };\r\n                    if (!vo.TIN)\r\n                        continue;\r\n                    var itmkey = itemIdGen(vo, rec);\r\n                    if (!itmkey0) {\r\n                        itmkey0 = itmkey;\r\n                    }\r\n                    var itm = itemUiGen(itmkey, vo);\r\n                    items.push(itm);\r\n                }\r\n            } else {\r\n                errors.push({ r: data.reason });\r\n            }\r\n            callback(itmkey0);\r\n        }, function(e) {\r\n            errors.push({ e: e });\r\n            callback(itmkey0);\r\n        });\r\n    },\r\n    _findPfxs2: function(itemIdGen, itemUiGen, items, errors, callback) {\r\n        var itmkey0;\r\n        CAPIWS.callFunction({ plugin: \"pfx\", name: \"list_all_certificates\" }, function(event, data) {\r\n            if (data.success) {\r\n                for (var rec in data.certificates) {\r\n                    var el = data.certificates[rec];\r\n                    var x500name_ex = el.alias.toUpperCase();\r\n                    x500name_ex = x500name_ex.replace(\"1.2.860.3.16.1.1=\", \"INN=\");\r\n                    x500name_ex = x500name_ex.replace(\"1.2.860.3.16.1.2=\", \"PINFL=\");\r\n                    var vo = {\r\n                        disk: el.disk,\r\n                        path: el.path,\r\n                        name: el.name,\r\n                        alias: el.alias,\r\n                        serialNumber: EIMZOClient._getX500Val(x500name_ex, \"SERIALNUMBER\"),\r\n                        validFrom: new Date(EIMZOClient._getX500Val(x500name_ex, \"VALIDFROM\").replace(/\\./g, \"-\").replace(\" \", \"T\")),\r\n                        validTo: new Date(EIMZOClient._getX500Val(x500name_ex, \"VALIDTO\").replace(/\\./g, \"-\").replace(\" \", \"T\")),\r\n                        CN: EIMZOClient._getX500Val(x500name_ex, \"CN\"),\r\n                        TIN: (EIMZOClient._getX500Val(x500name_ex, \"INN\") ? EIMZOClient._getX500Val(x500name_ex, \"INN\") : EIMZOClient._getX500Val(x500name_ex, \"UID\")),\r\n                        UID: EIMZOClient._getX500Val(x500name_ex, \"UID\"),\r\n                        O: EIMZOClient._getX500Val(x500name_ex, \"O\"),\r\n                        T: EIMZOClient._getX500Val(x500name_ex, \"T\"),\r\n                        type: 'pfx'\r\n                    };\r\n                    if (!vo.TIN)\r\n                        continue;\r\n                    var itmkey = itemIdGen(vo, rec);\r\n                    if (!itmkey0) {\r\n                        itmkey0 = itmkey;\r\n                    }\r\n                    var itm = itemUiGen(itmkey, vo);\r\n                    items.push(itm);\r\n                }\r\n            } else {\r\n                errors.push({ r: data.reason });\r\n            }\r\n            callback(itmkey0);\r\n        }, function(e) {\r\n            errors.push({ e: e });\r\n            callback(itmkey0);\r\n        });\r\n    },\r\n    _findTokens2: function(itemIdGen, itemUiGen, items, errors, callback) {\r\n        var itmkey0;\r\n        CAPIWS.callFunction({ plugin: \"ftjc\", name: \"list_all_keys\", arguments: [''] }, function(event, data) {\r\n            if (data.success) {\r\n                for (var rec in data.tokens) {\r\n                    var el = data.tokens[rec];\r\n                    var x500name_ex = el.info.toUpperCase();\r\n                    x500name_ex = x500name_ex.replace(\"1.2.860.3.16.1.1=\", \"INN=\");\r\n                    x500name_ex = x500name_ex.replace(\"1.2.860.3.16.1.2=\", \"PINFL=\");\r\n                    var vo = {\r\n                        cardUID: el.cardUID,\r\n                        statusInfo: el.statusInfo,\r\n                        ownerName: el.ownerName,\r\n                        info: el.info,\r\n                        serialNumber: EIMZOClient._getX500Val(x500name_ex, \"SERIALNUMBER\"),\r\n                        validFrom: new Date(EIMZOClient._getX500Val(x500name_ex, \"VALIDFROM\")),\r\n                        validTo: new Date(EIMZOClient._getX500Val(x500name_ex, \"VALIDTO\")),\r\n                        CN: EIMZOClient._getX500Val(x500name_ex, \"CN\"),\r\n                        TIN: (EIMZOClient._getX500Val(x500name_ex, \"INN\") ? EIMZOClient._getX500Val(x500name_ex, \"INN\") : EIMZOClient._getX500Val(x500name_ex, \"UID\")),\r\n                        UID: EIMZOClient._getX500Val(x500name_ex, \"UID\"),\r\n                        O: EIMZOClient._getX500Val(x500name_ex, \"O\"),\r\n                        T: EIMZOClient._getX500Val(x500name_ex, \"T\"),\r\n                        type: 'ftjc'\r\n                    };\r\n                    if (!vo.TIN)\r\n                        continue;\r\n                    var itmkey = itemIdGen(vo, rec);\r\n                    if (!itmkey0) {\r\n                        itmkey0 = itmkey;\r\n                    }\r\n                    var itm = itemUiGen(itmkey, vo);\r\n                    items.push(itm);\r\n                }\r\n            } else {\r\n                errors.push({ r: data.reason });\r\n            }\r\n            callback(itmkey0);\r\n        }, function(e) {\r\n            errors.push({ e: e });\r\n            callback(itmkey0);\r\n        });\r\n    }\r\n};","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\utils\\home.config.provider.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\dyna-grid\\dyna-grid.component.jsx",["427","428","429"],"import React, { useState } from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Table, Tooltip, Input, Button, Space, Popconfirm, message } from 'antd';\r\nimport Highlighter from 'react-highlight-words';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport './dyna-grid.style.scss';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\n//import { setItemToBeEdited, triggerFetchStart, triggerActionWithPayload } from '../../redux/admin/admin.actions';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n//import { selectCurrentUser } from '../../redux/user/user.selector';\r\nimport { \r\n  EditOutlined, \r\n  DeleteOutlined, \r\n  EyeOutlined, \r\n  SearchOutlined, \r\n  FullscreenOutlined, \r\n  FullscreenExitOutlined, \r\n  } from '@ant-design/icons';\r\n//import { RESOURCES_PATH } from '../../env';\r\nimport RichTextParser from '../rich-text-parser/rich-text-parser.component';\r\nimport { useEffect } from 'react';\r\nimport { selectCurrentUser } from '../../redux/user/user.selector';\r\n\r\nconst DynaGrid = ({\r\n  \r\n  reload,\r\n  loading,                //loading state of table\r\n  currentUser,            //Provided by the comonent\r\n  match,                  //Provided by the comonent\r\n  setItemToBeEdited,      //Provided by the comonent\r\n  triggerAction,          //Provided by the comonent, redux action consumer\r\n  triggerActionWithPayload, //Provided by comonent, redux action and payload consumer\r\n  title,                  //title of DynaGrid\r\n  //dataSource,             //data source for the component\r\n  config:{                //Config object\r\n    modelName,\r\n    primaryKeyName,\r\n    primaryKeyValue,\r\n    dataSourcePath,       //data source path for the table should be pagination\r\n    addElementViewPath,     //add element to the core\r\n    deleteRequestPath,    //delete request path for API server \r\n    replaceInViewPath,\r\n    approveRequestPath,   //approve request path for API server \r\n    viewActionPath,       //UI route to view the element\r\n    editActionPath,\r\n    resultsViewPath,      //view path to see the results\r\n    triggerReload,        //action to triggere when delete, approve is done\r\n    triggerWithPayload,   //Trigger action with payload\r\n    payload,              //Payload to trigger action\r\n    deleteConfirmText,    //Delete confirm text\r\n    actions,              //Object of actions to allow\r\n                          //  {\r\n                          //    add: true,\r\n                          //    edit: true,\r\n                          //    delete: true,\r\n                          //    approve: true,\r\n                          //    view: true\r\n                          //  }\r\n    allColumns,           // array of columns to show\r\n                          //  [\r\n                          //    dataIndex: name of the data in the source object  \r\n                          //    dataType: \"image\" | to show image, \r\n                          //              \"array\" | to show array of strings\r\n                          //               \"rich-text\" | to show rich text format\r\n                          //              \"object\" | if dataIndex value is object,\r\n                          //                    then you have to provide \"items\" array to show certain properties of object\r\n                          //               \"rich-text\": if dataIndex value includes HTML tags \r\n                          //    isSearchable: true | false \r\n                          //    isFilterable: true | false\r\n                          //    filters: [\"item1\", \"item2\"]  filter options\r\n                          //  ]\r\n  }\r\n})=> {\r\n\r\n\r\n  const [searchText, setSearchText] = useState('');\r\n  const [searchedColumn, setSearchedColumn] = useState('');\r\n  const [filteredInfo, setFilteredInfo] = useState(null);\r\n  const [isFulliew, toggleFullView] = useState(false);\r\n  \r\n  const [pagination, setPagination] = useState({current: 1, pageSize: 10})\r\n  const [totalDataCount, setTotalDataCount] = useState(0);\r\n  const [ajaxDataSource, setAjaxDataSource] = useState([])\r\n  const [loadingSource, setLoadingResource] = useState(false);\r\n  const [reRenderer, setRerenderer]=useState(reload??1)\r\n\r\n  let searchInput = null;\r\n\r\n  //#region PAGINATION PART\r\n  useEffect(()=>{\r\n\r\n    let url = `${dataSourcePath}&page=${pagination.current}&limit=${pagination.pageSize}${searchText ? `&${modelName}[${searchedColumn}]=${searchText}` : ''}`\r\n\r\n    console.log(url)\r\n    console.log(\"replace\",url.replace(/[ ]+/g, \"\"))\r\n    setLoadingResource(true)\r\n\r\n    axios({\r\n      url: url,///url.replace(/[ ]+/g, \"\"),\r\n      method: \"GET\"\r\n    }).then(res=>{\r\n\r\n      if (Array.isArray(res.data.data)){\r\n        setAjaxDataSource(res.data.data);\r\n        setTotalDataCount(res.data.pages?.total)\r\n      }else{\r\n        console.log(res);\r\n      }\r\n      setLoadingResource(false)\r\n    }).catch(error=>{\r\n      console.log(error);\r\n      setLoadingResource(false)\r\n    })\r\n  }, [pagination, dataSourcePath, searchText, searchedColumn, reRenderer])\r\n  //#endregion PAGINATION PART\r\n\r\n  \r\n  //#region PopConfirm functions\r\n  const confirmDelete = (record) => {\r\n\r\n    //setVisible(false);\r\n    setLoadingResource(true)\r\n    axios({\r\n      url: `/${deleteRequestPath}?${primaryKeyName??'id'}=${record[primaryKeyValue??'id']}&tin=${currentUser.tin??currentUser.username}`, \r\n      method: 'delete',\r\n      })\r\n      .then(res=>{\r\n        setRerenderer(reRenderer+1)\r\n        setLoadingResource(false)\r\n        if(triggerReload){\r\n          triggerAction(triggerReload)\r\n        }\r\n\r\n        if(triggerWithPayload){\r\n          triggerActionWithPayload(triggerActionWithPayload, payload)\r\n        }\r\n        //setAction(Math.random())\r\n        message.success(`${record[primaryKeyValue]} is deleted!`);\r\n      }).catch(error=>{\r\n        setLoadingResource(false)\r\n        message.error('Failed to delete!');\r\n        console.error(error);\r\n        \r\n      })\r\n  };\r\n\r\n\r\n  const cancel = () => {\r\n    //setVisible(false);\r\n    message.error('Action cancelled!');\r\n  };\r\n\r\n  //#endregion\r\n\r\n  //#region getColumnSearchProps\r\n  const getColumnSearchProps = dataIndex => ({\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\r\n      <div style={{ padding: 8 }}>\r\n        <Input\r\n          ref={node => {\r\n            searchInput = node;\r\n          }}\r\n          placeholder={`${dataIndex} qidirish`}\r\n          value={selectedKeys[0]}\r\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n          onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n        />\r\n        <Space>\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n            icon={<SearchOutlined />}\r\n            size=\"small\"\r\n            style={{ width: 90 }}\r\n          >\r\n            Qidirish\r\n          </Button>\r\n          <Button onClick={() => handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n            Qaytarish\r\n          </Button>\r\n        </Space>\r\n      </div>\r\n    ),\r\n    filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    onFilter: (value, record) =>\r\n    record[dataIndex] \r\n      ? record[dataIndex].toString().toLowerCase().includes(value.toString().toLowerCase()) \r\n      : false,\r\n      onFilterDropdownVisibleChange: visible => {\r\n      if (visible) {\r\n        setTimeout(() => searchInput.select());\r\n      }\r\n    },\r\n    render: text =>\r\n      searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n          searchWords={[searchText]}\r\n          autoEscape\r\n          textToHighlight={ text ? text.toString() : null}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  //#endregion\r\n\r\n  //#region handleSearch\r\n  const handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n    confirm();\r\n\r\n    setSearchText(selectedKeys[0]);\r\n    setSearchedColumn(dataIndex)\r\n\r\n  };\r\n\r\n  const handleReset = clearFilters => {\r\n    console.log(clearFilters)\r\n    \r\n    clearFilters();\r\n    setSearchText('')\r\n  \r\n  };\r\n\r\n  const handleChange = (pagination, filters, sorter) => {\r\n    console.log('Various parameters', pagination, filters, sorter);\r\n    setPagination(pagination)\r\n    setFilteredInfo(filters);\r\n    //setSortedInfo(sorter);\r\n\r\n  };\r\n  //#endregion\r\n\r\n  const columns =[]\r\n\r\n  //#region column config\r\n  allColumns.forEach((element, index)=> {\r\n    columns.push(\r\n      {\r\n        dataIndex: element.dataIndex,\r\n        title: element.title,\r\n        key: element.dataIndex,\r\n        width: element.width ? element.width : 90,\r\n        ellipsis: element.dataIndex==='detail' || element.dataIndex ==='description' ? true : false,     \r\n      });\r\n\r\n    if(element.isSearchable) \r\n    {\r\n        columns[index] = {...columns[index], ...getColumnSearchProps(element.dataIndex)}\r\n    }\r\n\r\n    if(element.isFilterable)\r\n    {\r\n      columns[index] = {...columns[index], \r\n        filters: element.filters.map(univer=>({text: univer.text ?? univer, value: univer.value ?? univer})), \r\n        onFilter: (value, record) => {\r\n          setSearchText(value.toString().toLowerCase())\r\n          setSearchedColumn(element.dataIndex)\r\n          return ajaxDataSource;\r\n        }}//record[element.dataIndex].toString().toLowerCase().includes(value.toString().toLowerCase()),}\r\n    }\r\n\r\n    if(element.customView){\r\n      columns[index] = { ...columns[index],\r\n      dataIndex: null,\r\n      render: record=>element.customView(record[element.dataIndex])\r\n      }\r\n    }\r\n\r\n    if(element.isBoolean){\r\n      columns[index] = {...columns[index], \r\n      dataIndex: null,\r\n      render: (record)=><div>{record[element.dataIndex] ? 1 : 0}</div>}\r\n    }\r\n\r\n    if(element.isBoolean && element.isFilterable){\r\n      columns[index] = {...columns[index], \r\n      dataIndex: null,\r\n      filters: [{text: 1, value: true}, {text: 0, value: false}], \r\n      onFilter: (value, record) =>!!record[element.dataIndex] === !!value,\r\n      render: (record)=><div>{record[element.dataIndex] ? 1 : 0}</div>}\r\n    }\r\n    \r\n    // if(element.dataType === 'image'){\r\n    //   columns[index] = { \r\n    //     ...columns[index],\r\n    //     dataIndex: null,\r\n    //     width: 170,\r\n    //     render: (record)=><div style={{textAlign: \"center\"}}>\r\n    //       <img style={{width: 80, height: 80 }} src={`${RESOURCES_PATH}/${record[element.dataIndex]}`} alt={`${record[element.dataIndex]}`} />\r\n    //     </div>\r\n    //   }\r\n    // }\r\n\r\n    if(element.dataType === 'rich-text'){\r\n      columns[index] = { \r\n        ...columns[index],\r\n        dataIndex: null,\r\n        render: (record)=><RichTextParser text={record[element.dataIndex]} />\r\n      }\r\n    }\r\n\r\n    if(element.dataType === 'object'){\r\n      columns[index]={\r\n        ...columns[index],\r\n        dataIndex: null,\r\n        render: record=><div style={{display: 'flex', justifyContent: 'space-between', flexWrap: 'wrap'}}>\r\n          {\r\n            record[element.dataIndex] \r\n          ? element.items.map((field, index)=><div key={`sub-dyna-field-${index}`}>{`${field}: `}{ record[element.dataIndex][field] }</div>)\r\n            : \"Nothing found!\"\r\n          }\r\n        </div>\r\n      }\r\n    }\r\n\r\n    if(element.dataType === 'array'){\r\n      columns[index]={\r\n        ...columns[index],\r\n        dataIndex: null,\r\n        onFilter: (value, record) => record[element.dataIndex].includes(value),\r\n        render: record=><div>\r\n          {\r\n            record[element.dataIndex].map(item => <span style={{ backgroundColor: '#4870c7', color: 'white', padding: 3, marginRight: 5, marginBottom: 5, borderRadius: 3 }}>{item} </span>)\r\n          }\r\n        </div>\r\n      }\r\n    }\r\n\r\n    if (element.dataType === \"date\") {\r\n      columns[index]={\r\n        ...columns[index],\r\n        width: 150,\r\n        dataIndex: null,\r\n        render: record=><span>{ moment(record[element.dataIndex]).format('MMMM Do YYYY, H:mm:ss') }</span>\r\n      }\r\n    }\r\n\r\n    if(element.dataType === 'array-count'){\r\n      columns[index]={\r\n        ...columns[index],\r\n        dataIndex: null,\r\n        onFilter: (value, record) => record[element.dataIndex].includes(value),\r\n        render: record=><div>\r\n          {\r\n            record[element.dataIndex].length\r\n          }\r\n        </div>\r\n      }\r\n    }\r\n\r\n  });\r\n    //#endregion\r\n    \r\n    //Actions\r\n    columns.push({\r\n      title: \" \",\r\n      key: 'actions',\r\n      width: 90,\r\n      fixed: 'right',\r\n      render: (record) => \r\n        <div className=\"dyna-grid-actions\">\r\n          {actions.edit \r\n          ? <Tooltip placement=\"left\" title=\"O'zgartirish\">\r\n              {console.log(\"primaryKeyValue\",primaryKeyValue)}\r\n              <Link \r\n              \r\n                to={`${editActionPath}/${record[primaryKeyValue]}`}>\r\n                  <EditOutlined style={{color: 'blue'}}/>\r\n              </Link>\r\n            </Tooltip>\r\n          : null\r\n          }\r\n\r\n          {actions.delete \r\n          ? <Tooltip placement=\"bottom\" title=\"O'chirish\">\r\n              <Popconfirm\r\n                title={ deleteConfirmText ? deleteConfirmText : \"O'chirilsin?\" }\r\n                onConfirm={()=>{confirmDelete(record)}}\r\n                onCancel={cancel}\r\n                okText=\"Ha\"\r\n                cancelText=\"Yo'q\"\r\n              >\r\n              <DeleteOutlined style={{color: 'red'}} />\r\n            </Popconfirm>\r\n          </Tooltip>\r\n          : null\r\n          }\r\n          \r\n          {actions.view \r\n          ? <Tooltip placement=\"bottom\" title=\"Ko'rish\" >\r\n                <Link to={`${ replaceInViewPath \r\n                  ? viewActionPath.replace(`{${replaceInViewPath}}`, record[replaceInViewPath]) \r\n                  : viewActionPath}/${record[primaryKeyValue??'id']}`}><EyeOutlined /></Link>\r\n              </Tooltip>\r\n          : null  \r\n          }\r\n\r\n          {actions.chart\r\n          ?\r\n            <Tooltip placement=\"bottomLeft\" title=\"Natijalar\">\r\n              <Link to={`${resultsViewPath}/${record[primaryKeyValue??'id']}`}>\r\n                <FontAwesomeIcon icon=\"chart-line\" style={{color: '#fb8c00'}} />\r\n              </Link>\r\n            </Tooltip>\r\n          : null\r\n          }\r\n\r\n        </div>,\r\n    })\r\n\r\n    return (\r\n    <div className={`dyna-grid-main-container ${isFulliew ? 'akhadjon-dyna-grid-full-view' : null}`} >\r\n      <div onDoubleClick={()=>toggleFullView(!isFulliew)} \r\n\r\n        style={{marginTop: 40, marginBottom: 10, display: \"flex\", justifyContent: \"space-between\"}}>\r\n        <Button \r\n          \r\n          onClick={()=>{toggleFullView(!isFulliew)}} \r\n          type=\"primary\" \r\n          icon={isFulliew ? <FullscreenExitOutlined /> : <FullscreenOutlined />}>\r\n            { isFulliew ? \"Kichraytirish\" : \"Kengaytirish\" }\r\n          </Button>\r\n        <div>\r\n          <h3>{title}</h3>\r\n        </div>\r\n      </div>\r\n      <Table\r\n        \r\n        loading={loadingSource}\r\n        rowKey=\"id\"\r\n        onChange={handleChange} \r\n        bordered \r\n        pagination={pagination}\r\n        columns={columns} \r\n          dataSource={ajaxDataSource} \r\n        scroll={{ x: allColumns.length * 120, }}//y: window.innerHeight - window.innerHeight / 13 }} \r\n        pagination={{position: ['bottomCenter'], total: totalDataCount}}\r\n      />\r\n    </div>);\r\n  }\r\n\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  currentUser: selectCurrentUser,\r\n})\r\n\r\nconst dispatchMapStateToPros = (dispatch)=>({\r\n  //setItemToBeEdited: (item)=>dispatch(setItemToBeEdited(item)),\r\n  //triggerAction: (action)=>dispatch(triggerFetchStart(action)),\r\n  //triggerActionWithPayload: (action, payload)=>dispatch(triggerActionWithPayload(action, payload))\r\n})\r\n\r\nexport default connect(mapStateToProps, dispatchMapStateToPros)(withRouter(DynaGrid));","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\payme-form\\payme-form.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\classcodes-ajax-search\\classcodes-ajax-search.component.jsx",["430","431"],"import React from 'react';\r\nimport axios from 'axios'\r\nimport { Button, Select, Spin } from 'antd';\r\nimport { useState } from 'react/cjs/react.development';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectCurrentUser } from '../../redux/user/user.selector';\r\nimport { connect } from 'react-redux';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst { Option } = Select;\r\n\r\n\r\n\r\nconst ClasscodeAjaxSearch = ({ user })=>{\r\n\r\n    const {t} = useTranslation();\r\n\r\n    const [selected, setSelected] = useState();\r\n    const [options, setOptions] = useState([]);\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const handleOptionSearch = (text) => {\r\n        setLoading(true)\r\n        axios({\r\n            url: `classifications/search?key=${text}`,\r\n            method: \"get\"\r\n        }).then(res=>{\r\n            console.log(res.data.data)\r\n            setOptions(Array.isArray(res.data.data) ? res.data.data : [])\r\n            setLoading(false)\r\n        }).catch(ex=>{\r\n            console.log(ex);\r\n            setLoading(false)\r\n        })\r\n    \r\n\r\n    }\r\n\r\n    const handleAttach = ()=>{\r\n        console.log(selected)\r\n        axios({\r\n            url: \"classifications/add-products\",\r\n            method: \"post\",\r\n            data: {\r\n                tin: user.tin ?? user.username,\r\n                class_code: selected\r\n            }\r\n        }).then(data=>{\r\n            console.log(data)\r\n        }).catch(ex=>{\r\n            console.log(ex)\r\n        })\r\n    }\r\n\r\n    const optionstag = options.map(d => <Option value={d.classCode} key={d.classCode}>{d.className}</Option>);\r\n\r\n    return <div>\r\n        \r\n        <Select\r\n            //size=\"large\"\r\n            //bordered={false}\r\n            //placeholder={ t(\"Maxsulot izlash\") }\r\n            mode=\"multiple\"\r\n            value={selected}\r\n            showSearch\r\n            showArrow={false}\r\n            defaultActiveFirstOption={false}\r\n            filterOption={false}\r\n            onSearch={handleOptionSearch}\r\n            onChange={setSelected}\r\n            style={{width: '100%'}}\r\n            loading={loading}\r\n            notFoundContent={null}\r\n        >\r\n            {\r\n                optionstag\r\n            }\r\n        </Select>\r\n        \r\n        <Button \r\n            type=\"primary\" \r\n            style={{marginTop: 10}} \r\n            onClick={handleAttach}>\r\n                Ozingizga yuklash\r\n        </Button>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectCurrentUser\r\n})\r\n\r\nexport default connect(mapStateToProps)(ClasscodeAjaxSearch);\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\factura\\create\\product-grid.component.jsx",["432","433","434","435","436"],"import React, { useState, useEffect } from 'react'\r\nimport Datasheet from 'react-datasheet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport SelectMeasureEditor from '../../../components/data-sheet-custom-measure-selector/custom-selector.component';\r\nimport SelectEditor from '../../../components/data-sheet-custom-selector/custom-selector.component';\r\nimport { convertProductsToGrid } from '../../../utils/main';\r\nimport {\r\n    FullscreenOutlined,\r\n    FullscreenExitOutlined,\r\n} from '@ant-design/icons';\r\nimport { Upload, Button } from 'antd';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { setUserProducts } from '../../../redux/user/user.action';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectCurrentUser, selectToken } from '../../../redux/user/user.selector';\r\nimport { connect } from 'react-redux';\r\nimport axios from 'axios';\r\n\r\nexport const ProductValueRendered = prop => {\r\n\r\n    const { value } = prop;\r\n    return <span>{value.CatalogName}</span>\r\n}\r\n\r\nconst FacturaProductGrid = ({ token, loadProducts, user, getProducts, initialValues }) => {\r\n\r\n    useEffect(()=>{\r\n        if(Array.isArray(initialValues)){\r\n            setGrid([\r\n                grid[0],\r\n                ...initialValues\r\n            ])\r\n        }\r\n    }, [initialValues])\r\n\r\n    useEffect(()=>{\r\n        axios({\r\n            url: `classifications/index?tin=${user.tin??user.username}`,\r\n            method: 'get'\r\n        }).then(res=>{\r\n            loadProducts(res.data.data)\r\n        }).catch(ex=>{\r\n            console.log(ex);\r\n        })\r\n    }, [])\r\n\r\n    const { t } = useTranslation();\r\n\r\n    const [fullView, toglleFullView] = useState(false)\r\n    const [grid, setGrid] = useState([\r\n        [\r\n            { readOnly: true, value: '', width: 50 },\r\n            { value: t('Tovar/xizmat nomi'), readOnly: true, width: 200 },\r\n            { value: t('Tovar/xizmatlar yagona elektron milliy katalog identifikatsiya kodi'), readOnly: true, width: 150 },\r\n            { value: t('Tovar/xizmat shtrix kodi'), readOnly: true, width: 100 },\r\n            { value: t(\"O'lchov birligi\"), readOnly: true, width: 100 },\r\n            { value: t(\"Miqdori\"), readOnly: true, width: 100 },\r\n            { value: t(\"Narxi\"), readOnly: true, width: 100 },\r\n            { value: t(\"Aksiz soliq (%)\"), readOnly: true, width: 100 },\r\n            { value: t(\"Aksiz soliq, miqdori\"), readOnly: true, width: 100 },\r\n            { value: t(\"Yetkazib berish narxi\"), readOnly: true, width: 100 },\r\n            { value: t(\"QQS (%)\"), readOnly: true, width: 100 },\r\n            { value: t(\"QQS, miqdori\"), readOnly: true, width: 100 },\r\n            { value: t(\"Umumiy summa\"), readOnly: true, width: 150 },\r\n        ],\r\n        [\r\n            { readOnly: true, value: 1 },                           //0 ordNo\r\n            { value: \"\" },                                          //1 product name\r\n            { value: \"\", dataEditor: SelectEditor, valueViewer: ProductValueRendered },                //2 catalogCode\r\n            { value: \"\" },                                          //3 shrix code\r\n            { value: \"\", dataEditor: SelectMeasureEditor },        //4 measure\r\n            { value: '' },                                          //5 amount\r\n            { value: \"\", },                                         //6 price\r\n            { value: '' },                                          //7 aksiz rate\r\n            { value: '', readOnly: true },                          //8 aksiz amount\r\n            { value: '' },                                          //9 delivery cost\r\n            { value: \"\" },                                          //10 VAT rate\r\n            { value: '', readOnly: true },                          //11 VAT amount\r\n            { value: '', readOnly: true, },                          //12 total\r\n        ]\r\n    ])\r\n\r\n    \r\n\r\n    const handleRemoveRow = (rowId) => {\r\n        console.log(rowId)\r\n\r\n        grid.splice(rowId, 1)\r\n        setGrid([...grid])\r\n        getProducts([...grid])\r\n\r\n    }\r\n\r\n\r\n    const handleImportExecl = (value) => {\r\n\r\n        \r\n        if (value.file.status == \"done\") {\r\n\r\n            const { response } = value.file\r\n\r\n            // response.excel.forEach((element, index) => {\r\n            //     element[0].value = index + 1;\r\n            //     element[0].readOnly = true;\r\n            //     element[2].dataEditor = SelectEditor;\r\n            //     element[4].dataEditor = SelectMeasureEditor;\r\n            // })\r\n\r\n            //setGrid([grid[0], ...response.excel])\r\n            let collector=[];\r\n            if(response.success){\r\n                response.data.forEach((row, index)=>{\r\n                    const { \r\n                        CatalogCode,\r\n                        ProductCount,\r\n                        ProductDeliverySum,\r\n                        ProductDeliverySumWithVat,\r\n                        ProductFuelRate,\r\n                        ProductFuelSum,\r\n                        ProductMeasureId,\r\n                        ProductName, \r\n                        ProductSumma,\r\n                        ProductVatRate,\r\n                        ProductVatSum\r\n                    } = row;\r\n                    collector.push(\r\n                        [\r\n                            { readOnly: true, value: index+1 },                           //0 ordNo\r\n                            { value: ProductName },                                          //1 product name\r\n                            { value: {CatalogName: \"Hi\", CatalogCode}, dataEditor: SelectEditor, valueViewer: ProductValueRendered },                //2 catalogCode\r\n                            { value: \"\" },                                          //3 shrix code\r\n                            { value: ProductMeasureId, dataEditor: SelectMeasureEditor },        //4 measure\r\n                            { value: ProductCount },                                          //5 amount\r\n                            { value: ProductSumma},                                         //6 price\r\n                            { value: ProductFuelRate },                                          //7 aksiz rate\r\n                            { value: ProductFuelSum, readOnly: true },                          //8 aksiz amount\r\n                            { value: ProductDeliverySum },                                          //9 delivery cost\r\n                            { value: ProductVatRate },                                          //10 VAT rate\r\n                            { value: ProductVatSum, readOnly: true },                          //11 VAT amount\r\n                            { value: ProductDeliverySumWithVat, readOnly: true, },                          //12 total\r\n                        ]\r\n                    )\r\n                })\r\n            }\r\n            setGrid([grid[0], ...collector]);\r\n            console.log(response)\r\n        }\r\n    }\r\n\r\n\r\n    const valueRenderer = cell => cell.value;\r\n    const onCellsChanged = changes => {\r\n        changes.forEach(({ cell, row, col, value }, index) => {\r\n            //this sets changed values\r\n            grid[row][col] = { ...grid[row][col], value };\r\n\r\n            //Lets calculate\r\n            let priceamount = parseFloat(grid[row][5].value) * parseFloat(grid[row][6].value);\r\n            let aksizamount = parseFloat(priceamount * grid[row][7].value / 100);\r\n\r\n            grid[row][8] = { value: isNaN(aksizamount) ? 0: parseFloat(aksizamount), readOnly: true };\r\n\r\n            let vatamout = parseFloat(priceamount * parseFloat(grid[row][10].value) / 100);\r\n\r\n            grid[row][11] = { value: isNaN(vatamout)?0:vatamout, readOnly: true }\r\n\r\n            let total = !isNaN(priceamount) ? priceamount : 0\r\n            isNaN(aksizamount) ? total = total : total += aksizamount;\r\n            isNaN(vatamout) ? total= total + 0 : total += vatamout;\r\n            isNaN(grid[row][9].value) ? total =  total + 0 : total += +grid[row][9].value\r\n\r\n            grid[row][12] = { value: total, readOnly: true }\r\n\r\n\r\n        });\r\n        setGrid([...grid]);\r\n\r\n        grid.shift()\r\n\r\n        getProducts(grid)\r\n\r\n    };\r\n\r\n   \r\n\r\n    const handleAddRow = () => {\r\n\r\n        const sampleRow = [\r\n            { readOnly: true, value: grid.length }, //0 ordNo\r\n            { value: \"\" }, //1 product name\r\n            { value: \"\", dataEditor: SelectEditor, valueViewer: ProductValueRendered }, //2 catalogCode\r\n            { value: \"\" }, //3 shrix code\r\n            { value: \"\", dataEditor: SelectMeasureEditor }, //4 measure\r\n            { value: '' }, //5 amount\r\n            { value: \"\", }, //6 price\r\n            { value: '' }, //7 aksiz rate\r\n            { value: '', readOnly: true }, //8 aksiz amount\r\n            { value: '' }, //9 delivery cost\r\n            { value: \"\" }, //10 VAT rate\r\n            { value: '', readOnly: true }, //11 VAT amount\r\n            { value: '', readOnly: true }, //12 total\r\n        ]\r\n\r\n        let newgrid = [...grid, sampleRow];\r\n\r\n        setGrid(newgrid)\r\n    }\r\n\r\n    const onContextMenu = (e, cell, i, j) =>\r\n        cell.readOnly ? e.preventDefault() : null;\r\n    //#endregion\r\n\r\n\r\n    return (\r\n        <div className={`factura-data-sheet-container ${fullView ? 'grid-full-view' : null}`}>\r\n            <div style={{ marginBottom: 10, display: 'flex', justifyContent: 'space-between' }}>\r\n                <div style={{ display: 'flex' }}>\r\n                    <Upload\r\n                        headers={{\r\n                            Authorization: \"Bearer \" + token\r\n                        }}  \r\n                        multiple={false}\r\n                        action={`http://api.onlinefactura.uz/uz/facturas/import-excel`}\r\n                        accept=\".xlsx, .xls\"\r\n                        name=\"Files[file]\"\r\n                        data={{tin: user.tin}}\r\n                        onChange={handleImportExecl}>\r\n                        <Button style={{ marginRight: 10 }}>{t(\"Exceldan yuklash\")}</Button>\r\n\r\n                    </Upload>\r\n                    <a target=\"_blank\" href=\"../../../excels/factura_products.xlsx\" download>\r\n                        <Button >\r\n                            {t(\"Shablonni yuklash\")}\r\n                        </Button>\r\n                    </a>\r\n                </div>\r\n                <Button\r\n                    type=\"primary\"\r\n                    icon={fullView ? <FullscreenExitOutlined /> : <FullscreenOutlined />}\r\n                    onClick={() => toglleFullView(!fullView)}>\r\n                    {fullView ? t(\"Kichraytirish\") : t(\"Kengaytirish\")}\r\n                </Button>\r\n            </div>\r\n\r\n            <div style={{ overflowX: 'auto' }} >\r\n                <div style={{ width: '100%' }}>\r\n                    <Datasheet\r\n                        data={grid}\r\n                        valueRenderer={valueRenderer}\r\n                        onContextMenu={onContextMenu}\r\n                        onCellsChanged={onCellsChanged}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <Button\r\n                size=\"large\"\r\n                style={{ marginTop: 20, marginRight: 7, width: 220 }}\r\n                type=\"primary\"\r\n                icon={<FontAwesomeIcon\r\n                    style={{ marginRight: 7 }}\r\n                    icon={[\"far\", \"plus-square\"]} />}\r\n                onClick={handleAddRow}>{t(\"Qo'shish\")}</Button>\r\n\r\n            <Button\r\n                size=\"large\"\r\n                style={{ marginTop: 20, width: 220 }}\r\n                danger\r\n                type=\"primary\"\r\n                icon={<FontAwesomeIcon\r\n                    style={{ marginRight: 7 }}\r\n                    icon={[\"far\", \"trash-alt\"]} />}\r\n                onClick={() => { if (grid.length > 1) { handleRemoveRow(grid.length - 1) } }}>{t(\"Oxirgi qatorni o'chirish\")}</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch=>({\r\n    loadProducts: (data)=>dispatch(setUserProducts(data))\r\n})\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectCurrentUser,\r\n    token: selectToken\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FacturaProductGrid)\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\rich-text-parser\\rich-text-parser.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\home\\home.component.jsx",["437","438","439"],"import { Col, Row } from 'antd';\r\nimport axios from 'axios';\r\nimport React from 'react'\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport AdminCard from '../../components/admin-card/admin-card.component';\r\nimport DynaGrid from '../../components/dyna-grid/dyna-grid.component';\r\nimport { selectCabinetData } from '../../redux/user/user.selector';\r\nimport './home.component.scss';\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst CabinetHome = ({ cabinetData }) => {\r\n\r\n    const {t} = useTranslation()\r\n\r\n    const [activeTab, setActiveTab] = useState(0)\r\n    const { income, outcome, rejected, saved } = cabinetData ?? {};\r\n    const TabList= {\r\n        0: t(\"Kiruvchi hujjatlar\"),\r\n        1: t(\"Chiquvchi hujjatlar\"),\r\n        2: t(\"Rad etilgan hujjatlar\"),\r\n        3: t(\"Saqlangan hujjatlar\")\r\n    }\r\n\r\n    const list_of_docs = [\r\n        {\r\n            title: t(\"Kiruvchi\"),\r\n            count: income,\r\n            icon: \"cloud-download-alt\",\r\n            color: \"purple\",\r\n            footer: \"Faktura yaratish\",\r\n            create_url: \"/cabinet/documents/waiting\"\r\n        },\r\n        {\r\n            title: t(\"Chiquvchi\"),\r\n            count: outcome,\r\n            icon: \"cloud-upload-alt\",\r\n            color: \"green\",\r\n            footer: \"Shartnoma yaratish\",\r\n            create_url: \"/cabinet/documents/signed\"\r\n        },\r\n        {\r\n            title: t(\"Rad etilgan\"),\r\n            count: rejected,\r\n            icon: \"ban\",\r\n            color: \"pink\",\r\n            footer: \"Akt yaratish\",\r\n            create_url: \"/cabinet/documents/rejected\"\r\n        },\r\n        {\r\n            title: t(\"Saqlangan\"),\r\n            count: saved,\r\n            icon: [\"far\", \"bookmark\"],\r\n            color: \"orange\",\r\n            footer: \"Ishonchnoma yaratish\",\r\n            create_url: \"/cabinet/documents/saved\"\r\n        },\r\n    \r\n    ]\r\n\r\n    const dyna_config = {\r\n        dataSourcePath: `/api/v1/cabinet/${activeTab}?hi`,\r\n        addActionPath: 'actions/add',\r\n        viewActionPath: '/cabinet/{docType}/view',\r\n        replaceInViewPath: \"docType\",\r\n        deleteConfirmText: \"Shu faktura ochirilsinmi?\",\r\n        actions: {\r\n            edit: activeTab===3 ? true : false,\r\n            delete: activeTab===3 ? true : false,\r\n            view: true\r\n        },\r\n        allColumns: [\r\n            {\r\n                title: t(\"Hujjat №\"),\r\n                dataIndex: 'docNo',\r\n                isSearchable: true,\r\n            },\r\n            {\r\n                title: t(\"Hujjat turi\"),\r\n                dataIndex: \"docType\",\r\n                isFilterable: true,\r\n                filters: ['factura', 'act', 'contract', 'empowerment', \"tty\"]\r\n            },\r\n            {\r\n                title: t(\"Kontrakt №\"),\r\n                dataIndex: 'contractNo',\r\n                isSearchable: true,\r\n            },\r\n            {\r\n                title: t(\"Kontragent\"),\r\n                dataIndex: 'sellerName',\r\n                isSearchable: true,\r\n                width: 150\r\n            },\r\n            {\r\n                title: t(\"Kontragent\")+\" \"+t(\"STIR\"),\r\n                dataIndex: \"sellerTin\",\r\n                isSearchable: true,\r\n            },\r\n            {\r\n                title: \"Oluvchi\",\r\n                dataIndex: 'buyerName',\r\n                isSearchable: true,\r\n                width: 150\r\n            },\r\n            {\r\n                title: \"Oluvchi STIR\",\r\n                dataIndex: \"buyerTin\",\r\n                isSearchable: true,\r\n            },\r\n            {\r\n                title: t(\"Holati\"),\r\n                dataIndex: \"status\",\r\n                isFilterable: true,\r\n                width: 70,\r\n                filters: [\r\n                    {value: 1, text: \"1-Saqlangan\"}, \r\n                    {value: 2, text: \"2-Imzo kutilmoqda\"}, \r\n                    {value: 3, text: \"3-Jo'natilgan\"}, \r\n                    {value: 4, text: \"4-Xatolik yuzbergan\"},\r\n                    {value: 5, text: \"5-Qaytarib yuborilgan\"}, \r\n                    {value: 6, text: \"6-Qabul qilingan\"}, \r\n                    {value: 7, text: \"7-Muaffaqiyatli\"}]\r\n            },\r\n            {\r\n                title: t('Yaratilgan sana'),\r\n                dataIndex: \"created_at\",\r\n                dataType: 'date',\r\n            },\r\n        ]\r\n    }\r\n\r\n    return (\r\n        <div className=\"cabinet-home-main-container\">\r\n            <div className=\"cabinet-home-sub-container\">\r\n                <Row gutter={[16, 16]}>\r\n                    {\r\n                        list_of_docs.map((data, index)=><Col onClick={()=>setActiveTab(index)} md={6}>\r\n                            <AdminCard data={data} />\r\n                        </Col>)\r\n                    }\r\n                    \r\n                </Row>\r\n                <DynaGrid\r\n                    title={TabList[activeTab]}\r\n                    config={dyna_config}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    cabinetData: selectCabinetData\r\n})\r\n\r\nexport default connect(mapStateToProps)(CabinetHome)\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\left-sidebar\\left-sidebar.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\language-dropdown\\locale-dropdown.jsx",["440"],"import React, { useState, useEffect } from 'react';\r\n//import { connect } from 'react-redux';\r\n//import { setUserLocale } from '../../redux/user/user.actions';\r\n//import { createStructuredSelector } from 'reselect';\r\n//import { selectUserLocale } from '../../redux/user/user.selector';\r\nimport { Dropdown, Menu } from 'antd';\r\nimport { useTranslation } from 'react-i18next';\r\nimport i18next from \"i18next\";\r\n\r\nconst LanguagesDropdown = ({ locale, changeLocale }) => {\r\n    const { i18n } = useTranslation();\r\n\r\n    const [activeLang, setActiveLang] = useState(i18next.language);\r\n\r\n    useEffect(()=>{\r\n        setActiveLang(i18next.language)\r\n    }, [i18next.language])\r\n\r\n    const languagesMenu = (\r\n        <Menu>\r\n            <Menu.Item onClick={() => { \r\n                //changeLocale('uz'); \r\n                i18n.changeLanguage('uz') \r\n                }}>\r\n                <img style={{ width: 25, borderRadius: '50%' }} alt=\"languange\" src=\"/images/uz.png\" /> O'zb\r\n            </Menu.Item>\r\n            <Menu.Item onClick={() => {\r\n                //changeLocale('uz');\r\n                i18n.changeLanguage('uz-Cyrl')\r\n            }}>\r\n                <img style={{ width: 25, borderRadius: '50%' }} alt=\"languange\" src=\"/images/uz.png\" /> Ўзб\r\n            </Menu.Item>\r\n            <Menu.Item onClick={() => { \r\n                //changeLocale('ru'); \r\n                i18n.changeLanguage('ru') \r\n            }}>\r\n                <img style={{ width: 25, borderRadius: '50%' }} alt=\"languange\" src=\"/images/ru.png\" /> Pyc\r\n            </Menu.Item>\r\n            <Menu.Item onClick={() => { \r\n                //changeLocale('en'); \r\n                i18n.changeLanguage('en') \r\n            }}>\r\n                <img style={{ width: 25, borderRadius: '50%' }} alt=\"languange\" src=\"/images/en.png\" /> Eng\r\n            </Menu.Item>\r\n        </Menu>\r\n    )\r\n\r\n    return (<span className=\"trigger text-float-right\">\r\n        <Dropdown overlay={languagesMenu}>\r\n            <img style={{ width: 25, borderRadius: '50%', marginRight:30 }} alt=\"languange\" src={`/images/${activeLang===\"uz-Cyrl\"?\"uz\": activeLang}.png`} />\r\n        </Dropdown>\r\n    </span>)\r\n}\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//     changeLocale: locale => dispatch(setUserLocale(locale))\r\n// })\r\n\r\n// const mapStateToProps = createStructuredSelector({\r\n//     locale: selectUserLocale\r\n// })\r\n\r\n//export default connect(mapStateToProps, mapDispatchToProps)(LanguagesDropdown);\r\nexport default LanguagesDropdown;","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\right-sidebar\\right-sidebar.component.jsx",["441","442","443"],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\factura\\index.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\frontend\\choose_company\\choose-company.component.jsx",["444","445","446"],"import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Button, List, message } from 'antd';\r\nimport axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { setUser, setUserCompanies } from '../../redux/user/user.action';\r\nimport { selectKeyUser, selectUserCompanies } from '../../redux/user/user.selector';\r\nimport './choose-company.style.scss';\r\n\r\nconst ChooseCompany = ({ setCurrentUser, history, user, setUserComps, companies }) => {\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const setChoosenCompany = async (tin, push_to_cabinet=true)=>{\r\n        await axios({\r\n            url: `user/get-company-data?tin=${tin}`,\r\n            method: 'get'\r\n        }).then(res => {\r\n            setLoading(false)\r\n            setCurrentUser(res.data.company)\r\n            if(push_to_cabinet){\r\n                history.push(\"/cabinet\")\r\n            }\r\n\r\n        }).catch(e => {\r\n\r\n            console.log(e)\r\n\r\n        })\r\n    }\r\n\r\n    const { t } = useTranslation();\r\n    \r\n\r\n    const [chosen, setChosen] = useState(null);\r\n\r\n    useEffect(()=>{\r\n\r\n        if(chosen){\r\n            setChoosenCompany(chosen)\r\n        }\r\n\r\n    }, [chosen]);\r\n\r\n    useEffect(()=>{\r\n        setLoading(true)\r\n        axios({\r\n            url: `info/director-company/?tin=${user.username}`,\r\n            method: 'get',\r\n        }).then(res=>{\r\n            console.log(res);\r\n            if(res.data.success){\r\n                setUserComps(res.data.data)\r\n                setLoading(false)\r\n                if(res.data?.data?.length==1){\r\n                    setChoosenCompany(res.data.data[0].company_tin)\r\n                }\r\n            }else{\r\n                message.error(\"Serverda xatolik!\");\r\n                setLoading(false)\r\n            }\r\n            \r\n        }).catch(err=>{\r\n            console.log(err);\r\n            message.error(\"Serverda xatolik!\");\r\n            setLoading(false)\r\n        })\r\n    }, [])\r\n\r\n\r\n    return (<div className=\"choose-company-main-container\">\r\n        <div className=\"choose-company-sub-container\">\r\n            <Button\r\n                onClick={() => { history.goBack() }}\r\n                type=\"primary\"\r\n\r\n                icon={<FontAwesomeIcon\r\n                    style={{ marginRight: 10 }}\r\n                    icon=\"arrow-circle-left\" />}>\r\n                {t(\"Back\")}\r\n            </Button>\r\n            <h2 style={{ textAlign: \"center\" }}>{t(\"Korxona tanlang\")}</h2>\r\n            <div className=\"company-card-con\">\r\n                \r\n                    \r\n                <List\r\n                    grid={{\r\n                        gutter: 8,\r\n                        xs: 1,\r\n                        md: 2,\r\n                        lg: 3\r\n                    }}\r\n                    loading={loading}\r\n                    dataSource={companies}\r\n                    renderItem={comp => <div onClick={() => setChosen(comp.company_tin)} \r\n                    className=\"company-card\">\r\n                        <div className=\"company-name\">\r\n                            {comp.company_name}\r\n                        </div>\r\n\r\n                        <div className=\"company-text\">\r\n                            <span\r\n                                className=\"company-tin\"\r\n                                style={{ margin: 0, padding: 0 }}\r\n                            >{comp.company_tin}</span>\r\n                            <div>{t(\"STIR\")}</div>\r\n                        </div>\r\n\r\n                    </div>}\r\n                />\r\n                        \r\n                \r\n               \r\n                \r\n            </div>\r\n\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nconst mapDispatchToProps = dispatch=>({\r\n    setUserComps: data => dispatch(setUserCompanies(data)),\r\n    setCurrentUser: data => dispatch(setUser(data)),\r\n})\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectKeyUser,\r\n    companies: selectUserCompanies\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ChooseCompany));","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\frontend\\home\\home.component.jsx",["447","448","449"],"import React, { useState } from 'react';\r\nimport Header from '../../components/header/header.component';\r\n\r\nconst Home = ({})=>{\r\n\r\n    \r\n\r\n    return<div>\r\n        <div>\r\n            {/* <Header /> */}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Home;","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\admin\\notification\\form.component.jsx",["450"],"import { Col, Form, Input, Row, Select, Button, Switch, message } from 'antd'\r\nimport TextArea from 'antd/lib/input/TextArea';\r\nimport axios from 'axios';\r\nimport React, { useState, useEffect } from 'react'\r\n\r\nconst { Option } = Select;\r\n\r\nconst NotificationForm = ({ match }) => {\r\n\r\n    const [form] = Form.useForm();\r\n    const [loading, setLoading] = useState(false);\r\n    const { notificationId } = match.params;\r\n    \r\n    useEffect(()=>{\r\n        if(notificationId){\r\n            axios({\r\n                url:\"api/v1/notifications/\"+notificationId,\r\n                method: \"get\"\r\n            })\r\n            .then(res=>{\r\n                form.setFieldsValue(res.data)\r\n            })\r\n            .catch(err=>{\r\n                console.log(err)\r\n            })\r\n        }\r\n    },[])\r\n    \r\n    const handleSubmit = values => {\r\n\r\n        setLoading(true)\r\n        axios({\r\n            method:  notificationId ? \"patch\" : \"post\",\r\n            data: values,\r\n            url: notificationId ? \"/api/v1/notifications/\"+notificationId  : \"/api/v1/notifications\" \r\n        }).then(res=>{\r\n            if(res.data.ok){\r\n                message.success(\"Notification saqlandi!\");\r\n            }else{\r\n                message.error(\"Notification saqlashda xatolik!\");\r\n            }\r\n            setLoading(false);\r\n        }).catch(err=>{\r\n            console.log(err)\r\n            message.error(\"Notification saqalashda xatolik!\");\r\n            setLoading(false);\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <div style={{marginTop: 20}}>\r\n            <Form\r\n                form={form}\r\n                onFinish={handleSubmit}\r\n                scrollToFirstError\r\n            >\r\n                <div className=\"factura-data-sheet-container\">\r\n                <h3>Notification yaratish</h3>\r\n                <Row justify=\"space-between\">\r\n                    <Col md={11}>\r\n                        <Form.Item>\r\n                            <Form.Item\r\n                                rules={[{ required: true }]}\r\n                                key=\"dyna-form-facutura-no\"\r\n                                name=\"title_uz\">\r\n                                <Input\r\n                                    size=\"large\"\r\n                                    />\r\n                            </Form.Item>\r\n                            <span className=\"custom-input-label-1\">Notification sarlavhasi (uz)</span>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Form.Item\r\n                                rules={[{ required: true }]}\r\n                                key=\"dyna-form-facutura-no\"\r\n                                name=\"title_ru\">\r\n                                <Input\r\n                                    size=\"large\"\r\n                                    />\r\n                            </Form.Item>\r\n                            <span className=\"custom-input-label-1\">Notification sarlavhasi (ru)</span>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Form.Item\r\n                                rules={[{ required: true }]}\r\n                                key=\"dyna-form-facutura-no\"\r\n                                name=\"title_en\">\r\n                                <Input\r\n                                    size=\"large\"\r\n                                    />\r\n                            </Form.Item>\r\n                            <span className=\"custom-input-label-1\">Notification sarlavhasi (en)</span>\r\n                        </Form.Item>\r\n                        \r\n                        <Form.Item>\r\n                            <Form.Item\r\n                                rules={[{ required: true }]}\r\n                                key=\"dyna-form-facutura-no\"\r\n                                name=\"importance\">\r\n                                <Select\r\n                                    bordered={false}\r\n                                    size=\"large\"\r\n                                    name=\"importance\"\r\n                                    defaultActiveFirstOption\r\n                                >\r\n                                    <Option value={1}>1 - Uncha muxim emas</Option>\r\n                                    <Option value={2}>2 - Muxim emas</Option>\r\n                                    <Option value={3}>3 - Muxim</Option>\r\n                                    <Option value={4}>4 - Muximroq</Option>\r\n                                    <Option value={5}>5 - O'ta muxim</Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n                            <span className=\"custom-input-label-1\">Notification muximligi</span>\r\n                        </Form.Item>\r\n                        <Row justify=\"space-between\">\r\n                            <Col md={11}>\r\n                                <Form.Item\r\n                                    label=\"Holati\"\r\n                                    name=\"isActive\"\r\n                                    valuePropName=\"checked\"\r\n                                    rules={[{ required: true }]}\r\n                                >\r\n                                    <Switch />\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col md={11}>\r\n                                <Form.Item>\r\n                                    <Button \r\n                                        loading={loading}\r\n                                        style={{width: '100%'}}\r\n                                        size=\"large\" \r\n                                        htmlType=\"submit\"\r\n                                        className=\"factra-action-btns save-btn\"\r\n                                        >Saqlash</Button>\r\n                                </Form.Item>\r\n                            </Col>\r\n                        </Row>\r\n                        \r\n                    </Col>\r\n                    <Col md={12}>\r\n                        <Form.Item\r\n                            name=\"body_uz\"\r\n                            \r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextArea \r\n                                placeholder=\"Body uz\"\r\n                                rows={4} size=\"large\" />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                        \r\n                            name=\"body_ru\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextArea rows={4} \r\n                                placeholder=\"Body ru\"\r\n                                size=\"large\" />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"body_en\"\r\n                            \r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextArea \r\n                                placeholder=\"Body en\"\r\n                                rows={4} size=\"large\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                </div>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotificationForm\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\admin-card\\admin-card.component.jsx",["451","452","453"],"import React from 'react';\r\nimport './admin-card.style.scss';\r\nimport { Badge, Card } from 'antd';\r\nimport {PlusCircleTwoTone} from '@ant-design/icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst AdminCard = ({ data })=>{\r\n    const {title, icon, color, count} = data\r\n    return(\r\n    <Card className=\"admin-card-container\" >\r\n        <div className={`admin-card-icon-field admin-card-${color}`} ><FontAwesomeIcon icon={icon} className=\"admin-card-icon\"/></div>\r\n        <div className=\"admin-card-title\">{title}</div>\r\n        <div className=\"admin-card-content\">{count}</div>\r\n        \r\n    </Card>\r\n)}\r\n\r\nexport default AdminCard;","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\factura\\create\\create-excel-type.component.jsx",["454","455","456","457","458"],"import React, { useState, useEffect } from 'react'\r\nimport Datasheet from 'react-datasheet';\r\nimport SelectMeasureEditor from '../../../components/data-sheet-custom-measure-selector/custom-selector.component';\r\nimport SelectEditor from '../../../components/data-sheet-custom-selector/custom-selector.component';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ProductValueRendered } from './product-grid.component';\r\nimport GridDateTime from '../../../components/grid-datetime/grid-datetime.component';\r\nimport GridDocTypeSelect from '../../../components/grid-doctype-select/grid-doctype-select.component';\r\nimport GridSingleSidedTyle from '../../../components/grid-singlesidedtype-select.component/grid-singlesidedtype-select.component';\r\nimport GridUserFetcher from '../../../components/grid-user-fetcher-input/grid-user-fetcher-input.component';\r\nimport { FetchUser } from '../../../utils/utils';\r\n\r\nconst BoldRendered = prop =>{\r\n\r\n    const {value} = prop;\r\n\r\n    return <div style={{textAlign: 'left', fontWeight: 'bold', color: 'black', paddingLeft: 5}}>{value}</div>\r\n}\r\nconst SingleSidedFacturaViewer = prop=>{\r\n\r\n    const { value } = prop;\r\n\r\n    const SINGLE_SIDEDs={\r\n        1: \"На физ. лицо\",\r\n        2:\"На экспорт\",\r\n        3:\"На импорт\",\r\n        4:\"Реализация, связанная с гос. секретом\",\r\n        5:\"Финансовые услуги\"\r\n    }\r\n\r\n    return <div>{SINGLE_SIDEDs[value]}</div>\r\n}\r\nconst DocTypeValueViewer = prop=>{\r\n    const { value } = prop;\r\n\r\n    const FACTURA_TYPES = {\r\n        0: \"STANDARD\",\r\n        1: \"QOSHIMCHA\",\r\n        2: \"HARAJATLARNI QOPLASH\",\r\n        3: \"TOLOVSIZ\",\r\n        4: \"TUZATUVCHI\",\r\n    }\r\n\r\n    return <div>{FACTURA_TYPES[value]}</div>\r\n}\r\nconst CreateExcelType = () => {\r\n    const { t } = useTranslation();\r\n    //const [fullView, toglleFullView] = useState(false)\r\n    const [grid, setGrid] = useState([\r\n        [\r\n            { readOnly: true, value: '', width: 50 },\r\n            { value: t('Tovar/xizmat nomi'), readOnly: true, width: 200 },\r\n            { value: t('Tovar/xizmatlar yagona elektron milliy katalog identifikatsiya kodi'), readOnly: true, width: 150 },\r\n            { value: t('Tovar/xizmat shtrix kodi'), readOnly: true, width: 100 },\r\n            { value: t(\"O'lchov birligi\"), readOnly: true, width: 100 },\r\n            { value: t(\"Miqdori\"), readOnly: true, width: 100 },\r\n            { value: t(\"Narxi\"), readOnly: true, width: 100 },\r\n            { value: t(\"Aksiz soliq (%)\"), readOnly: true, width: 100 },\r\n            { value: t(\"Aksiz soliq, miqdori\"), readOnly: true, width: 100 },\r\n            { value: t(\"Yetkazib berish narxi\"), readOnly: true, width: 100 },\r\n            { value: t(\"QQS (%)\"), readOnly: true, width: 100 },\r\n            { value: t(\"QQS, miqdori\"), readOnly: true, width: 100 },\r\n            { value: t(\"Umumiy summa\"), readOnly: true, width: 150 },\r\n        ],\r\n        [\r\n            { readOnly: true, value: 1 },                           //0 ordNo\r\n            { value: \"\" },                                          //1 product name\r\n            { value: \"\", dataEditor: SelectEditor, valueViewer: ProductValueRendered },                //2 catalogCode\r\n            { value: \"\" },                                          //3 shrix code\r\n            { value: \"\", dataEditor: SelectMeasureEditor },        //4 measure\r\n            { value: '' },                                          //5 amount\r\n            { value: \"\", },                                         //6 price\r\n            { value: '' },                                          //7 aksiz rate\r\n            { value: '', readOnly: true },                          //8 aksiz amount\r\n            { value: '' },                                          //9 delivery cost\r\n            { value: \"\" },                                          //10 VAT rate\r\n            { value: '', readOnly: true },                          //11 VAT amount\r\n            { value: '', readOnly: true, },                          //12 total\r\n        ]\r\n    ])\r\n\r\n    const UserRenderer = prop=>{\r\n        \r\n        const { value, col, row } = prop;\r\n        \r\n        console.log(FetchUser(value))\r\n        \r\n        return <div>{value}</div>\r\n    }\r\n\r\n    const [docGrid, setDocGrid] = useState([\r\n        [\r\n            { value: t(\"Hujjat turi\"), readOnly: true, valueViewer: BoldRendered },\r\n            { value: 0, dataEditor: GridDocTypeSelect, valueViewer: DocTypeValueViewer },\r\n            { value:\"\", valueViewer: BoldRendered, readOnly: true, width: 100, },\r\n            { value: t(\"Faktura raqami\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" }\r\n        ],\r\n        [\r\n            { value: t(\"Faktura sanasi\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\", dataEditor: GridDateTime },\r\n            { value: \"\", valueViewer: BoldRendered, readOnly: true, width: 100 },\r\n            { value: t(\"Shartnoma raqami\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" }\r\n        ],\r\n        [\r\n            { value: t(\"Shartnoma sanasi\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\", dataEditor: GridDateTime },\r\n            { value: \"\", valueViewer: BoldRendered, readOnly: true, width: 100 },\r\n            { value: \"Eski faktura ID\", valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\", valueViewer: BoldRendered }\r\n        ],\r\n        [\r\n            { value: \"Eski faktura NO\", readOnly: true, valueViewer: BoldRendered, },\r\n            { value: \"\" },\r\n            { value: \"\", readOnly: true },\r\n            { value: \"Eski faktura sanasi\", readOnly: true, valueViewer: BoldRendered, },\r\n            { value: \"\", dataEditor: GridDateTime },\r\n        ],\r\n        [\r\n            { readOnly: true, colSpan: 5, value: t(\"Tomonlar\") }\r\n        ],\r\n        [\r\n            {readOnly: true, value: \"\"},\r\n            { readOnly: true, value: \"\" },\r\n            { readOnly: true, value: \"\" },\r\n            { readOnly: true, value: \"Bir tomonli faktura\", valueViewer: BoldRendered },\r\n            { value: \"\", dataEditor: GridSingleSidedTyle, valueViewer: SingleSidedFacturaViewer}\r\n        ],\r\n        [\r\n            { valueViewer: BoldRendered, readOnly: true, colSpan: 2, value: t(\"Sizning ma'lumotlaringiz\") },\r\n            { valueViewer: BoldRendered, readOnly: true, width: 100, value: \"\" },\r\n            { valueViewer: BoldRendered, readOnly: true, colSpan: 2, value: t(\"Kontragent ma'lumotlari\") }\r\n        ],\r\n        [\r\n            { value: t(\"STIR\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\", valueViewer: UserRenderer},\r\n            { value: \"\", valueViewer: BoldRendered, readOnly: true, width: 100 },\r\n            { value: t(\"STIR\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" }\r\n        ],\r\n        [\r\n            { value: t(\"Nomi\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" },\r\n            { value: \"\", valueViewer: BoldRendered, readOnly: true, width: 100 },\r\n            { value: t(\"Nomi\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" }\r\n        ],\r\n        [\r\n            { value: t(\"QQS tolovchi registratsiya raqami\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" },\r\n            { value: \"\", valueViewer: BoldRendered, readOnly: true, width: 100 },\r\n            { value: t(\"QQS tolovchi registratsiya raqami\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" }\r\n        ],\r\n        [\r\n            { value: t(\"Hisob raqami\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" },\r\n            { value: \"\", valueViewer: BoldRendered, readOnly: true, width: 100 },\r\n            { value: t(\"Hisob raqami\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" }\r\n        ],\r\n        [\r\n            { value: t(\"MFO\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" },\r\n            { value: \"\", valueViewer: BoldRendered, readOnly: true, width: 100 },\r\n            { value: t(\"MFO\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" }\r\n        ],\r\n        [\r\n            { value: t(\"Manzil\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" },\r\n            { value: \"\", valueViewer: BoldRendered, readOnly: true, width: 100 },\r\n            { value: t(\"Manzil\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" }\r\n        ],\r\n        [\r\n            { value: t(\"Direktor\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" },\r\n            { value: \"\", valueViewer: BoldRendered, readOnly: true, width: 100 },\r\n            { value: t(\"Direktor\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" }\r\n        ],\r\n        [\r\n            { value: t(\"Bosh hisobchi\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" },\r\n            { value: \"\", valueViewer: BoldRendered, readOnly: true, width: 100 },\r\n            { value: t(\"Bosh hisobchi\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" }\r\n        ],\r\n        [\r\n            {value: \"Ishonchnoma\", colSpan: 5, readOnly: true}\r\n        ],\r\n        [\r\n            { value: t(\"Ishonchnoma raqami\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" },\r\n            { value: \"\", valueViewer: BoldRendered, readOnly: true, width: 100 },\r\n            { value: t(\"Ishonchnoma sanasi\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\", dataEditor: GridDateTime }\r\n        ],\r\n        [\r\n            { value: t(\"STIR\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" },\r\n            { value: \"\", valueViewer: BoldRendered, readOnly: true, width: 100 },\r\n            { value: t(\"Ma'sul shaxs FIO\"), valueViewer: BoldRendered, readOnly: true },\r\n            { value: \"\" }\r\n        ],\r\n        \r\n    ])\r\n    const valueRenderer = cell => cell.value;\r\n    const onDocCellsChanged = change=>{\r\n        change.forEach(({ cell, row, col, value }, index) => {\r\n            //this sets changed values\r\n            docGrid[row][col] = { ...docGrid[row][col], value };\r\n            \r\n        })\r\n        setDocGrid([...docGrid])\r\n    }\r\n    const onCellsChanged = changes => {\r\n        changes.forEach(({ cell, row, col, value }, index) => {\r\n            //this sets changed values\r\n            grid[row][col] = { ...grid[row][col], value };\r\n\r\n            //Lets calculate\r\n            let priceamount = parseFloat(grid[row][5].value) * parseFloat(grid[row][6].value);\r\n            let aksizamount = parseFloat(priceamount * grid[row][7].value / 100);\r\n\r\n            grid[row][8] = { value: isNaN(aksizamount) ? 0 : parseFloat(aksizamount), readOnly: true };\r\n\r\n            let vatamout = parseFloat(priceamount * parseFloat(grid[row][10].value) / 100);\r\n\r\n            grid[row][11] = { value: isNaN(vatamout) ? 0 : vatamout, readOnly: true }\r\n\r\n            let total = !isNaN(priceamount) ? priceamount : 0\r\n            isNaN(aksizamount) ? total = total : total += aksizamount;\r\n            isNaN(vatamout) ? total = total + 0 : total += vatamout;\r\n            isNaN(grid[row][9].value) ? total = total + 0 : total += +grid[row][9].value\r\n\r\n            grid[row][12] = { value: total, readOnly: true }\r\n\r\n\r\n        });\r\n        setGrid([...grid]);\r\n\r\n        grid.shift()\r\n\r\n        //getProducts(grid)\r\n\r\n    };\r\n\r\n    const onContextMenu = (e, cell, i, j) =>\r\n        cell.readOnly ? e.preventDefault() : null;\r\n    return (\r\n        <div>\r\n            <div className=\"factura-data-sheet-container\" style={{ margin: 15 }}>\r\n                <Datasheet\r\n                    data={docGrid}\r\n                    valueRenderer={valueRenderer}\r\n                    onContextMenu={onContextMenu}\r\n                    onCellsChanged={ onDocCellsChanged }\r\n                />\r\n            </div>\r\n            <div className=\"factura-data-sheet-container\" style={{ margin: 15, overflowX: 'auto' }}>\r\n                <Datasheet\r\n                    data={grid}\r\n                    valueRenderer={valueRenderer}\r\n                    onContextMenu={onContextMenu}\r\n                    onCellsChanged={onCellsChanged}\r\n                />\r\n\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default CreateExcelType\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\factura\\create\\create.component.jsx",["459","460","461","462","463","464"],"import React, { useState, useEffect } from 'react';\r\nimport 'react-datasheet/lib/react-datasheet.css';\r\nimport { Button, Input, Form, Row, Col, DatePicker, Select, message } from 'antd';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport './create.style.scss';\r\nimport axios from 'axios';\r\nimport BuyerForm from '../../common/buyer-form.component';\r\nimport SellerForm from '../../common/seller-form.component';\r\nimport { connect } from 'react-redux';\r\nimport { selectCurrentUser, selectLoadedKey, selectToken } from '../../../redux/user/user.selector';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport moment from 'moment';\r\nimport PersonFetch from '../../common/person-fetch/person-fetch.component';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport FacturaProductGrid from './product-grid.component';\r\nimport { ConvertGridToProduct, ConvertProductToGrid } from '../../models/FacturaProduct';\r\nimport { FacturaDataToForm, GetFacturaDataToSign } from '../../models/Factura';\r\nimport { EIMZOClient } from '../../../utils/e-imzo';\r\nimport { setLoadedKeyId } from '../../../redux/user/user.action';\r\nimport { saveFacturaDraft } from '../../../redux/factura-draft/factura-draft.action';\r\nimport { selectDrafts } from '../../../redux/factura-draft/factura-draft.selector';\r\n\r\nconst { Option } = Select;\r\n\r\nconst FacturaCreateForm = ({ match, user, loadedKey, setTimer, setDraftFactura, drafts }) => {\r\n\r\n  const { t, i18n } = useTranslation();\r\n  const [form] = Form.useForm();\r\n  const { facturaId, duplicateId } = match.params;\r\n  const [newFacturaId, setNewFacturaId]=useState(facturaId);\r\n  const [initialData, setInitialData] = useState({ facturaType: 0 })\r\n  const [facturaType, setFacturaType] = useState();\r\n  const [saveLoading, setSaveLoading] = useState(false);\r\n  const [products, setProducts] = useState();\r\n  const [gridInitialValue, setGridInitialValue] = useState();\r\n\r\n  const setNewDocId = ()=>{\r\n    axios({\r\n      url: \"info/get-guid\",\r\n      method: \"get\"\r\n    }).then(res => {\r\n      if (res.data.success) {\r\n        setNewFacturaId(res.data.data)\r\n      }\r\n    }).catch(ex => {\r\n      console.log(ex)\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (facturaId || duplicateId) {\r\n      //fetch fatura data\r\n      setNewFacturaId(facturaId)\r\n      axios({\r\n        url: `facturas/view?FacturaId=${facturaId??duplicateId}&tin=${user.tin??user.username}`,\r\n        method: \"GET\",\r\n      }).then(res => {\r\n        let data = FacturaDataToForm(res.data.data[0]);\r\n        console.log(\"data\",(res.data.data[0]))\r\n        data.contractDate = moment(data.contractDate);\r\n        data.created_at = moment(data.created_at);\r\n        data.facturaDate = moment(data.facturaDate);\r\n        data.empowermentDateOfIssue = moment(data.empowermentDateOfIssue);\r\n        data.oldFacturaDate = moment(data.oldFacturaDate);\r\n        data.updated_at = moment(data.updated_at);\r\n        console.log(\"dat\",data);\r\n\r\n        setInitialData(data);\r\n        console.log(res.data.data[0]?.ProductList.Products);\r\n        setProducts(res.data.data[0]?.ProductList)\r\n        \r\n        if(duplicateId){\r\n          setNewDocId()\r\n        }\r\n        \r\n        setGridInitialValue(ConvertProductToGrid(res.data.data[0]?.ProductList.Products))\r\n        form.resetFields();\r\n      }).catch(err => {\r\n        console.log(err);\r\n      })\r\n      //end fetch factura data;\r\n    }else{\r\n      setNewDocId();\r\n    }\r\n    \r\n  }, [])\r\n\r\n\r\n  const validateMessages = {\r\n    required: t('Bu maydon majburiy!'),\r\n    types: {\r\n      email: '${label} is not a valid email!',\r\n      number: '${label} is not a valid number!',\r\n    },\r\n    number: {\r\n      range: '${label} must be between ${min} and ${max}',\r\n    },\r\n\r\n  };\r\n\r\n  const FACTURA_TYPES = {\r\n    \"STANDARD\": 0,\r\n    \"QOSHIMCHA\": 1,\r\n    \"HARAJATLARNI QOPLASH\": 2,\r\n    \"TOLOVSIZ\": 3,\r\n    \"TUZATUVCHI\": 4\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  //#region data-sheet methods\r\n\r\n  const getProducts = data=>{\r\n\r\n    setProducts(ConvertGridToProduct(data, user.tin ?? user.username, newFacturaId))\r\n    //setGridInitialValue(data)\r\n    let formValues = form.getFieldsValue();\r\n    console.log(\"trigger set draft\");\r\n    // setDraftFactura(\r\n    //   GetFacturaDataToSign((\r\n    //     formValues, \r\n    //     ConvertGridToProduct(data, user.tin ?? user.username, newFacturaId), \r\n    //     newFacturaId)), \r\n    // newFacturaId)\r\n    \r\n  }\r\n  //#endregion\r\n\r\n  //#region form methods\r\n\r\n  const handleSign = ()=>{\r\n    setSaveLoading(true)\r\n    let values = form.getFieldsValue()\r\n    console.log(JSON.stringify(GetFacturaDataToSign(values, products, newFacturaId)));\r\n    EIMZOClient.createPkcs7(\r\n      loadedKey.id, \r\n      JSON.stringify(GetFacturaDataToSign(values, products, newFacturaId)),\r\n      null,\r\n      pkcs7=>{\r\n        console.log(JSON.stringify(GetFacturaDataToSign(values, products, newFacturaId)))\r\n        console.log(pkcs7)\r\n        axios({\r\n          url: `facturas/send?tin=${user.tin??user.username}`,\r\n          method: 'post',\r\n          data: {\r\n            Sign: pkcs7\r\n          }\r\n        })\r\n        .then(res=>{\r\n\r\n          if(res.data.success){\r\n            message.success(t(\"Faktura muaffaqiyatli imzolandi!\"))\r\n            setTimer({ id: loadedKey.id, time: Date.now() })\r\n            if(!facturaId){\r\n              handleSubmit(values)\r\n            }\r\n          }\r\n          else{\r\n            message.error(t(\"Faktura imzolashda xatolik!\"))\r\n          }\r\n\r\n          setSaveLoading(false)\r\n        })\r\n        .catch(ex=>{\r\n          console.log(ex)\r\n          message.error(t(\"Faktura imzolashda xatolik!\"))\r\n          setSaveLoading(false)\r\n        })\r\n      },\r\n      (e,r)=>{\r\n        console.log(\"e\", e, \"r\", r)\r\n        setSaveLoading(false)\r\n      }\r\n      )\r\n      \r\n    \r\n  }\r\n\r\n  const handleSubmit = (values) => {\r\n    setSaveLoading(true);\r\n\r\n    if (facturaId) {\r\n      //console.log(JSON.stringify(GetFacturaDataToSign(values, products, facturaId)))\r\n      axios({\r\n        url: `facturas/update?id=${facturaId}&tin=${user.tin??user.username}`,\r\n        method: 'post',\r\n        data: GetFacturaDataToSign(values, products, facturaId)\r\n      }).then(res => {\r\n        if (res.data.success) {\r\n          message.success(t(\"Faktura o'zgartirildi!\"))\r\n        } else {\r\n          message.error(t(\"Faktura o'zgartirishda xatolik!\"));\r\n        }\r\n        console.log(res)\r\n        setSaveLoading(false);\r\n      }).catch(err => {\r\n        message.error(t(\"Faktura o'zgartirishda xatolik!\"));\r\n        console.log(err)\r\n        setSaveLoading(false);\r\n      })\r\n    } else {\r\n\r\n      console.log(\"fact\",JSON.stringify(GetFacturaDataToSign(values, products, newFacturaId)))\r\n\r\n      axios({\r\n        url: 'facturas/create',\r\n        method: 'post',\r\n        data: GetFacturaDataToSign(values, products, newFacturaId)\r\n      }).then(res => {\r\n        if (res.data.success) {\r\n          message.success(t(\"Faktura yaratili!\"))\r\n        }\r\n        else {\r\n          message.error(t(\"Faktura yaratishda xatolik!\"));\r\n        }\r\n        console.log(res)\r\n        setSaveLoading(false);\r\n      }).catch(err => {\r\n        console.log(err)\r\n        message.error(t(\"Faktura yaratishda xatolik!\"));\r\n        setSaveLoading(false);\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  const handleSaveDraft = (formValues, products)=>{\r\n    //setDraftFactura(GetFacturaDataToSign((formValues, products, newFacturaId)), newFacturaId)\r\n  }\r\n\r\n  //#endregion\r\n\r\n  // var draftComponents = [];\r\n  // for (var i in drafts) {\r\n  //   console.log(\"draft-\"+i, drafts[i]);\r\n  //   draftComponents.push(i)\r\n  // }\r\n\r\n  return (\r\n    <div style={{ padding: 15 }}>\r\n      \r\n      <Form\r\n        onValuesChange={(value, values)=>handleSaveDraft(values, products, newFacturaId)}\r\n        initialValues={initialData}\r\n        form={form}\r\n        name=\"factura\"\r\n        onFinish={handleSubmit}\r\n        scrollToFirstError\r\n        validateMessages={validateMessages}\r\n      >\r\n\r\n        <div className=\"factura-data-sheet-container\">\r\n          <h3>{t(\"Hujjat turi\")}</h3>\r\n          <Row justify=\"space-between\">\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  key=\"dyna-form-facutura-no\"\r\n                  name=\"facturaType\"\r\n                >\r\n                  <Select\r\n                    onChange={setFacturaType}\r\n                    bordered={false}\r\n                    size=\"large\"\r\n                    placeholder=\"Faktura turi\">\r\n                    <Option value={FACTURA_TYPES[\"STANDARD\"]}>{t(\"Standard\")}</Option>\r\n                    <Option value={FACTURA_TYPES[\"QOSHIMCHA\"]}>{t(\"Qo'shimcha\")}</Option>\r\n                    <Option value={FACTURA_TYPES[\"HARAJATLARNI QOPLASH\"]}>{t(\"Harajatni qoplash\")}</Option>\r\n                    <Option value={FACTURA_TYPES[\"TOLOVSIZ\"]}>{t(\"To'lovsiz\")}</Option>\r\n                    <Option value={FACTURA_TYPES[\"TUZATUVCHI\"]}>{t(\"Tuzatuvchi\")}</Option>\r\n                  </Select>\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">{t(\"Faktura turi\")}</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={facturaType === FACTURA_TYPES[\"QOSHIMCHA\"] || facturaType === FACTURA_TYPES[\"TUZATUVCHI\"] ? 11 : 0}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  key=\"dyna-form-facutura-no-old\"\r\n                  name=\"oldFacturaId\">\r\n                  <Input\r\n                    rules={[{ required: true }]}\r\n                    size=\"large\"\r\n                    placeholder=\"Eski faktura ID\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">{t(\"Eski faktura ID\")}</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={facturaType === FACTURA_TYPES[\"QOSHIMCHA\"] || facturaType === FACTURA_TYPES[\"TUZATUVCHI\"] ? 11 : 0}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  key=\"dyna-form-facutura-no-old\"\r\n                  name=\"oldFacturaNo\">\r\n                  <Input\r\n                    rules={[{ required: true }]}\r\n                    size=\"large\"\r\n                    placeholder=\"Eski faktura No\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">{t(\"Eski faktura No\")}</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={facturaType === FACTURA_TYPES[\"QOSHIMCHA\"] || facturaType === FACTURA_TYPES[\"TUZATUVCHI\"] ? 11 : 0}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  key=\"dyna-form-facutura-no-old\"\r\n                  name=\"oldFacturaDate\">\r\n                  <DatePicker\r\n                    rules={[{ required: true }]}\r\n                    size=\"large\"\r\n                    placeholder=\"Eski faktura Sanasi\" />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">{t(\"Eski faktura Sanasi\")}</span>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row justify=\"space-between\">\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  rules={[{ required: true }]}\r\n                  key=\"dyna-form-facutura-no\"\r\n                  name=\"facturaNo\">\r\n                  <Input\r\n                    size=\"large\"\r\n                    placeholder={t(\"Faktura raqami\")} />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">{t(\"Faktura raqami\")}</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  key=\"dyna-form-item-inn-date\"\r\n                  name=\"facturaDate\"\r\n                  rules={[{ required: true }]}>\r\n                  <DatePicker\r\n                    size=\"large\"\r\n                    placeholder={t(\"Faktura sanasi\")} />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">{t(\"Faktura sanasi\")}</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  rules={[{ required: true }]}\r\n                  key=\"dyna-form-item-contract-n0\"\r\n                  name=\"contractNo\">\r\n                  <Input\r\n                    size=\"large\"\r\n                    placeholder={t(\"Shartnoma raqami\")} />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">{t(\"Shartnoma raqami\")}</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={11}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  rules={[{ required: true }]}\r\n                  key=\"dyna-form-item-contract-date\"\r\n                  name=\"contractDate\">\r\n                  <DatePicker\r\n                    size=\"large\"\r\n                    placeholder={t(\"Shartnoma sanasi\")} />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">{t(\"Shartnoma sanasi\")}</span>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n\r\n        <div className=\"factura-data-sheet-container\">\r\n\r\n          <Row justify=\"space-between\">\r\n            <Col md={11}>\r\n              <SellerForm form={form} />\r\n            </Col>\r\n\r\n            <Col md={11}>\r\n              <BuyerForm form={form} docType=\"factura\" />\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n        <FacturaProductGrid initialValues={ gridInitialValue } getProducts={getProducts} form={form} />\r\n\r\n        <div className=\"factura-data-sheet-container\">\r\n\r\n          <Row justify=\"space-between\">\r\n            <Col md={5} >\r\n              <Form.Item>\r\n                <Form.Item\r\n                  key=\"empowerment-no\"\r\n                  name=\"empowermentNo\">\r\n                  <Input\r\n                    size=\"large\"\r\n                    placeholder={t(\"Ishonchnoma raqami\")} />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">{t(\"Ishonchnoma raqami\")}</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={5}>\r\n              <Form.Item>\r\n                <Form.Item\r\n                  key=\"seler-account-empowerment-dateof-issue\"\r\n                  name=\"empowermentDateOfIssue\">\r\n                  <DatePicker\r\n                    size=\"large\"\r\n                    placeholder={t(\"Ishonchnoma sanasi\")} />\r\n                </Form.Item>\r\n                <span className=\"custom-input-label-1\">{t(\"Ishonchnoma sanasi\")}</span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={12}>\r\n              <PersonFetch\r\n                pName=\"agentFio\"\r\n                pTin=\"agentTin\"\r\n                nameLabel={t(\"Ma'sul shaxs FIO\")}\r\n                tinLabel={t(\"STIR\")}\r\n                tinCol={11}\r\n                nameCol={11}\r\n                form={form}\r\n              />\r\n            </Col>\r\n\r\n          </Row>\r\n\r\n        </div>\r\n        <div className=\"factura-data-sheet-container\">\r\n          <Row justify=\"space-around\">\r\n            <Col >\r\n              <Button\r\n                loading={saveLoading}\r\n                primary\r\n                htmlType=\"submit\"\r\n                className=\"factra-action-btns save-btn\"\r\n                size=\"large\"\r\n                icon={<FontAwesomeIcon icon=\"save\" className=\"factura-action-btn-icons\" />}>\r\n                {t(\"Saqlash\")}\r\n              </Button>\r\n            </Col>\r\n            <Col>\r\n              <Button\r\n                loading={saveLoading}\r\n                className=\"factra-action-btns sing-btn\"\r\n                size=\"large\"\r\n                onClick={handleSign}\r\n                icon={<FontAwesomeIcon icon=\"signature\" className=\"factura-action-btn-icons\" />}>\r\n                {t(\"Imzolash\")}\r\n              </Button>\r\n            </Col>\r\n            <Col>\r\n              <Button\r\n                icon={<FontAwesomeIcon icon=\"ban\" className=\"factura-action-btn-icons\" />}\r\n                danger\r\n                className=\"factra-action-btns\"\r\n                size=\"large\">\r\n                {t(\"Bekor qilish\")}\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n        \r\n\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch=>({\r\n  setTimer: data=>dispatch(setLoadedKeyId(data)),\r\n  setDraftFactura: (values, id) => dispatch(saveFacturaDraft(values, id))\r\n})\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  token: selectToken,\r\n  user: selectCurrentUser,\r\n  loadedKey: selectLoadedKey,\r\n  drafts: selectDrafts\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FacturaCreateForm);","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\aferta-popup\\aferta-popup.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\bindrouming-popup\\bindrouming-popup.component.jsx",["465","466"],"import { Modal, Spin, Checkbox, message } from 'antd'\r\nimport axios from 'axios';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useTranslation } from 'react-i18next';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { PROVIDER } from '../../env';\r\nimport { logOut } from '../../redux/user/user.action';\r\nimport { selectCurrentUser, selectLoadedKey } from '../../redux/user/user.selector';\r\nimport { EIMZOClient } from '../../utils/e-imzo';\r\n\r\nconst BindRoumingPopup = ({ user, signOut, loadedKey }) => {\r\n\r\n    const { t } = useTranslation()\r\n\r\n    const [isOpen, setIsOpen] = useState(!user?.is_online);\r\n    const [okDisable, setOkDisable] = useState(true)\r\n    const [afertaText, setAfertaText] = useState();\r\n\r\n    useEffect(() => {\r\n        axios({\r\n            url: `info/get-bind-provider?tin=${user.tin ?? user.username}`,\r\n            method: \"get\"\r\n        }).then(res => {\r\n            \r\n            setAfertaText(JSON.stringify({\r\n                providers: [...res.data.providers, PROVIDER] \r\n            }))\r\n            \r\n        }).catch(ex => {\r\n            console.log(ex);\r\n        })\r\n    }, [])\r\n\r\n    const handleOk = () => {\r\n        setIsOpen(false)\r\n        EIMZOClient.createPkcs7(\r\n            loadedKey.id,\r\n            afertaText,\r\n            null,\r\n            pkcs7 => {\r\n\r\n                axios({\r\n                    url: 'user/bind-provider',\r\n                    method: \"post\",\r\n                    data: {\r\n                        tin: user.tin ?? user.username,\r\n                        sign: pkcs7\r\n                    }\r\n                }).then(res => {\r\n                    console.log(res)\r\n                }).catch(ex => {\r\n                    console.log(ex);\r\n                })\r\n            },\r\n            (e, r) => {\r\n                message(r);\r\n            },\r\n            (e, r) => {\r\n                message(r);\r\n            },\r\n        )\r\n    }\r\n    const handleCancel = () => {\r\n        setIsOpen(false);\r\n        //signOut()\r\n    }\r\n\r\n    const handleAgree = e => {\r\n        //console.log(data)\r\n        if (e.target.checked) {\r\n            setOkDisable(false)\r\n        } else {\r\n            setOkDisable(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n                keyboard={false}\r\n                closable={false}\r\n                onCancel={handleCancel}\r\n                onOk={handleOk}\r\n                visible={isOpen}\r\n                okButtonProps={{ disabled: okDisable }}\r\n                zIndex={999}\r\n                title={t(\"Roumingga operatori sifatida qo'shing?\")}\r\n                maskClosable={false}\r\n            >\r\n                <div style={{ top: 0, width: '100%', bottom: 20, height: '40vh'}}>\r\n                    {t(\"Bini rouming operatoringiz sifatida ornating.\")}\r\n                </div>\r\n\r\n                <br />\r\n\r\n                <Checkbox onChange={handleAgree} /><span style={{ marginLeft: 20 }}>{t(\"Roziman.\")}</span>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectCurrentUser,\r\n    loadedKey: selectLoadedKey\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    signOut: () => dispatch(logOut())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BindRoumingPopup)\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\factura\\view\\view.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\factura-draft\\factura-draft.action.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\redux\\factura-draft\\factura-draft.selector.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\cabinet\\models\\Factura.js",["467","468","469","470","471"],"export default class Factura {\r\n    \"Version\"= 1;\r\n    \"FacturaType\"= null;\r\n    \"SingleSidedType\"= null;\r\n    \"HasMarking\"= true;\r\n    \"AgreeToFine\"= false;\r\n    \"FacturaId\"= \"\";\r\n    \"FacturaDoc\"= {\r\n        \"FacturaNo\": null,\r\n        \"FacturaDate\": null\r\n    }\r\n    \"OldFacturaDoc\"= {\r\n        \"OldFacturaId\": null,\r\n        \"OldFacturaNo\": null,\r\n        \"OldFacturaDate\": null\r\n    }\r\n    \"ContractDoc\"= {\r\n        \"ContractNo\": null,\r\n        \"ContractDate\": null\r\n    }\r\n    \"FacturaEmpowermentDoc\"= {\r\n        \"AgentFacturaId\": null,\r\n        \"EmpowermentNo\": null,\r\n        \"EmpowermentDateOfIssue\": null,\r\n        \"AgentFio\": null,\r\n        \"AgentTin\": null,\r\n        \"AgentPinfl\": null\r\n    }\r\n    \"ItemReleasedDoc\"= {\r\n        \"ItemReleasedTin\": null,\r\n        \"ItemReleasedFio\": null,\r\n        \"ItemReleasedPinfl\": null\r\n    }\r\n    \"SellerTin\"= null;\r\n    \"BuyerTin\"= null;\r\n    \"Seller\"= {\r\n        \"Name\": null,\r\n        \"Account\": null,\r\n        \"BankId\": null,\r\n        \"Address\": null,\r\n        \"Mobile\": null,\r\n        \"WorkPhone\": null,\r\n        \"Oked\": null,\r\n        \"DistrictId\": null,\r\n        \"Director\": null,\r\n        \"Accountant\": null,\r\n        \"VatRegCode\": null,\r\n        \"BranchCode\": null,\r\n        \"BranchName\": null\r\n    }\r\n    \"Buyer\"= {\r\n        \"Name\": null,\r\n        \"Account\": \"\",\r\n        \"BankId\": \"\",\r\n        \"Address\": null,\r\n        \"Mobile\": null,\r\n        \"WorkPhone\": null,\r\n        \"Oked\": \"\",\r\n        \"DistrictId\": null,\r\n        \"Director\": null,\r\n        \"Accountant\": \"\",\r\n        \"VatRegCode\": \"\",\r\n        \"BranchCode\": \"\",\r\n        \"BranchName\": \"\"\r\n    }\r\n    \"ForeignCompany\"= {\r\n        \"CountryId\": null,\r\n        \"Name\": null,\r\n        \"Address\": null,\r\n        \"Bank\": null,\r\n        \"Account\": null\r\n    }\r\n    \"ProductList\"=null\r\n}\r\n\r\nexport const GetFacturaDataToSign = (data, products, FacturaId) => {\r\n\r\n    console.log(data)\r\n    let { \r\n        agentFio,\r\n        agentTin,\r\n        buyerAccount,\r\n        buyerAccountant,\r\n        buyerAddress,\r\n        buyerDirector,\r\n        buyerMfo,\r\n        buyerName,\r\n        buyerTin,\r\n        buyerVatRegCode,\r\n        contractDate,\r\n        contractNo,\r\n        empowermentDateOfIssue,\r\n        empowermentNo,\r\n        facturaDate,\r\n        facturaNo,\r\n        facturaType,\r\n        oldFacturaId,\r\n        oldFacturaNo,\r\n        oldFacturaDate,\r\n        sellerAccount,\r\n        sellerAccountant,\r\n        sellerAddress,\r\n        sellerDirector,\r\n        sellerMfo,\r\n        sellerName,\r\n        sellerTin,\r\n        sellerVatRegCode,\r\n        singleSidedType, \r\n    } = data\r\n\r\n    let Buyer = {\r\n        \"Name\": buyerName,\r\n        \"Account\": buyerAccount,\r\n        \"BankId\": buyerMfo,\r\n        \"Address\": buyerAddress,\r\n        \"Mobile\": \"\",\r\n        \"WorkPhone\": \"\",\r\n        \"Oked\": \"\",\r\n        \"DistrictId\": \"\",\r\n        \"Director\": buyerDirector,\r\n        \"Accountant\": buyerAccountant,\r\n        \"VatRegCode\": buyerVatRegCode,\r\n        \"BranchCode\": \"\",\r\n        \"BranchName\": \"\"\r\n\r\n    }\r\n    let Seller = {\r\n        \"Name\": sellerName,\r\n        \"Account\": sellerAccount,\r\n        \"BankId\": sellerMfo,\r\n        \"Address\": sellerAddress,\r\n        \"Mobile\": \"\",\r\n        \"WorkPhone\": \"\",\r\n        \"Oked\": \"\",\r\n        \"DistrictId\": \"\",\r\n        \"Director\": sellerDirector,\r\n        \"Accountant\": sellerAccountant,\r\n        \"VatRegCode\": sellerVatRegCode,\r\n        \"BranchCode\": \"\",\r\n        \"BranchName\": \"\"\r\n    }\r\n\r\n    let f = new Factura();\r\n\r\n    f.OldFacturaDoc = {\r\n        OldFacturaDate: oldFacturaDate,\r\n        OldFacturaId: oldFacturaId,\r\n        OldFacturaNo: oldFacturaNo\r\n    }\r\n\r\n    f.SingleSidedType=singleSidedType;\r\n    f.FacturaProductId=FacturaId;\r\n    f.FacturaId=FacturaId;\r\n    f.FacturaType=facturaType\r\n    f.FacturaDoc={\r\n        FacturaDate: facturaDate,\r\n        FacturaNo: facturaNo,\r\n    }\r\n    f.Seller=Seller;\r\n    f.Buyer = Buyer;\r\n    f.BuyerTin = buyerTin;\r\n    f.SellerTin=sellerTin;\r\n\r\n    f.ContractDoc={\r\n        ContractDate: contractDate,\r\n        ContractNo: contractNo,\r\n    }\r\n    f.FacturaEmpowermentDoc={\r\n        EmpowermentDateOfIssue: empowermentDateOfIssue,\r\n        EmpowermentNo: empowermentNo,\r\n        AgentFio: agentFio,\r\n        AgentTin: agentTin,\r\n    }\r\n    f.ProductList=products;\r\n    console.log(products)\r\n    return f;\r\n}\r\n//for editing forms\r\nexport const FacturaDataToForm = data=>{\r\n    \r\n    let { \r\n        Buyer, \r\n        Seller,\r\n        ContractDoc,\r\n        FacturaDoc,\r\n        FacturaEmpowermentDoc,\r\n        FacturaId,\r\n        FacturaProductId,\r\n        ForeignCompany,\r\n        BuyerTin,\r\n        SellerTin,\r\n        ProductList,\r\n        FacturaType,\r\n        OldFacturaDoc,\r\n        SingleSidedType\r\n    } = data;\r\n\r\n    let f = {\r\n        agentFio: FacturaEmpowermentDoc.AgentFio,\r\n        agentTin: FacturaEmpowermentDoc.AgentTin,\r\n        buyerAccount: Buyer.Account,\r\n        buyerAccountant: Buyer.Accountant,\r\n        buyerAddress: Buyer.Address,\r\n        buyerDirector: Buyer.Director,\r\n        buyerMfo: Buyer.BankId,\r\n        buyerName: Buyer.Name,\r\n        buyerTin: BuyerTin,\r\n        buyerVatRegCode: Buyer.VatRegCode,\r\n        contractDate: ContractDoc.ContractDate,\r\n        contractNo: ContractDoc.ContractNo,\r\n        empowermentDateOfIssue: FacturaEmpowermentDoc.EmpowermentDateOfIssue,\r\n        empowermentNo: FacturaEmpowermentDoc.EmpowermentNo,\r\n        facturaDate: FacturaDoc.FacturaDate,\r\n        facturaNo: FacturaDoc.FacturaNo,\r\n        facturaType: FacturaType,\r\n        oldFacturaId: OldFacturaDoc.OldFacturaId,\r\n        oldFacturaNo: OldFacturaDoc.OldFacturaNo,\r\n        oldFacturaDate: OldFacturaDoc.OldFacturaDate,\r\n        sellerAccount: Seller.Account,\r\n        sellerAccountant: Seller.Accountant,\r\n        sellerAddress: Seller.Address,\r\n        sellerDirector: Seller.Director,\r\n        sellerMfo: Seller.BankId,\r\n        sellerName: Seller.Name,\r\n        sellerTin: SellerTin,\r\n        sellerVatRegCode: Seller.VatRegCode,\r\n        singleSidedType: SingleSidedType,\r\n    }\r\n\r\n    return f;\r\n\r\n}\r\n\r\n\r\n\r\nconst formProperties = [\r\n    \"agentFio\",\r\n    \"agentTin\",\r\n    \"buyerAccount\",\r\n    \"buyerAccountant\",\r\n    \"buyerAddress\",\r\n    \"buyerDirector\",\r\n    \"buyerMfo\",\r\n    \"buyerName\",\r\n    \"buyerTin\",\r\n    \"buyerVatRegCode\",\r\n    \"contractDate\",\r\n    \"contractNo\",\r\n    \"empowermentDateOfIssue\",\r\n    \"empowermentNo\",\r\n    \"facturaDate\",\r\n    \"facturaNo\",\r\n    \"facturaProductId\",\r\n    \"facturaType\",\r\n    \"oldFacturaId\",\r\n    \"oldFacturaNo\",\r\n    \"oldFacturaDate\",\r\n    \"sellerAccount\",\r\n    \"sellerAccountant\",\r\n    \"sellerAddress\",\r\n    \"sellerDirector\",\r\n    \"sellerMfo\",\r\n    \"sellerName\",\r\n    \"sellerTin\",\r\n    \"sellerVatRegCode\",\r\n    \"singleSidedType\"\r\n]\r\n\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\grid-datetime\\grid-datetime.component.jsx",["472"],"import React from 'react'\r\nimport { DatePicker } from 'antd'\r\n\r\nconst GridDateTime = ({ onCommit, onRevert }) => {\r\n\r\n    const handleChange = value=>{\r\n        onCommit(value.target.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"date\" style={{border: 'none', outline: 'none', width: '100%'}} onChange={handleChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GridDateTime\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\grid-user-fetcher-input\\grid-user-fetcher-input.component.jsx",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\grid-doctype-select\\grid-doctype-select.component.jsx",["473","474"],"import React from 'react'\r\nimport Select from \"react-select\"\r\nimport { ENTER_KEY, TAB_KEY } from 'react-datasheet/lib/keys';\r\n\r\nconst GridDocTypeSelect = ({ onCommit, onRevert }) => {\r\n\r\n    \r\n    \r\n    const optionTags = [\r\n        { value: 0, label:\"STANDARD\"},\r\n        { value: 1, label: \"QOSHIMCHA\"},\r\n        { value: 2, label: \"HARAJATLARNI QOPLASH\"},\r\n        { value: 3, label: \"TOLOVSIZ\" },\r\n        { value: 4, label: \"TUZATUVCHI\"}\r\n\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <Select\r\n                size=\"small\"\r\n                showSearch\r\n                autoFocus\r\n                dropdownClassName=\"class-codes-drop-down-list\"\r\n                style={{ width: \"100%\" }}\r\n                dropdownMatchSelectWidth={false}\r\n                open={true}\r\n                menuPortalTarget={document.body}\r\n                styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}\r\n                //value={this.state.selected}\r\n                onChange={opt=>{onCommit(opt.value)}}\r\n                //onSelect={this.handleChange}\r\n                //onInputKeyDown={handleKeyDown}\r\n                options={optionTags}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GridDocTypeSelect\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\components\\grid-singlesidedtype-select.component\\grid-singlesidedtype-select.component.jsx",["475","476"],"import React from 'react'\r\nimport Select from \"react-select\"\r\nimport { ENTER_KEY, TAB_KEY } from 'react-datasheet/lib/keys';\r\n\r\nconst GridSingleSidedTyle = ({ onCommit, onRevert }) => {\r\n\r\n\r\n\r\n    const optionTags = [\r\n        { value: 1, label: \"На физ. лицо\" },\r\n        { value: 2, label: \"На экспорт\" },\r\n        { value: 3, label: \"На импорт\" },\r\n        { value: 4, label: \"Реализация, связанная с гос. секретом\" },\r\n        { value: 5, label: \"Финансовые услуги\" }\r\n\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <Select\r\n                size=\"small\"\r\n                showSearch\r\n                autoFocus\r\n                dropdownClassName=\"class-codes-drop-down-list\"\r\n                style={{ width: \"100%\" }}\r\n                dropdownMatchSelectWidth={false}\r\n                open={true}\r\n                menuPortalTarget={document.body}\r\n                styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}\r\n                //value={this.state.selected}\r\n                onChange={opt => { onCommit(opt.value) }}\r\n                //onSelect={this.handleChange}\r\n                //onInputKeyDown={handleKeyDown}\r\n                options={optionTags}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GridSingleSidedTyle\r\n","D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\pages\\auth\\login\\login.component.jsx",["477","478","479","480","481","482","483"],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\pages\\auth\\index.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\sevices\\loginService.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\sevices\\api.js",[],"D:\\DigitlWorld\\version_1\\ofactura-v1-front\\src\\sevices\\tokenService.js",[],{"ruleId":"484","replacedBy":"485"},{"ruleId":"486","replacedBy":"487"},{"ruleId":"488","severity":1,"message":"489","line":24,"column":1,"nodeType":"490","endLine":24,"endColumn":37},{"ruleId":"491","severity":1,"message":"492","line":11,"column":8,"nodeType":"493","messageId":"494","endLine":11,"endColumn":14},{"ruleId":"491","severity":1,"message":"495","line":18,"column":19,"nodeType":"493","messageId":"494","endLine":18,"endColumn":24},{"ruleId":"491","severity":1,"message":"496","line":19,"column":21,"nodeType":"493","messageId":"494","endLine":19,"endColumn":29},{"ruleId":"497","severity":1,"message":"498","line":54,"column":8,"nodeType":"499","endLine":54,"endColumn":10,"suggestions":"500"},{"ruleId":"491","severity":1,"message":"501","line":1,"column":15,"nodeType":"493","messageId":"494","endLine":1,"endColumn":19},{"ruleId":"491","severity":1,"message":"502","line":3,"column":10,"nodeType":"493","messageId":"494","endLine":3,"endColumn":18},{"ruleId":"491","severity":1,"message":"503","line":6,"column":8,"nodeType":"493","messageId":"494","endLine":6,"endColumn":13},{"ruleId":"491","severity":1,"message":"504","line":10,"column":8,"nodeType":"493","messageId":"494","endLine":10,"endColumn":17},{"ruleId":"491","severity":1,"message":"505","line":11,"column":10,"nodeType":"493","messageId":"494","endLine":11,"endColumn":23},{"ruleId":"491","severity":1,"message":"506","line":12,"column":9,"nodeType":"493","messageId":"494","endLine":12,"endColumn":15},{"ruleId":"491","severity":1,"message":"507","line":6,"column":53,"nodeType":"493","messageId":"494","endLine":6,"endColumn":59},{"ruleId":"497","severity":1,"message":"508","line":60,"column":6,"nodeType":"499","endLine":60,"endColumn":8,"suggestions":"509"},{"ruleId":"510","severity":1,"message":"511","line":66,"column":14,"nodeType":"512","messageId":"513","endLine":66,"endColumn":46},{"ruleId":"510","severity":1,"message":"511","line":67,"column":15,"nodeType":"512","messageId":"513","endLine":67,"endColumn":48},{"ruleId":"510","severity":1,"message":"511","line":70,"column":14,"nodeType":"512","messageId":"513","endLine":70,"endColumn":58},{"ruleId":"514","severity":1,"message":"515","line":210,"column":25,"nodeType":"516","messageId":"517","endLine":210,"endColumn":27},{"ruleId":"491","severity":1,"message":"518","line":59,"column":13,"nodeType":"493","messageId":"494","endLine":59,"endColumn":22},{"ruleId":"491","severity":1,"message":"519","line":60,"column":13,"nodeType":"493","messageId":"494","endLine":60,"endColumn":24},{"ruleId":"491","severity":1,"message":"520","line":61,"column":13,"nodeType":"493","messageId":"494","endLine":61,"endColumn":25},{"ruleId":"497","severity":1,"message":"521","line":88,"column":6,"nodeType":"499","endLine":88,"endColumn":8,"suggestions":"522"},{"ruleId":"510","severity":1,"message":"511","line":94,"column":14,"nodeType":"512","messageId":"513","endLine":94,"endColumn":46},{"ruleId":"510","severity":1,"message":"511","line":95,"column":15,"nodeType":"512","messageId":"513","endLine":95,"endColumn":48},{"ruleId":"510","severity":1,"message":"511","line":98,"column":14,"nodeType":"512","messageId":"513","endLine":98,"endColumn":58},{"ruleId":"514","severity":1,"message":"515","line":254,"column":27,"nodeType":"516","messageId":"517","endLine":254,"endColumn":29},{"ruleId":"491","severity":1,"message":"523","line":4,"column":8,"nodeType":"493","messageId":"494","endLine":4,"endColumn":13},{"ruleId":"491","severity":1,"message":"507","line":5,"column":53,"nodeType":"493","messageId":"494","endLine":5,"endColumn":59},{"ruleId":"491","severity":1,"message":"524","line":21,"column":30,"nodeType":"493","messageId":"494","endLine":21,"endColumn":50},{"ruleId":"491","severity":1,"message":"525","line":21,"column":52,"nodeType":"493","messageId":"494","endLine":21,"endColumn":72},{"ruleId":"491","severity":1,"message":"526","line":22,"column":9,"nodeType":"493","messageId":"494","endLine":22,"endColumn":29},{"ruleId":"491","severity":1,"message":"527","line":22,"column":31,"nodeType":"493","messageId":"494","endLine":22,"endColumn":51},{"ruleId":"497","severity":1,"message":"528","line":72,"column":6,"nodeType":"499","endLine":72,"endColumn":8,"suggestions":"529"},{"ruleId":"510","severity":1,"message":"511","line":78,"column":14,"nodeType":"512","messageId":"513","endLine":78,"endColumn":46},{"ruleId":"510","severity":1,"message":"511","line":79,"column":15,"nodeType":"512","messageId":"513","endLine":79,"endColumn":48},{"ruleId":"510","severity":1,"message":"511","line":82,"column":14,"nodeType":"512","messageId":"513","endLine":82,"endColumn":58},{"ruleId":"497","severity":1,"message":"530","line":228,"column":5,"nodeType":"499","endLine":228,"endColumn":11,"suggestions":"531"},{"ruleId":"514","severity":1,"message":"515","line":233,"column":25,"nodeType":"516","messageId":"517","endLine":233,"endColumn":27},{"ruleId":"514","severity":1,"message":"515","line":99,"column":25,"nodeType":"516","messageId":"517","endLine":99,"endColumn":27},{"ruleId":"497","severity":1,"message":"532","line":193,"column":6,"nodeType":"499","endLine":193,"endColumn":8,"suggestions":"533"},{"ruleId":"510","severity":1,"message":"511","line":199,"column":14,"nodeType":"512","messageId":"513","endLine":199,"endColumn":46},{"ruleId":"510","severity":1,"message":"511","line":200,"column":15,"nodeType":"512","messageId":"513","endLine":200,"endColumn":48},{"ruleId":"510","severity":1,"message":"511","line":203,"column":14,"nodeType":"512","messageId":"513","endLine":203,"endColumn":58},{"ruleId":"491","severity":1,"message":"534","line":1,"column":8,"nodeType":"493","messageId":"494","endLine":1,"endColumn":14},{"ruleId":"535","severity":1,"message":"536","line":106,"column":13,"nodeType":"537","messageId":"538","endLine":116,"endColumn":14},{"ruleId":"535","severity":1,"message":"536","line":120,"column":13,"nodeType":"537","messageId":"538","endLine":132,"endColumn":14},{"ruleId":"535","severity":1,"message":"536","line":135,"column":13,"nodeType":"537","messageId":"538","endLine":154,"endColumn":14},{"ruleId":"535","severity":1,"message":"536","line":158,"column":13,"nodeType":"537","messageId":"538","endLine":176,"endColumn":14},{"ruleId":"491","severity":1,"message":"539","line":209,"column":7,"nodeType":"493","messageId":"494","endLine":209,"endColumn":29},{"ruleId":"540","severity":1,"message":"541","line":269,"column":31,"nodeType":"512","messageId":"542","endLine":269,"endColumn":32,"suggestions":"543"},{"ruleId":"491","severity":1,"message":"496","line":1,"column":9,"nodeType":"493","messageId":"494","endLine":1,"endColumn":17},{"ruleId":"544","severity":1,"message":"545","line":22,"column":29,"nodeType":"546","messageId":"547","endLine":22,"endColumn":31},{"ruleId":"544","severity":1,"message":"545","line":24,"column":40,"nodeType":"546","messageId":"547","endLine":24,"endColumn":42},{"ruleId":"491","severity":1,"message":"548","line":86,"column":17,"nodeType":"493","messageId":"494","endLine":86,"endColumn":27},{"ruleId":"549","severity":1,"message":"550","line":140,"column":9,"nodeType":"551","messageId":"517","endLine":142,"endColumn":6},{"ruleId":"491","severity":1,"message":"552","line":144,"column":9,"nodeType":"493","messageId":"494","endLine":144,"endColumn":12},{"ruleId":"514","severity":1,"message":"515","line":21,"column":16,"nodeType":"516","messageId":"517","endLine":21,"endColumn":18},{"ruleId":"514","severity":1,"message":"515","line":168,"column":22,"nodeType":"516","messageId":"517","endLine":168,"endColumn":24},{"ruleId":"491","severity":1,"message":"553","line":24,"column":13,"nodeType":"493","messageId":"494","endLine":24,"endColumn":14},{"ruleId":"491","severity":1,"message":"554","line":2,"column":9,"nodeType":"493","messageId":"494","endLine":2,"endColumn":18},{"ruleId":"491","severity":1,"message":"555","line":2,"column":20,"nodeType":"493","messageId":"494","endLine":2,"endColumn":27},{"ruleId":"491","severity":1,"message":"507","line":3,"column":8,"nodeType":"493","messageId":"494","endLine":3,"endColumn":14},{"ruleId":"491","severity":1,"message":"556","line":14,"column":25,"nodeType":"493","messageId":"494","endLine":14,"endColumn":33},{"ruleId":"557","severity":1,"message":"558","line":1,"column":1,"nodeType":"559","messageId":"517","endLine":40,"endColumn":2},{"ruleId":"514","severity":1,"message":"560","line":4,"column":18,"nodeType":"516","messageId":"517","endLine":4,"endColumn":20},{"ruleId":"514","severity":1,"message":"515","line":7,"column":38,"nodeType":"516","messageId":"517","endLine":7,"endColumn":40},{"ruleId":"491","severity":1,"message":"561","line":17,"column":13,"nodeType":"493","messageId":"494","endLine":17,"endColumn":14},{"ruleId":"514","severity":1,"message":"515","line":25,"column":35,"nodeType":"516","messageId":"517","endLine":25,"endColumn":37},{"ruleId":"514","severity":1,"message":"560","line":26,"column":27,"nodeType":"516","messageId":"517","endLine":26,"endColumn":29},{"ruleId":"562","severity":1,"message":"563","line":33,"column":17,"nodeType":"493","messageId":"564","endLine":33,"endColumn":21},{"ruleId":"491","severity":1,"message":"565","line":81,"column":10,"nodeType":"493","messageId":"494","endLine":81,"endColumn":22},{"ruleId":"497","severity":1,"message":"566","line":117,"column":6,"nodeType":"499","endLine":117,"endColumn":74,"suggestions":"567"},{"ruleId":"568","severity":1,"message":"569","line":443,"column":9,"nodeType":"570","messageId":"571","endLine":443,"endColumn":73},{"ruleId":"491","severity":1,"message":"572","line":3,"column":26,"nodeType":"493","messageId":"494","endLine":3,"endColumn":30},{"ruleId":"491","severity":1,"message":"573","line":16,"column":12,"nodeType":"493","messageId":"494","endLine":16,"endColumn":13},{"ruleId":"491","severity":1,"message":"574","line":6,"column":10,"nodeType":"493","messageId":"494","endLine":6,"endColumn":31},{"ruleId":"497","severity":1,"message":"575","line":34,"column":8,"nodeType":"499","endLine":34,"endColumn":23,"suggestions":"576"},{"ruleId":"497","severity":1,"message":"577","line":45,"column":8,"nodeType":"499","endLine":45,"endColumn":10,"suggestions":"578"},{"ruleId":"514","severity":1,"message":"515","line":98,"column":31,"nodeType":"516","messageId":"517","endLine":98,"endColumn":33},{"ruleId":"579","severity":1,"message":"580","line":168,"column":42,"nodeType":"493","messageId":"581","endLine":168,"endColumn":47},{"ruleId":"491","severity":1,"message":"523","line":2,"column":8,"nodeType":"493","messageId":"494","endLine":2,"endColumn":13},{"ruleId":"491","severity":1,"message":"582","line":4,"column":10,"nodeType":"493","messageId":"494","endLine":4,"endColumn":19},{"ruleId":"491","severity":1,"message":"583","line":7,"column":10,"nodeType":"493","messageId":"494","endLine":7,"endColumn":14},{"ruleId":"497","severity":1,"message":"584","line":17,"column":8,"nodeType":"499","endLine":17,"endColumn":26,"suggestions":"585"},{"ruleId":"491","severity":1,"message":"572","line":2,"column":40,"nodeType":"493","messageId":"494","endLine":2,"endColumn":44},{"ruleId":"491","severity":1,"message":"586","line":2,"column":46,"nodeType":"493","messageId":"494","endLine":2,"endColumn":54},{"ruleId":"497","severity":1,"message":"587","line":71,"column":8,"nodeType":"499","endLine":71,"endColumn":10,"suggestions":"588"},{"ruleId":"497","severity":1,"message":"589","line":45,"column":8,"nodeType":"499","endLine":45,"endColumn":16,"suggestions":"590"},{"ruleId":"514","severity":1,"message":"515","line":57,"column":42,"nodeType":"516","messageId":"517","endLine":57,"endColumn":44},{"ruleId":"497","severity":1,"message":"591","line":70,"column":8,"nodeType":"499","endLine":70,"endColumn":10,"suggestions":"592"},{"ruleId":"491","severity":1,"message":"496","line":1,"column":17,"nodeType":"493","messageId":"494","endLine":1,"endColumn":25},{"ruleId":"491","severity":1,"message":"492","line":2,"column":8,"nodeType":"493","messageId":"494","endLine":2,"endColumn":14},{"ruleId":"549","severity":1,"message":"550","line":4,"column":15,"nodeType":"551","messageId":"517","endLine":4,"endColumn":17},{"ruleId":"497","severity":1,"message":"593","line":27,"column":7,"nodeType":"499","endLine":27,"endColumn":9,"suggestions":"594"},{"ruleId":"491","severity":1,"message":"595","line":3,"column":10,"nodeType":"493","messageId":"494","endLine":3,"endColumn":15},{"ruleId":"491","severity":1,"message":"596","line":4,"column":9,"nodeType":"493","messageId":"494","endLine":4,"endColumn":26},{"ruleId":"491","severity":1,"message":"583","line":6,"column":10,"nodeType":"493","messageId":"494","endLine":6,"endColumn":14},{"ruleId":"491","severity":1,"message":"582","line":1,"column":27,"nodeType":"493","messageId":"494","endLine":1,"endColumn":36},{"ruleId":"491","severity":1,"message":"597","line":10,"column":8,"nodeType":"493","messageId":"494","endLine":10,"endColumn":23},{"ruleId":"491","severity":1,"message":"598","line":84,"column":24,"nodeType":"493","messageId":"494","endLine":84,"endColumn":27},{"ruleId":"491","severity":1,"message":"599","line":84,"column":29,"nodeType":"493","messageId":"494","endLine":84,"endColumn":32},{"ruleId":"579","severity":1,"message":"580","line":235,"column":42,"nodeType":"493","messageId":"581","endLine":235,"endColumn":47},{"ruleId":"491","severity":1,"message":"600","line":27,"column":14,"nodeType":"493","messageId":"494","endLine":27,"endColumn":18},{"ruleId":"497","severity":1,"message":"601","line":86,"column":6,"nodeType":"499","endLine":86,"endColumn":8,"suggestions":"602"},{"ruleId":"510","severity":1,"message":"511","line":92,"column":14,"nodeType":"512","messageId":"513","endLine":92,"endColumn":46},{"ruleId":"510","severity":1,"message":"511","line":93,"column":15,"nodeType":"512","messageId":"513","endLine":93,"endColumn":48},{"ruleId":"510","severity":1,"message":"511","line":96,"column":14,"nodeType":"512","messageId":"513","endLine":96,"endColumn":58},{"ruleId":"491","severity":1,"message":"603","line":119,"column":9,"nodeType":"493","messageId":"494","endLine":119,"endColumn":19},{"ruleId":"491","severity":1,"message":"572","line":1,"column":17,"nodeType":"493","messageId":"494","endLine":1,"endColumn":21},{"ruleId":"497","severity":1,"message":"604","line":33,"column":8,"nodeType":"499","endLine":33,"endColumn":10,"suggestions":"605"},{"ruleId":"491","severity":1,"message":"606","line":187,"column":9,"nodeType":"493","messageId":"494","endLine":187,"endColumn":18},{"ruleId":"491","severity":1,"message":"607","line":188,"column":9,"nodeType":"493","messageId":"494","endLine":188,"endColumn":25},{"ruleId":"491","severity":1,"message":"608","line":189,"column":9,"nodeType":"493","messageId":"494","endLine":189,"endColumn":23},{"ruleId":"491","severity":1,"message":"609","line":192,"column":9,"nodeType":"493","messageId":"494","endLine":192,"endColumn":20},{"ruleId":"491","severity":1,"message":"610","line":236,"column":7,"nodeType":"493","messageId":"494","endLine":236,"endColumn":21},{"ruleId":"491","severity":1,"message":"611","line":2,"column":10,"nodeType":"493","messageId":"494","endLine":2,"endColumn":20},{"ruleId":"491","severity":1,"message":"554","line":3,"column":10,"nodeType":"493","messageId":"494","endLine":3,"endColumn":19},{"ruleId":"491","severity":1,"message":"555","line":3,"column":21,"nodeType":"493","messageId":"494","endLine":3,"endColumn":28},{"ruleId":"491","severity":1,"message":"554","line":3,"column":10,"nodeType":"493","messageId":"494","endLine":3,"endColumn":19},{"ruleId":"491","severity":1,"message":"555","line":3,"column":21,"nodeType":"493","messageId":"494","endLine":3,"endColumn":28},{"ruleId":"491","severity":1,"message":"612","line":2,"column":10,"nodeType":"493","messageId":"494","endLine":2,"endColumn":30},{"ruleId":"491","severity":1,"message":"613","line":2,"column":32,"nodeType":"493","messageId":"494","endLine":2,"endColumn":42},{"ruleId":"491","severity":1,"message":"523","line":4,"column":8,"nodeType":"493","messageId":"494","endLine":4,"endColumn":13},{"ruleId":"491","severity":1,"message":"614","line":15,"column":8,"nodeType":"493","messageId":"494","endLine":15,"endColumn":21},{"ruleId":"491","severity":1,"message":"506","line":17,"column":9,"nodeType":"493","messageId":"494","endLine":17,"endColumn":15},{"ruleId":"491","severity":1,"message":"615","line":24,"column":26,"nodeType":"493","messageId":"494","endLine":24,"endColumn":41},{"ruleId":"497","severity":1,"message":"616","line":46,"column":8,"nodeType":"499","endLine":46,"endColumn":10,"suggestions":"617"},"no-native-reassign",["618"],"no-negated-in-lhs",["619"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'Modal' is defined but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'loadedKey?.time', 'signOut', and 't'. Either include them or remove the dependency array. If 'signOut' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["620"],"'call' is defined but never used.","'Redirect' is defined but never used.","'Login' is defined but never used.","'PaymeForm' is defined but never used.","'TextInBracket' is defined but never used.","'Option' is assigned a value but never used.","'Select' is defined but never used.","React Hook useEffect has missing dependencies: 'actId' and 'form'. Either include them or remove the dependency array.",["621"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'workPhone' is assigned a value but never used.","'physicalTin' is assigned a value but never used.","'physicalName' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'contractId' and 'form'. Either include them or remove the dependency array.",["622"],"'axios' is defined but never used.","'ConvertEmpDataToForm' is defined but never used.","'ConvertEmpDataToGrid' is defined but never used.","'ConvertGridToProduct' is defined but never used.","'ConvertProductToGrid' is defined but never used.","React Hook useEffect has missing dependencies: 'empowermentId', 'form', and 'user.tin'. Either include them or remove the dependency array.",["623"],"React Hook useEffect has a missing dependency: 'getProducts'. Either include it or remove the dependency array.",["624"],"React Hook useEffect has missing dependencies: 'form' and 'ttyId'. Either include them or remove the dependency array.",["625"],"'moment' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'FACTURA_PRODUCT_FIELDS' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\/.","unnecessaryEscape",["626","627"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'WithoutVat' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'emp' is assigned a value but never used.","'e' is assigned a value but never used.","'ENTER_KEY' is defined but never used.","'TAB_KEY' is defined but never used.","'onRevert' is assigned a value but never used.","no-extend-native","String prototype is read only, properties should not be added.","AssignmentExpression","Expected '!==' and instead saw '!='.","'r' is assigned a value but never used.","no-redeclare","'part' is already defined.","redeclared","'filteredInfo' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'modelName'. Either include it or remove the dependency array.",["628"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'Spin' is defined but never used.","'t' is assigned a value but never used.","'convertProductsToGrid' is defined but never used.","React Hook useEffect has a missing dependency: 'grid'. Either include it or remove the dependency array. You can also do a functional update 'setGrid(g => ...)' if you only need 'grid' in the 'setGrid' call.",["629"],"React Hook useEffect has missing dependencies: 'loadProducts', 'user.tin', and 'user.username'. Either include them or remove the dependency array. If 'loadProducts' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["630"],"no-self-assign","'total' is assigned to itself.","selfAssignment","'useEffect' is defined but never used.","'Link' is defined but never used.","React Hook useEffect has an unnecessary dependency: 'i18next.language'. Either exclude it or remove the dependency array. Outer scope values like 'i18next.language' aren't valid dependencies because mutating them doesn't re-render the component.",["631"],"'Checkbox' is defined but never used.","React Hook useEffect has a missing dependency: 'setData'. Either include it or remove the dependency array. If 'setData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["632"],"React Hook useEffect has a missing dependency: 'setChoosenCompany'. Either include it or remove the dependency array.",["633"],"React Hook useEffect has missing dependencies: 'setChoosenCompany', 'setUserComps', and 'user.username'. Either include them or remove the dependency array. If 'setUserComps' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["634"],"React Hook useEffect has missing dependencies: 'form' and 'notificationId'. Either include them or remove the dependency array.",["635"],"'Badge' is defined but never used.","'PlusCircleTwoTone' is defined but never used.","'GridUserFetcher' is defined but never used.","'col' is assigned a value but never used.","'row' is assigned a value but never used.","'i18n' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'duplicateId', 'facturaId', 'form', 'user.tin', and 'user.username'. Either include them or remove the dependency array.",["636"],"'formValues' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'user.tin' and 'user.username'. Either include them or remove the dependency array.",["637"],"'FacturaId' is assigned a value but never used.","'FacturaProductId' is assigned a value but never used.","'ForeignCompany' is assigned a value but never used.","'ProductList' is assigned a value but never used.","'formProperties' is assigned a value but never used.","'DatePicker' is defined but never used.","'EyeInvisibleOutlined' is defined but never used.","'EyeTwoTone' is defined but never used.","'axiosInstance' is defined but never used.","'setKeyIsLoading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'eKeys' and 't'. Either include them or remove the dependency array. You can also do a functional update 'setEKeys(e => ...)' if you only need 'eKeys' in the 'setEKeys' call.",["638"],"no-global-assign","no-unsafe-negation",{"desc":"639","fix":"640"},{"desc":"641","fix":"642"},{"desc":"643","fix":"644"},{"desc":"645","fix":"646"},{"desc":"647","fix":"648"},{"desc":"649","fix":"650"},{"messageId":"651","fix":"652","desc":"653"},{"messageId":"654","fix":"655","desc":"656"},{"desc":"657","fix":"658"},{"desc":"659","fix":"660"},{"desc":"661","fix":"662"},{"desc":"663","fix":"664"},{"desc":"665","fix":"666"},{"desc":"667","fix":"668"},{"desc":"669","fix":"670"},{"desc":"671","fix":"672"},{"desc":"673","fix":"674"},{"desc":"675","fix":"676"},{"desc":"677","fix":"678"},"Update the dependencies array to be: [loadedKey?.time, signOut, t]",{"range":"679","text":"680"},"Update the dependencies array to be: [actId, form]",{"range":"681","text":"682"},"Update the dependencies array to be: [contractId, form]",{"range":"683","text":"684"},"Update the dependencies array to be: [empowermentId, form, user.tin]",{"range":"685","text":"686"},"Update the dependencies array to be: [getProducts, grid]",{"range":"687","text":"688"},"Update the dependencies array to be: [form, ttyId]",{"range":"689","text":"690"},"removeEscape",{"range":"691","text":"692"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"693","text":"694"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [pagination, dataSourcePath, searchText, searchedColumn, reRenderer, modelName]",{"range":"695","text":"696"},"Update the dependencies array to be: [grid, initialValues]",{"range":"697","text":"698"},"Update the dependencies array to be: [loadProducts, user.tin, user.username]",{"range":"699","text":"700"},"Update the dependencies array to be: []",{"range":"701","text":"702"},"Update the dependencies array to be: [setData]",{"range":"703","text":"704"},"Update the dependencies array to be: [chosen, setChoosenCompany]",{"range":"705","text":"706"},"Update the dependencies array to be: [setChoosenCompany, setUserComps, user.username]",{"range":"707","text":"708"},"Update the dependencies array to be: [form, notificationId]",{"range":"709","text":"710"},"Update the dependencies array to be: [duplicateId, facturaId, form, user.tin, user.username]",{"range":"711","text":"712"},"Update the dependencies array to be: [user.tin, user.username]",{"range":"713","text":"714"},"Update the dependencies array to be: [eKeys, t]",{"range":"715","text":"716"},[1895,1897],"[loadedKey?.time, signOut, t]",[2411,2413],"[actId, form]",[3097,3099],"[contractId, form]",[2864,2866],"[empowermentId, form, user.tin]",[6944,6950],"[getProducts, grid]",[6296,6298],"[form, ttyId]",[11532,11533],"",[11532,11532],"\\",[5011,5079],"[pagination, dataSourcePath, searchText, searchedColumn, reRenderer, modelName]",[1305,1320],"[grid, initialValues]",[1602,1604],"[loadProducts, user.tin, user.username]",[651,669],"[]",[2575,2577],"[setData]",[1376,1384],"[chosen, setChoosenCompany]",[2145,2147],"[setChoosenCompany, setUserComps, user.username]",[787,789],"[form, notificationId]",[3444,3446],"[duplicateId, facturaId, form, user.tin, user.username]",[1181,1183],"[user.tin, user.username]",[1876,1878],"[eKeys, t]"]